# ./binding.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:9f884660a5086bb95c07f203246ae14110c4061b
# Generated 2023-02-26 10:30:09.732074 by PyXB version 1.2.6 using Python 3.8.10.final.0
# Namespace http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:297fd966-b5b8-11ed-880d-3775438e0c05')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 75, 8)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.required = STD_ANON._CF_enumeration.addEnumeration(unicode_value='required', tag='required')
STD_ANON.illegal = STD_ANON._CF_enumeration.addEnumeration(unicode_value='illegal', tag='illegal')
STD_ANON.optional = STD_ANON._CF_enumeration.addEnumeration(unicode_value='optional', tag='optional')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 92, 16)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.requires = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='requires', tag='requires')
STD_ANON_.provides = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='provides', tag='provides')
STD_ANON_.both = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='both', tag='both')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 148, 16)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.in_ = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
STD_ANON_2.out = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='out', tag='out')
STD_ANON_2.inout = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='inout', tag='inout')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorModeType
class abstractorModeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Mode for this abstractor"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorModeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 177, 4)
    _Documentation = 'Mode for this abstractor'
abstractorModeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=abstractorModeType, enum_prefix=None)
abstractorModeType.master = abstractorModeType._CF_enumeration.addEnumeration(unicode_value='master', tag='master')
abstractorModeType.slave = abstractorModeType._CF_enumeration.addEnumeration(unicode_value='slave', tag='slave')
abstractorModeType.direct = abstractorModeType._CF_enumeration.addEnumeration(unicode_value='direct', tag='direct')
abstractorModeType.system = abstractorModeType._CF_enumeration.addEnumeration(unicode_value='system', tag='system')
abstractorModeType._InitializeFacetMap(abstractorModeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'abstractorModeType', abstractorModeType)
_module_typeBindings.abstractorModeType = abstractorModeType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}formatType
class formatType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """This is an indication on the formatof the value for user defined properties.  bitString means either a double quoted string of 1's an 0's or a scaledInteger number. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'formatType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 64, 4)
    _Documentation = "This is an indication on the formatof the value for user defined properties.  bitString means either a double quoted string of 1's an 0's or a scaledInteger number. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable."
formatType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=formatType, enum_prefix=None)
formatType.bitString = formatType._CF_enumeration.addEnumeration(unicode_value='bitString', tag='bitString')
formatType.bool = formatType._CF_enumeration.addEnumeration(unicode_value='bool', tag='bool')
formatType.float = formatType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
formatType.long = formatType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
formatType.string = formatType._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
formatType._InitializeFacetMap(formatType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'formatType', formatType)
_module_typeBindings.formatType = formatType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeTypeType
class rangeTypeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """This type is used to indicate how the minimum and maximum attributes values should be interpreted. For purposes of this attribute, an int is 4 bytes and a long is 8 bytes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'rangeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 101, 4)
    _Documentation = 'This type is used to indicate how the minimum and maximum attributes values should be interpreted. For purposes of this attribute, an int is 4 bytes and a long is 8 bytes.'
rangeTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=rangeTypeType, enum_prefix=None)
rangeTypeType.float = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
rangeTypeType.int = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
rangeTypeType.unsigned_int = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned int', tag='unsigned_int')
rangeTypeType.long = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
rangeTypeType.unsigned_long = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned long', tag='unsigned_long')
rangeTypeType._InitializeFacetMap(rangeTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'rangeTypeType', rangeTypeType)
_module_typeBindings.rangeTypeType = rangeTypeType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}delayValueUnitType
class delayValueUnitType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates legal units for delay values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'delayValueUnitType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 118, 4)
    _Documentation = 'Indicates legal units for delay values.'
delayValueUnitType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=delayValueUnitType, enum_prefix=None)
delayValueUnitType.ps = delayValueUnitType._CF_enumeration.addEnumeration(unicode_value='ps', tag='ps')
delayValueUnitType.ns = delayValueUnitType._CF_enumeration.addEnumeration(unicode_value='ns', tag='ns')
delayValueUnitType._InitializeFacetMap(delayValueUnitType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'delayValueUnitType', delayValueUnitType)
_module_typeBindings.delayValueUnitType = delayValueUnitType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitSteeringType
class bitSteeringType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Indicates whether bit steering should be used to map this interface onto a bus of different data width.

Values are "on", "off" (defaults to "off")."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bitSteeringType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 66, 4)
    _Documentation = 'Indicates whether bit steering should be used to map this interface onto a bus of different data width.\n\nValues are "on", "off" (defaults to "off").'
bitSteeringType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bitSteeringType, enum_prefix=None)
bitSteeringType.on = bitSteeringType._CF_enumeration.addEnumeration(unicode_value='on', tag='on')
bitSteeringType.off = bitSteeringType._CF_enumeration.addEnumeration(unicode_value='off', tag='off')
bitSteeringType._InitializeFacetMap(bitSteeringType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bitSteeringType', bitSteeringType)
_module_typeBindings.bitSteeringType = bitSteeringType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}endianessType
class endianessType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'endianessType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 77, 4)
    _Documentation = "'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian."
endianessType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=endianessType, enum_prefix=None)
endianessType.big = endianessType._CF_enumeration.addEnumeration(unicode_value='big', tag='big')
endianessType.little = endianessType._CF_enumeration.addEnumeration(unicode_value='little', tag='little')
endianessType._InitializeFacetMap(endianessType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'endianessType', endianessType)
_module_typeBindings.endianessType = endianessType

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 502, 24)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.master = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='master', tag='master')
STD_ANON_3.slave = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='slave', tag='slave')
STD_ANON_3.system = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='system', tag='system')
STD_ANON_3.mirroredMaster = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='mirroredMaster', tag='mirroredMaster')
STD_ANON_3.mirroredSlave = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='mirroredSlave', tag='mirroredSlave')
STD_ANON_3.mirroredSystem = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='mirroredSystem', tag='mirroredSystem')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 80, 20)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.nontyped = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='nontyped', tag='nontyped')
STD_ANON_4.typed = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='typed', tag='typed')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 262, 16)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.register = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='register', tag='register')
STD_ANON_5.signal = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='signal', tag='signal')
STD_ANON_5.pin = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='pin', tag='pin')
STD_ANON_5.interface = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='interface', tag='interface')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolveType
class resolveType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Determines how a property is resolved.  Immediate means the value is included in the XML document and cannot be changed by the user.  User means the value must be obtained from the user.  Dependent means the value depends on the value of other properties.  A dependency expression must be supplied in the dependency attribute.  Generated means the value will be provided by a generator."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'resolveType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 63, 4)
    _Documentation = 'Determines how a property is resolved.  Immediate means the value is included in the XML document and cannot be changed by the user.  User means the value must be obtained from the user.  Dependent means the value depends on the value of other properties.  A dependency expression must be supplied in the dependency attribute.  Generated means the value will be provided by a generator.'
resolveType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=resolveType, enum_prefix=None)
resolveType.immediate = resolveType._CF_enumeration.addEnumeration(unicode_value='immediate', tag='immediate')
resolveType.user = resolveType._CF_enumeration.addEnumeration(unicode_value='user', tag='user')
resolveType.dependent = resolveType._CF_enumeration.addEnumeration(unicode_value='dependent', tag='dependent')
resolveType.generated = resolveType._CF_enumeration.addEnumeration(unicode_value='generated', tag='generated')
resolveType._InitializeFacetMap(resolveType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'resolveType', resolveType)
_module_typeBindings.resolveType = resolveType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellFunctionValueType
class cellFunctionValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates legal cell function values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cellFunctionValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 66, 4)
    _Documentation = 'Indicates legal cell function values.'
cellFunctionValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cellFunctionValueType, enum_prefix=None)
cellFunctionValueType.nand2 = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='nand2', tag='nand2')
cellFunctionValueType.buf = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='buf', tag='buf')
cellFunctionValueType.inv = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='inv', tag='inv')
cellFunctionValueType.mux21 = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='mux21', tag='mux21')
cellFunctionValueType.dff = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='dff', tag='dff')
cellFunctionValueType.latch = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='latch', tag='latch')
cellFunctionValueType.xor2 = cellFunctionValueType._CF_enumeration.addEnumeration(unicode_value='xor2', tag='xor2')
cellFunctionValueType._InitializeFacetMap(cellFunctionValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'cellFunctionValueType', cellFunctionValueType)
_module_typeBindings.cellFunctionValueType = cellFunctionValueType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellClassValueType
class cellClassValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates legal cell class values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cellClassValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 80, 4)
    _Documentation = 'Indicates legal cell class values.'
cellClassValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cellClassValueType, enum_prefix=None)
cellClassValueType.combinational = cellClassValueType._CF_enumeration.addEnumeration(unicode_value='combinational', tag='combinational')
cellClassValueType.sequential = cellClassValueType._CF_enumeration.addEnumeration(unicode_value='sequential', tag='sequential')
cellClassValueType._InitializeFacetMap(cellClassValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'cellClassValueType', cellClassValueType)
_module_typeBindings.cellClassValueType = cellClassValueType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellStrengthValueType
class cellStrengthValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates legal cell strength values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cellStrengthValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 89, 4)
    _Documentation = 'Indicates legal cell strength values.'
cellStrengthValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cellStrengthValueType, enum_prefix=None)
cellStrengthValueType.low = cellStrengthValueType._CF_enumeration.addEnumeration(unicode_value='low', tag='low')
cellStrengthValueType.median = cellStrengthValueType._CF_enumeration.addEnumeration(unicode_value='median', tag='median')
cellStrengthValueType.high = cellStrengthValueType._CF_enumeration.addEnumeration(unicode_value='high', tag='high')
cellStrengthValueType._InitializeFacetMap(cellStrengthValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'cellStrengthValueType', cellStrengthValueType)
_module_typeBindings.cellStrengthValueType = cellStrengthValueType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}edgeValueType
class edgeValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates legal values for edge specification attributes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'edgeValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 99, 4)
    _Documentation = 'Indicates legal values for edge specification attributes.'
edgeValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=edgeValueType, enum_prefix=None)
edgeValueType.rise = edgeValueType._CF_enumeration.addEnumeration(unicode_value='rise', tag='rise')
edgeValueType.fall = edgeValueType._CF_enumeration.addEnumeration(unicode_value='fall', tag='fall')
edgeValueType._InitializeFacetMap(edgeValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'edgeValueType', edgeValueType)
_module_typeBindings.edgeValueType = edgeValueType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}delayValueType
class delayValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indicates the type of delay value - minimum or maximum delay."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'delayValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 108, 4)
    _Documentation = 'Indicates the type of delay value - minimum or maximum delay.'
delayValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=delayValueType, enum_prefix=None)
delayValueType.min = delayValueType._CF_enumeration.addEnumeration(unicode_value='min', tag='min')
delayValueType.max = delayValueType._CF_enumeration.addEnumeration(unicode_value='max', tag='max')
delayValueType._InitializeFacetMap(delayValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'delayValueType', delayValueType)
_module_typeBindings.delayValueType = delayValueType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}delayPercentageType
class delayPercentageType (pyxb.binding.datatypes.float):

    """Type used to record percentage values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'delayPercentageType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 117, 4)
    _Documentation = 'Type used to record percentage values.'
delayPercentageType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=delayPercentageType, value=pyxb.binding.datatypes.float(0.0))
delayPercentageType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=delayPercentageType, value=pyxb.binding.datatypes.float(100.0))
delayPercentageType._InitializeFacetMap(delayPercentageType._CF_minInclusive,
   delayPercentageType._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'delayPercentageType', delayPercentageType)
_module_typeBindings.delayPercentageType = delayPercentageType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nonNegativeFloat
class nonNegativeFloat (pyxb.binding.datatypes.float):

    """Defines a non-negative floating point number."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nonNegativeFloat')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 126, 4)
    _Documentation = 'Defines a non-negative floating point number.'
nonNegativeFloat._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=nonNegativeFloat, value=pyxb.binding.datatypes.float(0.0))
nonNegativeFloat._InitializeFacetMap(nonNegativeFloat._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'nonNegativeFloat', nonNegativeFloat)
_module_typeBindings.nonNegativeFloat = nonNegativeFloat

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 497, 28)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.void = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='void', tag='void')
STD_ANON_6.int = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Union simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}spiritURI
# superclasses pyxb.binding.datatypes.anySimpleType
class spiritURI (pyxb.binding.basis.STD_union):

    """IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'spiritURI')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 566, 4)
    _Documentation = 'IP-XACT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI'

    _MemberTypes = ( pyxb.binding.datatypes.string, )
spiritURI._CF_pattern = pyxb.binding.facets.CF_pattern()
spiritURI._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=spiritURI)
spiritURI._InitializeFacetMap(spiritURI._CF_pattern,
   spiritURI._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'spiritURI', spiritURI)
_module_typeBindings.spiritURI = spiritURI

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dataTypeType
class dataTypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Enumerates C argument data types."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dataTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 572, 4)
    _Documentation = 'Enumerates C argument data types.'
dataTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=dataTypeType, enum_prefix=None)
dataTypeType.int = dataTypeType._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
dataTypeType.unsigned_int = dataTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned int', tag='unsigned_int')
dataTypeType.long = dataTypeType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
dataTypeType.unsigned_long = dataTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned long', tag='unsigned_long')
dataTypeType.float = dataTypeType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
dataTypeType.double = dataTypeType._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
dataTypeType.char = dataTypeType._CF_enumeration.addEnumeration(unicode_value='char *', tag='char')
dataTypeType.void = dataTypeType._CF_enumeration.addEnumeration(unicode_value='void *', tag='void')
dataTypeType._InitializeFacetMap(dataTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'dataTypeType', dataTypeType)
_module_typeBindings.dataTypeType = dataTypeType

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 73, 8)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.unknown = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_7.cSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='cSource', tag='cSource')
STD_ANON_7.cppSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='cppSource', tag='cppSource')
STD_ANON_7.asmSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='asmSource', tag='asmSource')
STD_ANON_7.vhdlSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='vhdlSource', tag='vhdlSource')
STD_ANON_7.vhdlSource_87 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='vhdlSource-87', tag='vhdlSource_87')
STD_ANON_7.vhdlSource_93 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='vhdlSource-93', tag='vhdlSource_93')
STD_ANON_7.verilogSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='verilogSource', tag='verilogSource')
STD_ANON_7.verilogSource_95 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='verilogSource-95', tag='verilogSource_95')
STD_ANON_7.verilogSource_2001 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='verilogSource-2001', tag='verilogSource_2001')
STD_ANON_7.swObject = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='swObject', tag='swObject')
STD_ANON_7.swObjectLibrary = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='swObjectLibrary', tag='swObjectLibrary')
STD_ANON_7.vhdlBinaryLibrary = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='vhdlBinaryLibrary', tag='vhdlBinaryLibrary')
STD_ANON_7.verilogBinaryLibrary = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='verilogBinaryLibrary', tag='verilogBinaryLibrary')
STD_ANON_7.unelaboratedHdl = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='unelaboratedHdl', tag='unelaboratedHdl')
STD_ANON_7.executableHdl = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='executableHdl', tag='executableHdl')
STD_ANON_7.systemVerilogSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource', tag='systemVerilogSource')
STD_ANON_7.systemVerilogSource_3_0 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource-3.0', tag='systemVerilogSource_3_0')
STD_ANON_7.systemVerilogSource_3_1 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource-3.1', tag='systemVerilogSource_3_1')
STD_ANON_7.systemCSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemCSource', tag='systemCSource')
STD_ANON_7.systemCSource_2_0 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemCSource-2.0', tag='systemCSource_2_0')
STD_ANON_7.systemCSource_2_0_1 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemCSource-2.0.1', tag='systemCSource_2_0_1')
STD_ANON_7.systemCSource_2_1 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemCSource-2.1', tag='systemCSource_2_1')
STD_ANON_7.systemCSource_2_2 = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemCSource-2.2', tag='systemCSource_2_2')
STD_ANON_7.veraSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='veraSource', tag='veraSource')
STD_ANON_7.eSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='eSource', tag='eSource')
STD_ANON_7.perlSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='perlSource', tag='perlSource')
STD_ANON_7.tclSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='tclSource', tag='tclSource')
STD_ANON_7.OVASource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='OVASource', tag='OVASource')
STD_ANON_7.SVASource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='SVASource', tag='SVASource')
STD_ANON_7.pslSource = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='pslSource', tag='pslSource')
STD_ANON_7.systemVerilogSource_3_1a = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource-3.1a', tag='systemVerilogSource_3_1a')
STD_ANON_7.SDC = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='SDC', tag='SDC')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.Name, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 156, 8)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.and_ = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='and', tag='and_')
STD_ANON_8.or_ = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='or', tag='or_')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 189, 10)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.instance = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='instance', tag='instance')
STD_ANON_9.entity = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='entity', tag='entity')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 236, 8)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.TGI = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='TGI', tag='TGI')
STD_ANON_10.none = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 250, 14)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.file = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='file', tag='file')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}accessType
class accessType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The read/write accessability of an addess block."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accessType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 68, 4)
    _Documentation = 'The read/write accessability of an addess block.'
accessType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=accessType, enum_prefix=None)
accessType.read_only = accessType._CF_enumeration.addEnumeration(unicode_value='read-only', tag='read_only')
accessType.write_only = accessType._CF_enumeration.addEnumeration(unicode_value='write-only', tag='write_only')
accessType.read_write = accessType._CF_enumeration.addEnumeration(unicode_value='read-write', tag='read_write')
accessType.writeOnce = accessType._CF_enumeration.addEnumeration(unicode_value='writeOnce', tag='writeOnce')
accessType.read_writeOnce = accessType._CF_enumeration.addEnumeration(unicode_value='read-writeOnce', tag='read_writeOnce')
accessType._InitializeFacetMap(accessType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'accessType', accessType)
_module_typeBindings.accessType = accessType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankAlignmentType
class bankAlignmentType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """'serial' or 'parallel' bank alignment."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankAlignmentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 80, 4)
    _Documentation = "'serial' or 'parallel' bank alignment."
bankAlignmentType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bankAlignmentType, enum_prefix=None)
bankAlignmentType.serial = bankAlignmentType._CF_enumeration.addEnumeration(unicode_value='serial', tag='serial')
bankAlignmentType.parallel = bankAlignmentType._CF_enumeration.addEnumeration(unicode_value='parallel', tag='parallel')
bankAlignmentType._InitializeFacetMap(bankAlignmentType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bankAlignmentType', bankAlignmentType)
_module_typeBindings.bankAlignmentType = bankAlignmentType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usageType
class usageType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Describes the usage of an address block."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'usageType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 89, 4)
    _Documentation = 'Describes the usage of an address block.'
usageType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=usageType, enum_prefix=None)
usageType.memory = usageType._CF_enumeration.addEnumeration(unicode_value='memory', tag='memory')
usageType.register = usageType._CF_enumeration.addEnumeration(unicode_value='register', tag='register')
usageType.reserved = usageType._CF_enumeration.addEnumeration(unicode_value='reserved', tag='reserved')
usageType._InitializeFacetMap(usageType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'usageType', usageType)
_module_typeBindings.usageType = usageType

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 694, 28)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.read = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='read', tag='read')
STD_ANON_12.write = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='write', tag='write')
STD_ANON_12.read_write = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='read-write', tag='read_write')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.Name, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 733, 16)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.oneToClear = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='oneToClear', tag='oneToClear')
STD_ANON_13.oneToSet = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='oneToSet', tag='oneToSet')
STD_ANON_13.oneToToggle = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='oneToToggle', tag='oneToToggle')
STD_ANON_13.zeroToClear = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='zeroToClear', tag='zeroToClear')
STD_ANON_13.zeroToSet = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='zeroToSet', tag='zeroToSet')
STD_ANON_13.zeroToToggle = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='zeroToToggle', tag='zeroToToggle')
STD_ANON_13.clear = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='clear', tag='clear')
STD_ANON_13.set_ = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='set', tag='set_')
STD_ANON_13.modify = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='modify', tag='modify')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.Name, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 756, 16)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.clear = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='clear', tag='clear')
STD_ANON_14.set_ = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='set', tag='set_')
STD_ANON_14.modify = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='modify', tag='modify')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 775, 32)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.unconstrained = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='unconstrained', tag='unconstrained')
STD_ANON_15.restore = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='restore', tag='restore')
STD_ANON_15.writeAsRead = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='writeAsRead', tag='writeAsRead')
STD_ANON_15.readOnly = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='readOnly', tag='readOnly')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 76, 16)
    _Documentation = None
STD_ANON_16._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_16._CF_pattern.addPattern(pattern='[a-zA-Z0-9_+\\*\\.]*:[a-zA-Z0-9_+\\*\\.]*:[a-zA-Z0-9_+\\*\\.]*')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_pattern)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 147, 16)
    _Documentation = None
STD_ANON_17._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_17._CF_pattern.addPattern(pattern='[a-zA-Z0-9_+\\*\\.]*:[a-zA-Z0-9_+\\*\\.]*:[a-zA-Z0-9_+\\*\\.]*')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_pattern)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentPortDirectionType
class componentPortDirectionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The direction of a component port."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'componentPortDirectionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 66, 4)
    _Documentation = 'The direction of a component port.'
componentPortDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=componentPortDirectionType, enum_prefix=None)
componentPortDirectionType.in_ = componentPortDirectionType._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
componentPortDirectionType.out = componentPortDirectionType._CF_enumeration.addEnumeration(unicode_value='out', tag='out')
componentPortDirectionType.inout = componentPortDirectionType._CF_enumeration.addEnumeration(unicode_value='inout', tag='inout')
componentPortDirectionType.phantom = componentPortDirectionType._CF_enumeration.addEnumeration(unicode_value='phantom', tag='phantom')
componentPortDirectionType._InitializeFacetMap(componentPortDirectionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'componentPortDirectionType', componentPortDirectionType)
_module_typeBindings.componentPortDirectionType = componentPortDirectionType

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 195, 8)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.requires = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='requires', tag='requires')
STD_ANON_18.provides = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='provides', tag='provides')
STD_ANON_18.both = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='both', tag='both')
STD_ANON_18.phantom = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='phantom', tag='phantom')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 208, 8)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.ref = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='ref', tag='ref')
STD_ANON_19.ptr = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='ptr', tag='ptr')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 149, 12)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.clock = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='clock', tag='clock')
STD_ANON_20.singleShot = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='singleShot', tag='singleShot')
STD_ANON_20.any = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='any', tag='any')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledInteger
class scaledInteger (pyxb.binding.datatypes.string):

    """A scaled integer.  It supports any string recognized by java.lang.Long.decode().  It also supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'scaledInteger')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 63, 4)
    _Documentation = 'A scaled integer.  It supports any string recognized by java.lang.Long.decode().  It also supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).'
scaledInteger._CF_pattern = pyxb.binding.facets.CF_pattern()
scaledInteger._CF_pattern.addPattern(pattern='[+\\-]?(0x|0X|#)?[0-9a-fA-F]+[kmgtKMGT]?')
scaledInteger._InitializeFacetMap(scaledInteger._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'scaledInteger', scaledInteger)
_module_typeBindings.scaledInteger = scaledInteger

# List simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}doubleList
# superclasses pyxb.binding.datatypes.anySimpleType
class doubleList (pyxb.binding.basis.STD_list):

    """List of doubles.  Used to build configurableDouble type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'doubleList')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 87, 4)
    _Documentation = 'List of doubles.  Used to build configurableDouble type.'

    _ItemType = pyxb.binding.datatypes.double
doubleList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'doubleList', doubleList)
_module_typeBindings.doubleList = doubleList

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portName
class portName (pyxb.binding.datatypes.string):

    """A type for a port name string, allows letters, digits, dash, colon, underscore and period"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portName')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 102, 4)
    _Documentation = 'A type for a port name string, allows letters, digits, dash, colon, underscore and period'
portName._CF_pattern = pyxb.binding.facets.CF_pattern()
portName._CF_pattern.addPattern(pattern='\\i[\\p{L}\\p{N}\\.\\-:_]*')
portName._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
portName._InitializeFacetMap(portName._CF_pattern,
   portName._CF_whiteSpace)
Namespace.addCategoryObject('typeBinding', 'portName', portName)
_module_typeBindings.portName = portName

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instancePath
class instancePath (pyxb.binding.datatypes.string):

    """A type for a instance name path string, allows letters, digits, dash, colon, underscore, period and slash"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'instancePath')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 111, 4)
    _Documentation = 'A type for a instance name path string, allows letters, digits, dash, colon, underscore, period and slash'
instancePath._CF_pattern = pyxb.binding.facets.CF_pattern()
instancePath._CF_pattern.addPattern(pattern='\\i[\\p{L}\\p{N}\\.\\-:_]*')
instancePath._CF_pattern.addPattern(pattern='\\i[\\p{L}\\p{N}\\.\\-:_]*/\\i[\\p{L}\\p{N}\\.\\-:_]*')
instancePath._CF_pattern.addPattern(pattern='(\\i[\\p{L}\\p{N}\\.\\-:_]*/)+[\\i\\p{L}\\p{N}\\.\\-:_]*')
instancePath._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
instancePath._InitializeFacetMap(instancePath._CF_pattern,
   instancePath._CF_whiteSpace)
Namespace.addCategoryObject('typeBinding', 'instancePath', instancePath)
_module_typeBindings.instancePath = instancePath

# Atomic simple type: [anonymous]
class STD_ANON_21 (accessType):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 314, 8)
    _Documentation = None
STD_ANON_21._InitializeFacetMap()
_module_typeBindings.STD_ANON_21 = STD_ANON_21

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledNonNegativeInteger
class scaledNonNegativeInteger (scaledInteger):

    """A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'scaledNonNegativeInteger')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 71, 4)
    _Documentation = 'A scaled nonnegative integer that consists of the value set {0, 1, ...}.  It is derived from scaledInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).'
scaledNonNegativeInteger._CF_pattern = pyxb.binding.facets.CF_pattern()
scaledNonNegativeInteger._CF_pattern.addPattern(pattern='[+]?(0x|0X|#)?[0-9a-fA-F]+[kmgtKMGT]?')
scaledNonNegativeInteger._InitializeFacetMap(scaledNonNegativeInteger._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'scaledNonNegativeInteger', scaledNonNegativeInteger)
_module_typeBindings.scaledNonNegativeInteger = scaledNonNegativeInteger

# List simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configurableDouble
# superclasses doubleList
class configurableDouble (pyxb.binding.basis.STD_list):

    """Can be a double or an empty string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'configurableDouble')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 93, 4)
    _Documentation = 'Can be a double or an empty string.'

    _ItemType = pyxb.binding.datatypes.double
configurableDouble._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
configurableDouble._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
configurableDouble._InitializeFacetMap(configurableDouble._CF_minLength,
   configurableDouble._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'configurableDouble', configurableDouble)
_module_typeBindings.configurableDouble = configurableDouble

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scaledPositiveInteger
class scaledPositiveInteger (scaledNonNegativeInteger):

    """A scaled positive integer that consists of the value set {1, 2, ...}.  It is derived from scaledNonNegativeInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'scaledPositiveInteger')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/simpleTypes.xsd', 79, 4)
    _Documentation = 'A scaled positive integer that consists of the value set {1, 2, ...}.  It is derived from scaledNonNegativeInteger and it supports a magnitude scale suffix of upper or lower case K (kilo=2^10), M (mega=2^20), G (giga=2^30) or T (tera=2^40).'
scaledPositiveInteger._CF_pattern = pyxb.binding.facets.CF_pattern()
scaledPositiveInteger._CF_pattern.addPattern(pattern='[+]?(0x|0X|#)?[0]*[1-9a-fA-F][0-9a-fA-F]*[kmgtKMGT]?')
scaledPositiveInteger._InitializeFacetMap(scaledPositiveInteger._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'scaledPositiveInteger', scaledPositiveInteger)
_module_typeBindings.scaledPositiveInteger = scaledPositiveInteger

# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}serviceType with content type ELEMENT_ONLY
class serviceType (pyxb.binding.basis.complexTypeDefinition):
    """The service that this transactional port can provide or requires."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'serviceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 83, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}initiative uses Python identifier initiative
    __initiative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'initiative'), 'initiative', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_serviceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009initiative', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 88, 12), )

    
    initiative = property(__initiative.value, __initiative.set, None, 'If this element is present, the type of access is restricted to the specified value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeName uses Python identifier typeName
    __typeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeName'), 'typeName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_serviceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeName', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 100, 12), )

    
    typeName = property(__typeName.value, __typeName.set, None, 'Defines the name of the transactional interface type.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_serviceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    _ElementMap.update({
        __initiative.name() : __initiative,
        __typeName.name() : __typeName,
        __vendorExtensions.name() : __vendorExtensions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.serviceType = serviceType
Namespace.addCategoryObject('typeBinding', 'serviceType', serviceType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Defines the name of the transactional interface type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 104, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}implicit uses Python identifier implicit
    __implicit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'implicit'), 'implicit', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009implicit', pyxb.binding.datatypes.boolean, unicode_default='false')
    __implicit._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 107, 28)
    __implicit._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 107, 28)
    
    implicit = property(__implicit.value, __implicit.set, None, 'Defines that the typeName supplied for this service is implicit and a netlister should not declare this service in\na language specific top-level netlist ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __implicit.name() : __implicit
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Define the ports and other information of a particular abstraction of the bus"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 174, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busType uses Python identifier busType
    __busType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busType'), 'busType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 177, 16), )

    
    busType = property(__busType.value, __busType.set, None, 'Reference to the busDefinition that this abstractionDefinition implements.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}extends uses Python identifier extends
    __extends = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extends'), 'extends', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009extends', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 182, 16), )

    
    extends = property(__extends.value, __extends.set, None, 'Optional name of abstraction type that this abstraction definition is compatible with. This abstraction definition may change the definitions of ports in the existing abstraction definition and add new ports, the ports in the original abstraction are not deleted but may be marked illegal to disallow their use.\n        This abstraction definition may only extend another abstraction definition if the bus type of this abstraction definition extends the bus type of the extended abstraction definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}ports uses Python identifier ports
    __ports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ports'), 'ports', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009ports', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 188, 16), )

    
    ports = property(__ports.value, __ports.set, None, 'This is a list of logical ports defined by the bus.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    _ElementMap.update({
        __busType.name() : __busType,
        __extends.name() : __extends,
        __ports.name() : __ports,
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """This is a list of logical ports defined by the bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 192, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'port'), 'port', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_2_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009port', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 194, 28), )

    
    port = property(__port.value, __port.set, None, None)

    _ElementMap.update({
        __port.name() : __port
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 195, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}logicalName uses Python identifier logicalName
    __logicalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), 'logicalName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009logicalName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 197, 40), )

    
    logicalName = property(__logicalName.value, __logicalName.set, None, 'The assigned name of this port in bus specifications.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wire uses Python identifier wire
    __wire = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wire'), 'wire', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009wire', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 208, 44), )

    
    wire = property(__wire.value, __wire.set, None, 'A port that carries logic or an array of logic values')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactional uses Python identifier transactional
    __transactional = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactional'), 'transactional', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009transactional', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 287, 44), )

    
    transactional = property(__transactional.value, __transactional.set, None, 'A port that carries complex information modeled at a high level of abstraction.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _ElementMap.update({
        __logicalName.name() : __logicalName,
        __wire.name() : __wire,
        __transactional.name() : __transactional,
        __vendorExtensions.name() : __vendorExtensions,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """A port that carries logic or an array of logic values"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 212, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}qualifier uses Python identifier qualifier
    __qualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'qualifier'), 'qualifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009qualifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 214, 56), )

    
    qualifier = property(__qualifier.value, __qualifier.set, None, 'The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onSystem uses Python identifier onSystem
    __onSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), 'onSystem', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onSystem', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 245, 56), )

    
    onSystem = property(__onSystem.value, __onSystem.set, None, 'Defines constraints for this port when present in a system bus interface with a matching group name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onMaster uses Python identifier onMaster
    __onMaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), 'onMaster', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onMaster', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 260, 56), )

    
    onMaster = property(__onMaster.value, __onMaster.set, None, 'Defines constraints for this port when present in a master bus interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onSlave uses Python identifier onSlave
    __onSlave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), 'onSlave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onSlave', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 268, 56), )

    
    onSlave = property(__onSlave.value, __onSlave.set, None, 'Defines constraints for this port when present in a slave bus interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), 'defaultValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009defaultValue', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 277, 60), )

    
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, 'Indicates the default value for this wire port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}requiresDriver uses Python identifier requiresDriver
    __requiresDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), 'requiresDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009requiresDriver', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 138, 2), )

    
    requiresDriver = property(__requiresDriver.value, __requiresDriver.set, None, 'Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected')

    _ElementMap.update({
        __qualifier.name() : __qualifier,
        __onSystem.name() : __onSystem,
        __onMaster.name() : __onMaster,
        __onSlave.name() : __onSlave,
        __defaultValue.name() : __defaultValue,
        __requiresDriver.name() : __requiresDriver
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 218, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isAddress uses Python identifier isAddress
    __isAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), 'isAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 221, 72), )

    
    isAddress = property(__isAddress.value, __isAddress.set, None, 'If this element is present, the port contains address information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isData uses Python identifier isData
    __isData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isData'), 'isData', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isData', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 226, 72), )

    
    isData = property(__isData.value, __isData.set, None, 'If this element is present, the port contains data information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isClock uses Python identifier isClock
    __isClock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isClock'), 'isClock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isClock', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 232, 68), )

    
    isClock = property(__isClock.value, __isClock.set, None, 'If this element is present, the port contains only clock information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isReset uses Python identifier isReset
    __isReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isReset'), 'isReset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isReset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 237, 68), )

    
    isReset = property(__isReset.value, __isReset.set, None, 'Is this element is present, the port contains only reset information.')

    _ElementMap.update({
        __isAddress.name() : __isAddress,
        __isData.name() : __isData,
        __isClock.name() : __isClock,
        __isReset.name() : __isReset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a system bus interface with a matching group name."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 249, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12), )

    
    width = property(__width.value, __width.set, None, 'Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009direction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), )

    
    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modeConstraints uses Python identifier modeConstraints
    __modeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), 'modeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16), )

    
    modeConstraints = property(__modeConstraints.value, __modeConstraints.set, None, "Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredModeConstraints uses Python identifier mirroredModeConstraints
    __mirroredModeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), 'mirroredModeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredModeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16), )

    
    mirroredModeConstraints = property(__mirroredModeConstraints.value, __mirroredModeConstraints.set, None, "Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 251, 68), )

    
    group = property(__group.value, __group.set, None, 'Used to group system ports into different groups within a common bus.')

    _ElementMap.update({
        __presence.name() : __presence,
        __width.name() : __width,
        __direction.name() : __direction,
        __modeConstraints.name() : __modeConstraints,
        __mirroredModeConstraints.name() : __mirroredModeConstraints,
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a master bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 264, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12), )

    
    width = property(__width.value, __width.set, None, 'Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009direction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), )

    
    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modeConstraints uses Python identifier modeConstraints
    __modeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), 'modeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16), )

    
    modeConstraints = property(__modeConstraints.value, __modeConstraints.set, None, "Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredModeConstraints uses Python identifier mirroredModeConstraints
    __mirroredModeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), 'mirroredModeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredModeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16), )

    
    mirroredModeConstraints = property(__mirroredModeConstraints.value, __mirroredModeConstraints.set, None, "Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ")

    _ElementMap.update({
        __presence.name() : __presence,
        __width.name() : __width,
        __direction.name() : __direction,
        __modeConstraints.name() : __modeConstraints,
        __mirroredModeConstraints.name() : __mirroredModeConstraints
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a slave bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 272, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12), )

    
    width = property(__width.value, __width.set, None, 'Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009direction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), )

    
    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modeConstraints uses Python identifier modeConstraints
    __modeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), 'modeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16), )

    
    modeConstraints = property(__modeConstraints.value, __modeConstraints.set, None, "Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredModeConstraints uses Python identifier mirroredModeConstraints
    __mirroredModeConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), 'mirroredModeConstraints', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredModeConstraints', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16), )

    
    mirroredModeConstraints = property(__mirroredModeConstraints.value, __mirroredModeConstraints.set, None, "Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ")

    _ElementMap.update({
        __presence.name() : __presence,
        __width.name() : __width,
        __direction.name() : __direction,
        __modeConstraints.name() : __modeConstraints,
        __mirroredModeConstraints.name() : __mirroredModeConstraints
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """A port that carries complex information modeled at a high level of abstraction."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 291, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}qualifier uses Python identifier qualifier
    __qualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'qualifier'), 'qualifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009qualifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 293, 56), )

    
    qualifier = property(__qualifier.value, __qualifier.set, None, 'The type of information this port carries A transactional port can carry both address and data information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onSystem uses Python identifier onSystem
    __onSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), 'onSystem', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onSystem', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 312, 56), )

    
    onSystem = property(__onSystem.value, __onSystem.set, None, 'Defines constraints for this port when present in a system bus interface with a matching group name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onMaster uses Python identifier onMaster
    __onMaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), 'onMaster', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onMaster', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 327, 56), )

    
    onMaster = property(__onMaster.value, __onMaster.set, None, 'Defines constraints for this port when present in a master bus interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}onSlave uses Python identifier onSlave
    __onSlave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), 'onSlave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009onSlave', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 335, 56), )

    
    onSlave = property(__onSlave.value, __onSlave.set, None, 'Defines constraints for this port when present in a slave bus interface.')

    _ElementMap.update({
        __qualifier.name() : __qualifier,
        __onSystem.name() : __onSystem,
        __onMaster.name() : __onMaster,
        __onSlave.name() : __onSlave
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """The type of information this port carries A transactional port can carry both address and data information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 297, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isAddress uses Python identifier isAddress
    __isAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), 'isAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_10_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 299, 68), )

    
    isAddress = property(__isAddress.value, __isAddress.set, None, 'If this element is present, the port contains address information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isData uses Python identifier isData
    __isData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isData'), 'isData', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_10_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isData', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 304, 68), )

    
    isData = property(__isData.value, __isData.set, None, 'If this element is present, the port contains data information.')

    _ElementMap.update({
        __isAddress.name() : __isAddress,
        __isData.name() : __isData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a system bus interface with a matching group name."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 316, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_11_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_11_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009service', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12), )

    
    service = property(__service.value, __service.set, None, 'The service that this transactional port can provide or requires.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_11_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 318, 68), )

    
    group = property(__group.value, __group.set, None, 'Used to group system ports into different groups within a common bus.')

    _ElementMap.update({
        __presence.name() : __presence,
        __service.name() : __service,
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a master bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 331, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_12_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_12_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009service', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12), )

    
    service = property(__service.value, __service.set, None, 'The service that this transactional port can provide or requires.')

    _ElementMap.update({
        __presence.name() : __presence,
        __service.name() : __service
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this port when present in a slave bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 339, 60)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}presence uses Python identifier presence
    __presence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'presence'), 'presence', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_13_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009presence', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), )

    
    presence = property(__presence.value, __presence.set, None, "If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_13_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009service', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12), )

    
    service = property(__service.value, __service.set, None, 'The service that this transactional port can provide or requires.')

    _ElementMap.update({
        __presence.name() : __presence,
        __service.name() : __service
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorType with content type ELEMENT_ONLY
class abstractorType (pyxb.binding.basis.complexTypeDefinition):
    """Abstractor-specific extension to abstractorType"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 70, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorMode uses Python identifier abstractorMode
    __abstractorMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorMode'), 'abstractorMode', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorMode', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 76, 12), )

    
    abstractorMode = property(__abstractorMode.value, __abstractorMode.set, None, 'Define the mode for the interfaces on this abstractor.\n\nFor master the first interface connects to the master, the second connects to the mirroredMaster\n\nFor slave the first interface connects to the mirroredSlave the second connects to the slave\n\nFor direct the first interface connects to the master, the second connects to the slave\n\nFor system the first interface connects to the system, the second connects to the mirroredSystem. For system the group attribute is required')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busType uses Python identifier busType
    __busType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busType'), 'busType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 100, 12), )

    
    busType = property(__busType.value, __busType.set, None, 'The bus type of both interfaces. Refers to bus definition using vendor, library, name, version attributes.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorInterfaces uses Python identifier abstractorInterfaces
    __abstractorInterfaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterfaces'), 'abstractorInterfaces', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorInterfaces', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 105, 12), )

    
    abstractorInterfaces = property(__abstractorInterfaces.value, __abstractorInterfaces.set, None, 'The interfaces supported by this abstractor')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'model'), 'model', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009model', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 119, 12), )

    
    model = property(__model.value, __model.set, None, 'Model information.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choices uses Python identifier choices
    __choices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choices'), 'choices', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choices', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4), )

    
    choices = property(__choices.value, __choices.set, None, 'Choices used by elements with an attribute spirit:choiceRef.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSets uses Python identifier fileSets
    __fileSets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), 'fileSets', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSets', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 409, 4), )

    
    fileSets = property(__fileSets.value, __fileSets.set, None, 'List of file sets associated with component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorGenerators uses Python identifier abstractorGenerators
    __abstractorGenerators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerators'), 'abstractorGenerators', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorGenerators', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 214, 2), )

    
    abstractorGenerators = property(__abstractorGenerators.value, __abstractorGenerators.set, None, 'List of abstractor generators.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    _ElementMap.update({
        __abstractorMode.name() : __abstractorMode,
        __busType.name() : __busType,
        __abstractorInterfaces.name() : __abstractorInterfaces,
        __model.name() : __model,
        __choices.name() : __choices,
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __fileSets.name() : __fileSets,
        __abstractorGenerators.name() : __abstractorGenerators,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorType = abstractorType
Namespace.addCategoryObject('typeBinding', 'abstractorType', abstractorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """The interfaces supported by this abstractor"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 109, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorInterface uses Python identifier abstractorInterface
    __abstractorInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterface'), 'abstractorInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_14_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorInterface', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 111, 24), )

    
    abstractorInterface = property(__abstractorInterface.value, __abstractorInterface.set, None, 'An abstractor must have exactly 2 Interfaces.')

    _ElementMap.update({
        __abstractorInterface.name() : __abstractorInterface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Choices used by elements with an attribute spirit:choiceRef."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 218, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choice uses Python identifier choice
    __choice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choice'), 'choice', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_15_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choice', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 220, 16), )

    
    choice = property(__choice.value, __choice.set, None, 'Non-empty set of legal values for a elements with an attribute spirit:choiceRef.')

    _ElementMap.update({
        __choice.name() : __choice
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Non-empty set of legal values for a elements with an attribute spirit:choiceRef."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 224, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_16_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 226, 28), )

    
    name = property(__name.value, __name.set, None, 'Choice key, available for reference by the spirit:choiceRef attribute.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}enumeration uses Python identifier enumeration
    __enumeration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enumeration'), 'enumeration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_16_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009enumeration', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 231, 28), )

    
    enumeration = property(__enumeration.value, __enumeration.set, None, 'One possible value of spirit:choice')

    _ElementMap.update({
        __name.name() : __name,
        __enumeration.name() : __enumeration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """One possible value of spirit:choice"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 235, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'text'), 'text', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_17_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009text', pyxb.binding.datatypes.string)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 238, 44)
    __text._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 238, 44)
    
    text = property(__text.value, __text.set, None, 'When specified, displayed in place of the spirit:enumeration value ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}help uses Python identifier help
    __help = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'help'), 'help', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_17_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009help', pyxb.binding.datatypes.string)
    __help._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 243, 44)
    __help._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 243, 44)
    
    help = property(__help.value, __help.set, None, 'Text that may be displayed if the user requests help about the meaning of an element')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __text.name() : __text,
        __help.name() : __help
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the structural information associated with a bus type, independent of the abstraction level."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 80, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}directConnection uses Python identifier directConnection
    __directConnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'directConnection'), 'directConnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009directConnection', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 83, 16), )

    
    directConnection = property(__directConnection.value, __directConnection.set, None, 'This element indicates that a master interface may be directly connected to a slave interface (under certain conditions) for busses of this type.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isAddressable uses Python identifier isAddressable
    __isAddressable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isAddressable'), 'isAddressable', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isAddressable', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 88, 16), )

    
    isAddressable = property(__isAddressable.value, __isAddressable.set, None, 'If true, indicates that this is an addressable bus.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}extends uses Python identifier extends
    __extends = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extends'), 'extends', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009extends', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 93, 16), )

    
    extends = property(__extends.value, __extends.set, None, 'Optional name of bus type that this bus definition is compatible with. This bus definition may change the definitions in the existing bus definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maxMasters uses Python identifier maxMasters
    __maxMasters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), 'maxMasters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maxMasters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 98, 16), )

    
    maxMasters = property(__maxMasters.value, __maxMasters.set, None, 'Indicates the maximum number of masters this bus supports.  If this element is not present, the number of masters allowed is unbounded. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maxSlaves uses Python identifier maxSlaves
    __maxSlaves = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), 'maxSlaves', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maxSlaves', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 103, 16), )

    
    maxSlaves = property(__maxSlaves.value, __maxSlaves.set, None, 'Indicates the maximum number of slaves this bus supports.  If the element is not present, the number of slaves allowed is unbounded.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}systemGroupNames uses Python identifier systemGroupNames
    __systemGroupNames = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'systemGroupNames'), 'systemGroupNames', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009systemGroupNames', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 108, 16), )

    
    systemGroupNames = property(__systemGroupNames.value, __systemGroupNames.set, None, 'Indicates the list of system group names that are defined for this bus definition.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_18_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    _ElementMap.update({
        __directConnection.name() : __directConnection,
        __isAddressable.name() : __isAddressable,
        __extends.name() : __extends,
        __maxMasters.name() : __maxMasters,
        __maxSlaves.name() : __maxSlaves,
        __systemGroupNames.name() : __systemGroupNames,
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates the list of system group names that are defined for this bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 112, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}systemGroupName uses Python identifier systemGroupName
    __systemGroupName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'systemGroupName'), 'systemGroupName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_19_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009systemGroupName', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 114, 28), )

    
    systemGroupName = property(__systemGroupName.value, __systemGroupName.set, None, 'Indicates the name of a system group defined for this bus definition.')

    _ElementMap.update({
        __systemGroupName.name() : __systemGroupName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """A list of bus interfaces supported by this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 100, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busInterface uses Python identifier busInterface
    __busInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), 'busInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_20_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busInterface', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 91, 4), )

    
    busInterface = property(__busInterface.value, __busInterface.set, None, 'Describes one of the bus interfaces supported by this component.')

    _ElementMap.update({
        __busInterface.name() : __busInterface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busInterfaceType with content type ELEMENT_ONLY
class busInterfaceType (pyxb.binding.basis.complexTypeDefinition):
    """Type definition for a busInterface in a component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'busInterfaceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 106, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitsInLau uses Python identifier bitsInLau
    __bitsInLau = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), 'bitsInLau', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitsInLau', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 86, 4), )

    
    bitsInLau = property(__bitsInLau.value, __bitsInLau.set, None, 'The number of bits in the least addressable unit. The default is byte addressable (8 bits).')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busType uses Python identifier busType
    __busType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busType'), 'busType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 112, 12), )

    
    busType = property(__busType.value, __busType.set, None, 'The bus type of this interface. Refers to bus definition using vendor, library, name, version attributes.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractionType uses Python identifier abstractionType
    __abstractionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractionType'), 'abstractionType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractionType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 117, 12), )

    
    abstractionType = property(__abstractionType.value, __abstractionType.set, None, 'The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}connectionRequired uses Python identifier connectionRequired
    __connectionRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'connectionRequired'), 'connectionRequired', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009connectionRequired', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 127, 12), )

    
    connectionRequired = property(__connectionRequired.value, __connectionRequired.set, None, 'Indicates whether a connection to this interface is required for proper component functionality.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portMaps uses Python identifier portMaps
    __portMaps = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portMaps'), 'portMaps', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portMaps', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 132, 12), )

    
    portMaps = property(__portMaps.value, __portMaps.set, None, 'Listing of maps between component ports and bus ports.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitSteering uses Python identifier bitSteering
    __bitSteering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitSteering'), 'bitSteering', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitSteering', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 220, 12), )

    
    bitSteering = property(__bitSteering.value, __bitSteering.set, None, 'Indicates whether bit steering should be used to map this interface onto a bus of different data width.\n\nValues are "on", "off" (defaults to "off").')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}endianness uses Python identifier endianness
    __endianness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endianness'), 'endianness', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009endianness', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 234, 12), )

    
    endianness = property(__endianness.value, __endianness.set, None, "'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}master uses Python identifier master
    __master = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'master'), 'master', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009master', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 331, 12), )

    
    master = property(__master.value, __master.set, None, 'If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}slave uses Python identifier slave
    __slave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'slave'), 'slave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009slave', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 369, 12), )

    
    slave = property(__slave.value, __slave.set, None, 'If this element is present, the bus interface can serve as a slave.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}system uses Python identifier system
    __system = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'system'), 'system', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009system', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 415, 12), )

    
    system = property(__system.value, __system.set, None, 'If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredSlave uses Python identifier mirroredSlave
    __mirroredSlave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave'), 'mirroredSlave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredSlave', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 425, 12), )

    
    mirroredSlave = property(__mirroredSlave.value, __mirroredSlave.set, None, 'If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on ports are reversed relative to the specification in the bus definition.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredMaster uses Python identifier mirroredMaster
    __mirroredMaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster'), 'mirroredMaster', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredMaster', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 473, 12), )

    
    mirroredMaster = property(__mirroredMaster.value, __mirroredMaster.set, None, 'If this element is present, the bus interface represents a mirrored master interface. All directional constraints on ports are reversed relative to the specification in the bus definition.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mirroredSystem uses Python identifier mirroredSystem
    __mirroredSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem'), 'mirroredSystem', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mirroredSystem', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 479, 12), )

    
    mirroredSystem = property(__mirroredSystem.value, __mirroredSystem.set, None, 'If this element is present, the bus interface represents a mirrored system interface. All directional constraints on ports are reversed relative to the specification in the bus definition.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}monitor uses Python identifier monitor
    __monitor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monitor'), 'monitor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009monitor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 489, 12), )

    
    monitor = property(__monitor.value, __monitor.set, None, 'Indicates that this is a (passive) monitor interface. All of the ports in the interface must be inputs. The type of interface to be monitored is specified with the required interfaceType attribute. The spirit:group element must be specified if monitoring a system interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        __bitsInLau.name() : __bitsInLau,
        __busType.name() : __busType,
        __abstractionType.name() : __abstractionType,
        __connectionRequired.name() : __connectionRequired,
        __portMaps.name() : __portMaps,
        __bitSteering.name() : __bitSteering,
        __endianness.name() : __endianness,
        __master.name() : __master,
        __slave.name() : __slave,
        __system.name() : __system,
        __mirroredSlave.name() : __mirroredSlave,
        __mirroredMaster.name() : __mirroredMaster,
        __mirroredSystem.name() : __mirroredSystem,
        __monitor.name() : __monitor,
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.busInterfaceType = busInterfaceType
Namespace.addCategoryObject('typeBinding', 'busInterfaceType', busInterfaceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Listing of maps between component ports and bus ports."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 136, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portMap uses Python identifier portMap
    __portMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portMap'), 'portMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_21_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 138, 24), )

    
    portMap = property(__portMap.value, __portMap.set, None, "Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.")

    _ElementMap.update({
        __portMap.name() : __portMap
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 142, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}logicalPort uses Python identifier logicalPort
    __logicalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalPort'), 'logicalPort', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_22_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009logicalPort', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 144, 36), )

    
    logicalPort = property(__logicalPort.value, __logicalPort.set, None, 'Logical port from abstraction definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}physicalPort uses Python identifier physicalPort
    __physicalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'physicalPort'), 'physicalPort', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_22_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009physicalPort', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 191, 36), )

    
    physicalPort = property(__physicalPort.value, __physicalPort.set, None, 'Physical port from this component')

    _ElementMap.update({
        __logicalPort.name() : __logicalPort,
        __physicalPort.name() : __physicalPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Logical port from abstraction definition"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 148, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_23_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 150, 48), )

    
    name = property(__name.value, __name.set, None, 'Bus port name as specified inside the abstraction definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_23_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 155, 48), )

    
    vector = property(__vector.value, __vector.set, None, 'Definition of the logical indecies for a vectored port.')

    _ElementMap.update({
        __name.name() : __name,
        __vector.name() : __vector
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of the logical indecies for a vectored port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 159, 52)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_24_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 161, 60), )

    
    left = property(__left.value, __left.set, None, 'Defines which logical bit maps to the physical left bit below')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_24_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 173, 60), )

    
    right = property(__right.value, __right.set, None, 'Defines which logical bit maps to the physical right bit below')

    _ElementMap.update({
        __left.name() : __left,
        __right.name() : __right
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Physical port from this component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 195, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_25_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 197, 48), )

    
    name = property(__name.value, __name.set, None, 'Component port name as specified inside the model port section')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_25_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4), )

    
    vector = property(__vector.value, __vector.set, None, 'Definition of the indecies for a vectored port.')

    _ElementMap.update({
        __name.name() : __name,
        __vector.name() : __vector
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Lists all channel connections between mirror interfaces of this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 253, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}channel uses Python identifier channel
    __channel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channel'), 'channel', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_26_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009channel', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 255, 16), )

    
    channel = property(__channel.value, __channel.set, None, 'Defines a set of mirrored interfaces of this component that are connected to one another.')

    _ElementMap.update({
        __channel.name() : __channel
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a set of mirrored interfaces of this component that are connected to one another."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 259, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busInterfaceRef uses Python identifier busInterfaceRef
    __busInterfaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef'), 'busInterfaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_27_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busInterfaceRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 262, 28), )

    
    busInterfaceRef = property(__busInterfaceRef.value, __busInterfaceRef.set, None, 'Contains the name of one of the bus interfaces that is part of this channel. The ordering of the references may be important to the design environment.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_27_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_27_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_27_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _ElementMap.update({
        __busInterfaceRef.name() : __busInterfaceRef,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a list of remap state names and associated port values"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 281, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}remapState uses Python identifier remapState
    __remapState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapState'), 'remapState', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_28_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009remapState', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 283, 16), )

    
    remapState = property(__remapState.value, __remapState.set, None, 'Contains a list of ports and values in remapPort and a list of registers and values that when all evaluate to true which tell the decoder to enter this remap state. The name attribute identifies the name of the state. If a list of remapPorts and/or remapRegisters is not defined then the condition for that state cannot be defined.')

    _ElementMap.update({
        __remapState.name() : __remapState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a list of ports and values in remapPort and a list of registers and values that when all evaluate to true which tell the decoder to enter this remap state. The name attribute identifies the name of the state. If a list of remapPorts and/or remapRegisters is not defined then the condition for that state cannot be defined."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 287, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}remapPorts uses Python identifier remapPorts
    __remapPorts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapPorts'), 'remapPorts', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_29_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009remapPorts', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 290, 28), )

    
    remapPorts = property(__remapPorts.value, __remapPorts.set, None, 'List of ports and their values that shall invoke this remap state.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_29_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_29_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_29_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _ElementMap.update({
        __remapPorts.name() : __remapPorts,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """List of ports and their values that shall invoke this remap state."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 294, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}remapPort uses Python identifier remapPort
    __remapPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapPort'), 'remapPort', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_30_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009remapPort', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 296, 40), )

    
    remapPort = property(__remapPort.value, __remapPort.set, None, 'Contains the name and value of a port on the component, the value indicates the logic value which this port must take to effect the remapping. The portMapRef attribute stores the name of the port which takes that value.')

    _ElementMap.update({
        __remapPort.name() : __remapPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 335, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_31_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressSpaceRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 337, 24), )

    
    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'If this master connects to an addressable bus, this element references the address space it maps to.')

    _ElementMap.update({
        __addressSpaceRef.name() : __addressSpaceRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a slave."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 373, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bridge uses Python identifier bridge
    __bridge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bridge'), 'bridge', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bridge', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 376, 24), )

    
    bridge = property(__bridge.value, __bridge.set, None, 'If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.\n\nAny slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRefGroup uses Python identifier fileSetRefGroup
    __fileSetRefGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), 'fileSetRefGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRefGroup', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 395, 24), )

    
    fileSetRefGroup = property(__fileSetRefGroup.value, __fileSetRefGroup.set, None, 'This reference is used to point the filesets that are associated with this slave port.\n\nDepending on the slave port function, there may be completely different software drivers associated with the different ports. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMapRef uses Python identifier memoryMapRef
    __memoryMapRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), 'memoryMapRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009memoryMapRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 418, 4), )

    
    memoryMapRef = property(__memoryMapRef.value, __memoryMapRef.set, None, 'References the memory map. The name of the memory map is kept in its memoryMapRef attribute.')

    _ElementMap.update({
        __bridge.name() : __bridge,
        __fileSetRefGroup.name() : __fileSetRefGroup,
        __memoryMapRef.name() : __memoryMapRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.

Any slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 382, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 383, 32)
    __masterRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 383, 32)
    
    masterRef = property(__masterRef.value, __masterRef.set, None, 'The name of the master bus interface to which this interface bridges.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}opaque uses Python identifier opaque
    __opaque = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'opaque'), 'opaque', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009opaque', pyxb.binding.datatypes.boolean, required=True)
    __opaque._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 388, 32)
    __opaque._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 388, 32)
    
    opaque = property(__opaque.value, __opaque.set, None, 'If true, then this bridge is opaque; the whole of the address range is mappeed by the bridge and there are no gaps.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef,
        __opaque.name() : __opaque
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """This reference is used to point the filesets that are associated with this slave port.

Depending on the slave port function, there may be completely different software drivers associated with the different ports. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 401, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_34_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 403, 36), )

    
    group = property(__group.value, __group.set, None, 'Abritray name assigned to the collections of fileSets.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_34_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4), )

    
    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    _ElementMap.update({
        __group.name() : __group,
        __fileSetRef.name() : __fileSetRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 419, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_35_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4), )

    
    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 429, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}baseAddresses uses Python identifier baseAddresses
    __baseAddresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses'), 'baseAddresses', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009baseAddresses', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 431, 24), )

    
    baseAddresses = property(__baseAddresses.value, __baseAddresses.set, None, 'Represents a set of remap base addresses.')

    _ElementMap.update({
        __baseAddresses.name() : __baseAddresses
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Represents a set of remap base addresses."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 435, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}remapAddress uses Python identifier remapAddress
    __remapAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapAddress'), 'remapAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009remapAddress', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 437, 36), )

    
    remapAddress = property(__remapAddress.value, __remapAddress.set, None, 'Base of an address block, expressed as the number of bitsInLAU from the containing busInterface. The state attribute indicates the name of the remap state for which this address is valid.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 455, 36), )

    
    range = property(__range.value, __range.set, None, 'The address range of mirrored slave, expressed as the number of bitsInLAU from the containing busInterface. ')

    _ElementMap.update({
        __remapAddress.name() : __remapAddress,
        __range.name() : __range
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored master interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 477, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored system interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 483, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4), )

    
    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 526, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a slave."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 532, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 538, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4), )

    
    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 548, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored master interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 554, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored system interface. All directional constraints on ports are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 560, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_45_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4), )

    
    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorBusInterfaceType with content type ELEMENT_ONLY
class abstractorBusInterfaceType (pyxb.binding.basis.complexTypeDefinition):
    """Type definition for a busInterface in a component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorBusInterfaceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 568, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractionType uses Python identifier abstractionType
    __abstractionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractionType'), 'abstractionType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractionType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 574, 12), )

    
    abstractionType = property(__abstractionType.value, __abstractionType.set, None, 'The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portMaps uses Python identifier portMaps
    __portMaps = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portMaps'), 'portMaps', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portMaps', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 579, 12), )

    
    portMaps = property(__portMaps.value, __portMaps.set, None, 'Listing of maps between logical ports and physical ports.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorBusInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        __abstractionType.name() : __abstractionType,
        __portMaps.name() : __portMaps,
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorBusInterfaceType = abstractorBusInterfaceType
Namespace.addCategoryObject('typeBinding', 'abstractorBusInterfaceType', abstractorBusInterfaceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Listing of maps between logical ports and physical ports."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 583, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portMap uses Python identifier portMap
    __portMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portMap'), 'portMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_46_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 585, 24), )

    
    portMap = property(__portMap.value, __portMap.set, None, "Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.")

    _ElementMap.update({
        __portMap.name() : __portMap
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 589, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}logicalPort uses Python identifier logicalPort
    __logicalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalPort'), 'logicalPort', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009logicalPort', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 591, 36), )

    
    logicalPort = property(__logicalPort.value, __logicalPort.set, None, 'Logical port from abstraction definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}physicalPort uses Python identifier physicalPort
    __physicalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'physicalPort'), 'physicalPort', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009physicalPort', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 638, 36), )

    
    physicalPort = property(__physicalPort.value, __physicalPort.set, None, 'Physical port from this component')

    _ElementMap.update({
        __logicalPort.name() : __logicalPort,
        __physicalPort.name() : __physicalPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Logical port from abstraction definition"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 595, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_48_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 597, 48), )

    
    name = property(__name.value, __name.set, None, 'Bus port name as specified inside the abstraction definition')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_48_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 602, 48), )

    
    vector = property(__vector.value, __vector.set, None, 'Definition of the logical indecies for a vectored port.')

    _ElementMap.update({
        __name.name() : __name,
        __vector.name() : __vector
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of the logical indecies for a vectored port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 606, 52)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 608, 60), )

    
    left = property(__left.value, __left.set, None, 'Defines which logical bit maps to the physical left bit below')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 620, 60), )

    
    right = property(__right.value, __right.set, None, 'Defines which logical bit maps to the physical right bit below')

    _ElementMap.update({
        __left.name() : __left,
        __right.name() : __right
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Physical port from this component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 642, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_50_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 644, 48), )

    
    name = property(__name.value, __name.set, None, 'Component port name as specified inside the model port section')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_50_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4), )

    
    vector = property(__vector.value, __vector.set, None, 'Definition of the indecies for a vectored port.')

    _ElementMap.update({
        __name.name() : __name,
        __vector.name() : __vector
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """A collection of parameters."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 99, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameter', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 90, 4), )

    
    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.')

    _ElementMap.update({
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Container for vendor specific extensions."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 109, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType with content type ELEMENT_ONLY
class nameValuePairType (pyxb.binding.basis.complexTypeDefinition):
    """Name and value type for use in resolvable elements"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameValuePairType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 175, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009value', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 181, 12), )

    
    value_ = property(__value.value, __value.set, None, 'The value of the parameter.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 202, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __value.name() : __value,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.nameValuePairType = nameValuePairType
Namespace.addCategoryObject('typeBinding', 'nameValuePairType', nameValuePairType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentType with content type ELEMENT_ONLY
class componentType (pyxb.binding.basis.complexTypeDefinition):
    """Component-specific extension to componentType"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'componentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 70, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choices uses Python identifier choices
    __choices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choices'), 'choices', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choices', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4), )

    
    choices = property(__choices.value, __choices.set, None, 'Choices used by elements with an attribute spirit:choiceRef.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busInterfaces uses Python identifier busInterfaces
    __busInterfaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), 'busInterfaces', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busInterfaces', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 96, 4), )

    
    busInterfaces = property(__busInterfaces.value, __busInterfaces.set, None, 'A list of bus interfaces supported by this component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}channels uses Python identifier channels
    __channels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channels'), 'channels', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009channels', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 249, 4), )

    
    channels = property(__channels.value, __channels.set, None, 'Lists all channel connections between mirror interfaces of this component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}remapStates uses Python identifier remapStates
    __remapStates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), 'remapStates', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009remapStates', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 277, 4), )

    
    remapStates = property(__remapStates.value, __remapStates.set, None, 'Contains a list of remap state names and associated port values')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElements uses Python identifier whiteboxElements
    __whiteboxElements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElements'), 'whiteboxElements', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxElements', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 89, 12), )

    
    whiteboxElements = property(__whiteboxElements.value, __whiteboxElements.set, None, 'A list of whiteboxElements')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cpus uses Python identifier cpus
    __cpus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cpus'), 'cpus', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cpus', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 103, 12), )

    
    cpus = property(__cpus.value, __cpus.set, None, "cpu's in the component")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}otherClockDrivers uses Python identifier otherClockDrivers
    __otherClockDrivers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'otherClockDrivers'), 'otherClockDrivers', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009otherClockDrivers', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 137, 12), )

    
    otherClockDrivers = property(__otherClockDrivers.value, __otherClockDrivers.set, None, 'Defines a set of clock drivers that are not directly associated with an input port of the component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSets uses Python identifier fileSets
    __fileSets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), 'fileSets', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSets', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 409, 4), )

    
    fileSets = property(__fileSets.value, __fileSets.set, None, 'List of file sets associated with component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentGenerators uses Python identifier componentGenerators
    __componentGenerators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), 'componentGenerators', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentGenerators', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 204, 2), )

    
    componentGenerators = property(__componentGenerators.value, __componentGenerators.set, None, 'List of component generators.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpaces uses Python identifier addressSpaces
    __addressSpaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), 'addressSpaces', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressSpaces', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 332, 4), )

    
    addressSpaces = property(__addressSpaces.value, __addressSpaces.set, None, 'If this component is a bus master, this lists all the address spaces\ndefined by the component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMaps uses Python identifier memoryMaps
    __memoryMaps = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), 'memoryMaps', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009memoryMaps', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 423, 4), )

    
    memoryMaps = property(__memoryMaps.value, __memoryMaps.set, None, 'Lists all the slave memory maps defined by the component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'model'), 'model', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009model', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 277, 4), )

    
    model = property(__model.value, __model.set, None, 'Model information.')

    _ElementMap.update({
        __choices.name() : __choices,
        __busInterfaces.name() : __busInterfaces,
        __channels.name() : __channels,
        __remapStates.name() : __remapStates,
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __whiteboxElements.name() : __whiteboxElements,
        __cpus.name() : __cpus,
        __otherClockDrivers.name() : __otherClockDrivers,
        __fileSets.name() : __fileSets,
        __componentGenerators.name() : __componentGenerators,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version,
        __addressSpaces.name() : __addressSpaces,
        __memoryMaps.name() : __memoryMaps,
        __model.name() : __model
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.componentType = componentType
Namespace.addCategoryObject('typeBinding', 'componentType', componentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """A list of whiteboxElements"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 93, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElement uses Python identifier whiteboxElement
    __whiteboxElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElement'), 'whiteboxElement', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_53_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxElement', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 95, 24), )

    
    whiteboxElement = property(__whiteboxElement.value, __whiteboxElement.set, None, 'A whiteboxElement is a useful way to identify elements of a component that can not be identified through other means such as internal signals and non-software accessible registers.')

    _ElementMap.update({
        __whiteboxElement.name() : __whiteboxElement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """cpu's in the component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 107, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cpu uses Python identifier cpu
    __cpu = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cpu'), 'cpu', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_54_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cpu', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 109, 24), )

    
    cpu = property(__cpu.value, __cpu.set, None, 'Describes a processor in this component.')

    _ElementMap.update({
        __cpu.name() : __cpu
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a processor in this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 113, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressSpaceRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 327, 4), )

    
    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'References the address space.  The name of the address space is kept in its addressSpaceRef attribute.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __addressSpaceRef.name() : __addressSpaceRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElementType with content type ELEMENT_ONLY
class whiteboxElementType (pyxb.binding.basis.complexTypeDefinition):
    """Defines a white box reference point within the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 252, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxType uses Python identifier whiteboxType
    __whiteboxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxType'), 'whiteboxType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 258, 12), )

    
    whiteboxType = property(__whiteboxType.value, __whiteboxType.set, None, 'Indicates the type of the element. The pin and signal types refer to elements within the HDL description. The register type refers to a register in the memory map. The interface type refers to a group of signals addressed as a single unit.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driveable uses Python identifier driveable
    __driveable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'driveable'), 'driveable', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009driveable', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 271, 12), )

    
    driveable = property(__driveable.value, __driveable.set, None, 'If true, indicates that the white box element can be driven (e.g. have a new value forced into it).')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerRef uses Python identifier registerRef
    __registerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registerRef'), 'registerRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009registerRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 276, 12), )

    
    registerRef = property(__registerRef.value, __registerRef.set, None, "Indicates the name of the register associated with this white box element. The name should be a full hierarchical path from the memory map to the register, using '/' as a hierarchy separator.  When specified, the whiteboxType must be 'register'.")

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __whiteboxType.name() : __whiteboxType,
        __driveable.name() : __driveable,
        __registerRef.name() : __registerRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.whiteboxElementType = whiteboxElementType
Namespace.addCategoryObject('typeBinding', 'whiteboxElementType', whiteboxElementType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}otherClocks with content type ELEMENT_ONLY
class otherClocks (pyxb.binding.basis.complexTypeDefinition):
    """List of clocks associated with the component that are not associated with ports. Set the clockSource attribute on the clockDriver to indicate the source of a clock not associated with a particular component port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'otherClocks')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 134, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}otherClockDriver uses Python identifier otherClockDriver
    __otherClockDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'otherClockDriver'), 'otherClockDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_otherClocks_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009otherClockDriver', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 231, 2), )

    
    otherClockDriver = property(__otherClockDriver.value, __otherClockDriver.set, None, 'Describes a clock not directly associated with an input port. The clockSource attribute can be used on these clocks to indicate the actual clock source (e.g. an output port of a clock generator cell).')

    _ElementMap.update({
        __otherClockDriver.name() : __otherClockDriver
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.otherClocks = otherClocks
Namespace.addCategoryObject('typeBinding', 'otherClocks', otherClocks)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Used to provide a generic description of a technology library cell."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 166, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellFunction uses Python identifier cellFunction
    __cellFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cellFunction'), 'cellFunction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellFunction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 168, 16), )

    
    cellFunction = property(__cellFunction.value, __cellFunction.set, None, 'Defines a technology library cell in library independent fashion, based on specification of a cell function and strength.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellClass uses Python identifier cellClass
    __cellClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cellClass'), 'cellClass', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellClass', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 180, 16), )

    
    cellClass = property(__cellClass.value, __cellClass.set, None, 'Defines a technology library cell in library independent fashion, based on specification of a cell class and strength.')

    _ElementMap.update({
        __cellFunction.name() : __cellFunction,
        __cellClass.name() : __cellClass
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 217, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellSpecification uses Python identifier cellSpecification
    __cellSpecification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification'), 'cellSpecification', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_57_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellSpecification', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 162, 4), )

    
    cellSpecification = property(__cellSpecification.value, __cellSpecification.set, None, 'Used to provide a generic description of a technology library cell.')

    _ElementMap.update({
        __cellSpecification.name() : __cellSpecification
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a constraint indicating the type of load on an output port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 227, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellSpecification uses Python identifier cellSpecification
    __cellSpecification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification'), 'cellSpecification', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_58_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellSpecification', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 162, 4), )

    
    cellSpecification = property(__cellSpecification.value, __cellSpecification.set, None, 'Used to provide a generic description of a technology library cell.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}count uses Python identifier count
    __count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'count'), 'count', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_58_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009count', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 230, 16), )

    
    count = property(__count.value, __count.set, None, 'Indicates how many loads of the specified cell are connected. If not present, 3 is assumed.')

    _ElementMap.update({
        __cellSpecification.name() : __cellSpecification,
        __count.name() : __count
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints that apply to a component port. If multiple constraintSet elements are used, each must have a unique value for the constraintSetId attribute."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 242, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}timingConstraint uses Python identifier timingConstraint
    __timingConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint'), 'timingConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009timingConstraint', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 195, 4), )

    
    timingConstraint = property(__timingConstraint.value, __timingConstraint.set, None, 'Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driveConstraint uses Python identifier driveConstraint
    __driveConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint'), 'driveConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009driveConstraint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 213, 4), )

    
    driveConstraint = property(__driveConstraint.value, __driveConstraint.set, None, 'Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}loadConstraint uses Python identifier loadConstraint
    __loadConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint'), 'loadConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009loadConstraint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 223, 4), )

    
    loadConstraint = property(__loadConstraint.value, __loadConstraint.set, None, 'Defines a constraint indicating the type of load on an output port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 245, 16), )

    
    vector = property(__vector.value, __vector.set, None, 'The optional element vector specify the bits of a vector for which the constraints apply. The vaules of left and right must be within the range of the port. If the vector is not specified then the constraints apply to all the bits of the port.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constraintSetId uses Python identifier constraintSetId
    __constraintSetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'constraintSetId'), 'constraintSetId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constraintSetId', pyxb.binding.datatypes.NMTOKEN, unicode_default='default')
    __constraintSetId._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 157, 4)
    __constraintSetId._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 278, 12)
    
    constraintSetId = property(__constraintSetId.value, __constraintSetId.set, None, 'Indicates a name for this set of constraints. Constraints are tied to a view using this name in the constraintSetRef element.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __timingConstraint.name() : __timingConstraint,
        __driveConstraint.name() : __driveConstraint,
        __loadConstraint.name() : __loadConstraint,
        __vector.name() : __vector
    })
    _AttributeMap.update({
        __constraintSetId.name() : __constraintSetId
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """The optional element vector specify the bits of a vector for which the constraints apply. The vaules of left and right must be within the range of the port. If the vector is not specified then the constraints apply to all the bits of the port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 249, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 251, 28), )

    
    left = property(__left.value, __left.set, None, 'The optional elements left and right can be used to select a bit-slice of a vector. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 261, 28), )

    
    right = property(__right.value, __right.set, None, 'The optional elements left and right can be used to select a bit-slice of a vector. ')

    _ElementMap.update({
        __left.name() : __left,
        __right.name() : __right
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """The optional elements left and right can be used to select a bit-slice of a vector. """
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 255, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """The optional elements left and right can be used to select a bit-slice of a vector. """
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 265, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """List of constraintSet elements for a component port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 285, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constraintSet uses Python identifier constraintSet
    __constraintSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'constraintSet'), 'constraintSet', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_63_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constraintSet', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 238, 4), )

    
    constraintSet = property(__constraintSet.value, __constraintSet.set, None, 'Defines constraints that apply to a component port. If multiple constraintSet elements are used, each must have a unique value for the constraintSetId attribute.')

    _ElementMap.update({
        __constraintSet.name() : __constraintSet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractionDefPortConstraintsType with content type ELEMENT_ONLY
class abstractionDefPortConstraintsType (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints that apply to a wire type port in an abstraction definition. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractionDefPortConstraintsType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 296, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}timingConstraint uses Python identifier timingConstraint
    __timingConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint'), 'timingConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractionDefPortConstraintsType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009timingConstraint', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 195, 4), )

    
    timingConstraint = property(__timingConstraint.value, __timingConstraint.set, None, 'Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driveConstraint uses Python identifier driveConstraint
    __driveConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint'), 'driveConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractionDefPortConstraintsType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009driveConstraint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 213, 4), )

    
    driveConstraint = property(__driveConstraint.value, __driveConstraint.set, None, 'Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}loadConstraint uses Python identifier loadConstraint
    __loadConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint'), 'loadConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractionDefPortConstraintsType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009loadConstraint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 223, 4), )

    
    loadConstraint = property(__loadConstraint.value, __loadConstraint.set, None, 'Defines a constraint indicating the type of load on an output port.')

    _ElementMap.update({
        __timingConstraint.name() : __timingConstraint,
        __driveConstraint.name() : __driveConstraint,
        __loadConstraint.name() : __loadConstraint
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractionDefPortConstraintsType = abstractionDefPortConstraintsType
Namespace.addCategoryObject('typeBinding', 'abstractionDefPortConstraintsType', abstractionDefPortConstraintsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Root element for a platform design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 71, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hierConnections uses Python identifier hierConnections
    __hierConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hierConnections'), 'hierConnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009hierConnections', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 77, 16), )

    
    hierConnections = property(__hierConnections.value, __hierConnections.set, None, 'A list of hierarchy connections between bus interfaces on component instances and the bus interfaces on the encompassing component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentInstances uses Python identifier componentInstances
    __componentInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), 'componentInstances', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentInstances', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 121, 4), )

    
    componentInstances = property(__componentInstances.value, __componentInstances.set, None, 'Sub instances of internal components.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}adHocConnections uses Python identifier adHocConnections
    __adHocConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), 'adHocConnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009adHocConnections', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 195, 4), )

    
    adHocConnections = property(__adHocConnections.value, __adHocConnections.set, None, 'Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interconnections uses Python identifier interconnections
    __interconnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), 'interconnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interconnections', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 222, 4), )

    
    interconnections = property(__interconnections.value, __interconnections.set, None, 'Connections between internal sub components.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __hierConnections.name() : __hierConnections,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version,
        __componentInstances.name() : __componentInstances,
        __adHocConnections.name() : __adHocConnections,
        __interconnections.name() : __interconnections
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """A list of hierarchy connections between bus interfaces on component instances and the bus interfaces on the encompassing component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 81, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hierConnection uses Python identifier hierConnection
    __hierConnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hierConnection'), 'hierConnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_65_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009hierConnection', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 83, 28), )

    
    hierConnection = property(__hierConnection.value, __hierConnection.set, None, 'Represents a hierarchy connection')

    _ElementMap.update({
        __hierConnection.name() : __hierConnection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Represents a hierarchy connection"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 87, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface uses Python identifier interface
    __interface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interface'), 'interface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interface', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 89, 40), )

    
    interface = property(__interface.value, __interface.set, None, 'Component and bus reference to export to the upper level component.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name (active or monitor) of the hierachical connection.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interfaceRef uses Python identifier interfaceRef
    __interfaceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'interfaceRef'), 'interfaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interfaceRef', pyxb.binding.datatypes.Name, required=True)
    __interfaceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 98, 36)
    __interfaceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 98, 36)
    
    interfaceRef = property(__interfaceRef.value, __interfaceRef.set, None, 'This is the name of the bus interface on the upper level component.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __interface.name() : __interface
    })
    _AttributeMap.update({
        __interfaceRef.name() : __interfaceRef
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Top level element for describing the current configuration of a design. Does not describe instance parameterization"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 71, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}designRef uses Python identifier designRef
    __designRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'designRef'), 'designRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009designRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 74, 8), )

    
    designRef = property(__designRef.value, __designRef.set, None, 'The design to which this configuration applies')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorChainConfiguration uses Python identifier generatorChainConfiguration
    __generatorChainConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorChainConfiguration'), 'generatorChainConfiguration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorChainConfiguration', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 79, 8), )

    
    generatorChainConfiguration = property(__generatorChainConfiguration.value, __generatorChainConfiguration.set, None, 'Contains the configurable information associated with a generatorChain and its generators. Note that configurable information for generators associated with components is stored in the design file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interconnectionConfiguration uses Python identifier interconnectionConfiguration
    __interconnectionConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnectionConfiguration'), 'interconnectionConfiguration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interconnectionConfiguration', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 94, 8), )

    
    interconnectionConfiguration = property(__interconnectionConfiguration.value, __interconnectionConfiguration.set, None, 'Contains the information about the abstractors required to cross between two interfaces at with different abstractionDefs.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}viewConfiguration uses Python identifier viewConfiguration
    __viewConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewConfiguration'), 'viewConfiguration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009viewConfiguration', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 144, 8), )

    
    viewConfiguration = property(__viewConfiguration.value, __viewConfiguration.set, None, 'Contains the active view for each instance in the design')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __description.name() : __description,
        __designRef.name() : __designRef,
        __generatorChainConfiguration.name() : __generatorChainConfiguration,
        __interconnectionConfiguration.name() : __interconnectionConfiguration,
        __viewConfiguration.name() : __viewConfiguration,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Contains the configurable information associated with a generatorChain and its generators. Note that configurable information for generators associated with components is stored in the design file."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 83, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorChainRef uses Python identifier generatorChainRef
    __generatorChainRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef'), 'generatorChainRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorChainRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 85, 14), )

    
    generatorChainRef = property(__generatorChainRef.value, __generatorChainRef.set, None, 'References a generatorChain.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configurableElementValues uses Python identifier configurableElementValues
    __configurableElementValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), 'configurableElementValues', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configurableElementValues', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4), )

    
    configurableElementValues = property(__configurableElementValues.value, __configurableElementValues.set, None, 'All configuration information for a contained component, generator, generator chain or abstractor instance.')

    _ElementMap.update({
        __generatorChainRef.name() : __generatorChainRef,
        __configurableElementValues.name() : __configurableElementValues
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Contains the information about the abstractors required to cross between two interfaces at with different abstractionDefs."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 98, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interconnectionRef uses Python identifier interconnectionRef
    __interconnectionRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnectionRef'), 'interconnectionRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_69_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interconnectionRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 100, 14), )

    
    interconnectionRef = property(__interconnectionRef.value, __interconnectionRef.set, None, 'Reference to the interconnection name, monitor interconnection name or possibly a hierConnection interfaceName in a design file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractors uses Python identifier abstractors
    __abstractors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractors'), 'abstractors', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_69_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractors', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 105, 14), )

    
    abstractors = property(__abstractors.value, __abstractors.set, None, 'List of abstractors for this interconnection')

    _ElementMap.update({
        __interconnectionRef.name() : __interconnectionRef,
        __abstractors.name() : __abstractors
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """List of abstractors for this interconnection"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 109, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractor uses Python identifier abstractor
    __abstractor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractor'), 'abstractor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractor', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 111, 20), )

    
    abstractor = property(__abstractor.value, __abstractor.set, None, 'Element to hold a the abstractor reference, the configuration and viewName. If multiple elements are present then the order is the order in which the abstractors should be chained together.')

    _ElementMap.update({
        __abstractor.name() : __abstractor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Element to hold a the abstractor reference, the configuration and viewName. If multiple elements are present then the order is the order in which the abstractors should be chained together."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 115, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceName uses Python identifier instanceName
    __instanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), 'instanceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009instanceName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 117, 26), )

    
    instanceName = property(__instanceName.value, __instanceName.set, None, 'Instance name for the abstractor')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorRef uses Python identifier abstractorRef
    __abstractorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorRef'), 'abstractorRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 124, 26), )

    
    abstractorRef = property(__abstractorRef.value, __abstractorRef.set, None, 'Abstractor reference')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}viewName uses Python identifier viewName
    __viewName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewName'), 'viewName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009viewName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 130, 26), )

    
    viewName = property(__viewName.value, __viewName.set, None, 'The name of the active view for this abstractor instance.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configurableElementValues uses Python identifier configurableElementValues
    __configurableElementValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), 'configurableElementValues', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configurableElementValues', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4), )

    
    configurableElementValues = property(__configurableElementValues.value, __configurableElementValues.set, None, 'All configuration information for a contained component, generator, generator chain or abstractor instance.')

    _ElementMap.update({
        __displayName.name() : __displayName,
        __description.name() : __description,
        __instanceName.name() : __instanceName,
        __abstractorRef.name() : __abstractorRef,
        __viewName.name() : __viewName,
        __configurableElementValues.name() : __configurableElementValues
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Contains the active view for each instance in the design"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 148, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}viewName uses Python identifier viewName
    __viewName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewName'), 'viewName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_72_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009viewName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 151, 14), )

    
    viewName = property(__viewName.value, __viewName.set, None, 'The name of the active view for this instance')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceName uses Python identifier instanceName
    __instanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), 'instanceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_72_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009instanceName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 97, 4), )

    
    instanceName = property(__instanceName.value, __instanceName.set, None, 'An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.')

    _ElementMap.update({
        __viewName.name() : __viewName,
        __instanceName.name() : __instanceName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """IP-XACT reference to a file or directory."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 70, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 72, 16), )

    
    name = property(__name.value, __name.set, None, 'Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}isIncludeFile uses Python identifier isIncludeFile
    __isIncludeFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isIncludeFile'), 'isIncludeFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009isIncludeFile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 87, 16), )

    
    isIncludeFile = property(__isIncludeFile.value, __isIncludeFile.set, None, 'Indicate that the file is include file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}logicalName uses Python identifier logicalName
    __logicalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), 'logicalName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009logicalName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 103, 16), )

    
    logicalName = property(__logicalName.value, __logicalName.set, None, 'Logical name for this file or directory e.g. VHDL library name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}exportedName uses Python identifier exportedName
    __exportedName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'exportedName'), 'exportedName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009exportedName', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 119, 16), )

    
    exportedName = property(__exportedName.value, __exportedName.set, None, 'Defines exported names that can be accessed externally, e.g. exported function names from a C source file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}buildCommand uses Python identifier buildCommand
    __buildCommand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'buildCommand'), 'buildCommand', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009buildCommand', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 124, 16), )

    
    buildCommand = property(__buildCommand.value, __buildCommand.set, None, 'Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}define uses Python identifier define
    __define = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'define'), 'define', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009define', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 187, 16), )

    
    define = property(__define.value, __define.set, None, 'Specifies define symbols that are used in the source file.  The spirit:name element gives the name to be defined and the text content of the spirit:value element holds the value.  This element supports full configurability.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}imageType uses Python identifier imageType
    __imageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'imageType'), 'imageType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009imageType', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 192, 16), )

    
    imageType = property(__imageType.value, __imageType.set, None, 'Relates the current file to a certain executable image type in the design.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 197, 16), )

    
    description = property(__description.value, __description.set, None, 'String for describing this file to users')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 404, 4), )

    
    dependency = property(__dependency.value, __dependency.set, None, 'Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileType', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6), )

    
    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by IP-XACT.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009userFileType', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6), )

    
    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by IP-XACT .')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileId uses Python identifier fileId
    __fileId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'fileId'), 'fileId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileId', pyxb.binding.datatypes.ID)
    __fileId._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 204, 12)
    __fileId._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 204, 12)
    
    fileId = property(__fileId.value, __fileId.set, None, 'Unique ID for this file, referenced in fileSet/function/fileRef')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __isIncludeFile.name() : __isIncludeFile,
        __logicalName.name() : __logicalName,
        __exportedName.name() : __exportedName,
        __buildCommand.name() : __buildCommand,
        __define.name() : __define,
        __imageType.name() : __imageType,
        __description.name() : __description,
        __dependency.name() : __dependency,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({
        __fileId.name() : __fileId
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Indicate that the file is include file."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 91, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}externalDeclarations uses Python identifier externalDeclarations
    __externalDeclarations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'externalDeclarations'), 'externalDeclarations', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_74_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009externalDeclarations', pyxb.binding.datatypes.boolean, unicode_default='false')
    __externalDeclarations._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 94, 32)
    __externalDeclarations._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 94, 32)
    
    externalDeclarations = property(__externalDeclarations.value, __externalDeclarations.set, None, 'the File contains some declarations that are needed in top file')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __externalDeclarations.name() : __externalDeclarations
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Logical name for this file or directory e.g. VHDL library name."""
    _TypeDefinition = pyxb.binding.datatypes.Name
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 107, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.Name
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}default uses Python identifier default
    __default = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'default'), 'default', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_75_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009default', pyxb.binding.datatypes.boolean, unicode_default='false')
    __default._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 110, 32)
    __default._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 110, 32)
    
    default = property(__default.value, __default.set, None, 'The logical name shall only be used as a default and another process may override this name.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __default.name() : __default
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 128, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009command', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 130, 28), )

    
    command = property(__command.value, __command.set, None, 'Command used to build this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009flags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 142, 28), )

    
    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009replaceDefaultFlags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 159, 28), )

    
    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}targetName uses Python identifier targetName
    __targetName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'targetName'), 'targetName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009targetName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 171, 28), )

    
    targetName = property(__targetName.value, __targetName.set, None, 'Pathname to the file that is derived (built) from the source file.')

    _ElementMap.update({
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __targetName.name() : __targetName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 221, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 223, 16), )

    
    name = property(__name.value, __name.set, None, 'Name of the executable image file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 233, 16), )

    
    description = property(__description.value, __description.set, None, 'String for describing this executable image to users')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}languageTools uses Python identifier languageTools
    __languageTools = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'languageTools'), 'languageTools', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009languageTools', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 243, 16), )

    
    languageTools = property(__languageTools.value, __languageTools.set, None, 'Default commands and flags for software language tools needed to build the executable image.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRefGroup uses Python identifier fileSetRefGroup
    __fileSetRefGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), 'fileSetRefGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRefGroup', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 366, 16), )

    
    fileSetRefGroup = property(__fileSetRefGroup.value, __fileSetRefGroup.set, None, 'Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 378, 12)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 378, 12)
    
    id = property(__id.value, __id.set, None, 'Unique ID for the executableImage, referenced in fileSet/function/fileRef')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}imageType uses Python identifier imageType
    __imageType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'imageType'), 'imageType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009imageType', pyxb.binding.datatypes.Name)
    __imageType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 383, 12)
    __imageType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 383, 12)
    
    imageType = property(__imageType.value, __imageType.set, None, 'Open element to describe the type of image. The contents is model and/or generator specific.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __description.name() : __description,
        __languageTools.name() : __languageTools,
        __fileSetRefGroup.name() : __fileSetRefGroup
    })
    _AttributeMap.update({
        __id.name() : __id,
        __imageType.name() : __imageType
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Default commands and flags for software language tools needed to build the executable image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 247, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileBuilder uses Python identifier fileBuilder
    __fileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder'), 'fileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_78_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileBuilder', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 249, 28), )

    
    fileBuilder = property(__fileBuilder.value, __fileBuilder.set, None, 'A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}linker uses Python identifier linker
    __linker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linker'), 'linker', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_78_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009linker', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 298, 28), )

    
    linker = property(__linker.value, __linker.set, None, None)

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}linkerFlags uses Python identifier linkerFlags
    __linkerFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags'), 'linkerFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_78_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009linkerFlags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 307, 28), )

    
    linkerFlags = property(__linkerFlags.value, __linkerFlags.set, None, None)

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}linkerCommandFile uses Python identifier linkerCommandFile
    __linkerCommandFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile'), 'linkerCommandFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_78_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009linkerCommandFile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 316, 28), )

    
    linkerCommandFile = property(__linkerCommandFile.value, __linkerCommandFile.set, None, 'Specifies a linker command file.')

    _ElementMap.update({
        __fileBuilder.name() : __fileBuilder,
        __linker.name() : __linker,
        __linkerFlags.name() : __linkerFlags,
        __linkerCommandFile.name() : __linkerCommandFile
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 253, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009command', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 256, 40), )

    
    command = property(__command.value, __command.set, None, 'Default command used to build files of the specified fileType. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009flags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 268, 40), )

    
    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building files of this type.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009replaceDefaultFlags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 280, 40), )

    
    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6), )

    
    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by IP-XACT.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009userFileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6), )

    
    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by IP-XACT .')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies a linker command file."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 320, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 322, 40), )

    
    name = property(__name.value, __name.set, None, 'Linker command file name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}commandLineSwitch uses Python identifier commandLineSwitch
    __commandLineSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch'), 'commandLineSwitch', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009commandLineSwitch', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 334, 40), )

    
    commandLineSwitch = property(__commandLineSwitch.value, __commandLineSwitch.set, None, 'The command line switch to specify the linker command file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}enable uses Python identifier enable
    __enable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enable'), 'enable', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009enable', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 346, 40), )

    
    enable = property(__enable.value, __enable.set, None, 'Specifies whether to generate and enable the linker command file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorRef uses Python identifier generatorRef
    __generatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), 'generatorRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 587, 4), )

    
    generatorRef = property(__generatorRef.value, __generatorRef.set, None, 'A reference to a generator element.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __commandLineSwitch.name() : __commandLineSwitch,
        __enable.name() : __enable,
        __generatorRef.name() : __generatorRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 370, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_81_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4), )

    
    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    _ElementMap.update({
        __fileSetRef.name() : __fileSetRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """A reference to a fileSet."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 394, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}localName uses Python identifier localName
    __localName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'localName'), 'localName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_82_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009localName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 396, 16), )

    
    localName = property(__localName.value, __localName.set, None, 'Refers to a fileSet defined within this description.')

    _ElementMap.update({
        __localName.name() : __localName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """List of file sets associated with component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 413, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSet uses Python identifier fileSet
    __fileSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), 'fileSet', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_83_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSet', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 212, 4), )

    
    fileSet = property(__fileSet.value, __fileSet.set, None, 'This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.')

    _ElementMap.update({
        __fileSet.name() : __fileSet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileBuilderType with content type ELEMENT_ONLY
class fileBuilderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileBuilderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fileBuilderType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 419, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009command', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 422, 12), )

    
    command = property(__command.value, __command.set, None, 'Default command used to build files of the specified fileType. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009flags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 434, 12), )

    
    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building files of this type.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009replaceDefaultFlags', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 446, 12), )

    
    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6), )

    
    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by IP-XACT.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009userFileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6), )

    
    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by IP-XACT .')

    _ElementMap.update({
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.fileBuilderType = fileBuilderType
Namespace.addCategoryObject('typeBinding', 'fileBuilderType', fileBuilderType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetType with content type ELEMENT_ONLY
class fileSetType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fileSetType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 462, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}file uses Python identifier file
    __file = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'file'), 'file', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009file', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 66, 4), )

    
    file = property(__file.value, __file.set, None, 'IP-XACT reference to a file or directory.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 404, 4), )

    
    dependency = property(__dependency.value, __dependency.set, None, 'Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 465, 12), )

    
    group = property(__group.value, __group.set, None, 'Identifies this filleSet as belonging to a particular group or having a particular purpose. Examples might be "diagnostics", "boot", "application", "interrupt", "deviceDriver", etc.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}defaultFileBuilder uses Python identifier defaultFileBuilder
    __defaultFileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), 'defaultFileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009defaultFileBuilder', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 471, 12), )

    
    defaultFileBuilder = property(__defaultFileBuilder.value, __defaultFileBuilder.set, None, 'Default command and flags used to build derived files from the sourceName files in this file set.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}function uses Python identifier function
    __function = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'function'), 'function', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009function', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 477, 12), )

    
    function = property(__function.value, __function.set, None, 'Generator information if this file set describes a function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __file.name() : __file,
        __dependency.name() : __dependency,
        __group.name() : __group,
        __defaultFileBuilder.name() : __defaultFileBuilder,
        __function.name() : __function
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.fileSetType = fileSetType
Namespace.addCategoryObject('typeBinding', 'fileSetType', fileSetType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Generator information if this file set describes a function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 481, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}entryPoint uses Python identifier entryPoint
    __entryPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entryPoint'), 'entryPoint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009entryPoint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 483, 24), )

    
    entryPoint = property(__entryPoint.value, __entryPoint.set, None, 'Optional name for the function.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileRef uses Python identifier fileRef
    __fileRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileRef'), 'fileRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 488, 24), )

    
    fileRef = property(__fileRef.value, __fileRef.set, None, 'A reference to the file that contains the entry point function.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}returnType uses Python identifier returnType
    __returnType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'returnType'), 'returnType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009returnType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 493, 24), )

    
    returnType = property(__returnType.value, __returnType.set, None, 'Function return type. Possible values are void and int.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}argument uses Python identifier argument
    __argument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'argument'), 'argument', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009argument', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 504, 24), )

    
    argument = property(__argument.value, __argument.set, None, 'Arguments passed in when the function is called. Arguments are passed in order.\n\nThis is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name element and its value is in the spirit:value element.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'disabled'), 'disabled', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009disabled', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 522, 24), )

    
    disabled = property(__disabled.value, __disabled.set, None, 'Specifies if the SW function is enabled. If not present the function is always enabled.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}sourceFile uses Python identifier sourceFile
    __sourceFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceFile'), 'sourceFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009sourceFile', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 534, 24), )

    
    sourceFile = property(__sourceFile.value, __sourceFile.set, None, 'Location information for the source file of this function.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}replicate uses Python identifier replicate
    __replicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'replicate'), 'replicate', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009replicate', pyxb.binding.datatypes.boolean, unicode_default='false')
    __replicate._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 556, 20)
    __replicate._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 556, 20)
    
    replicate = property(__replicate.value, __replicate.set, None, 'If true directs the generator to compile a separate object module for each instance of the component in the design. If false (default) the function will be called with different arguments for each instance.')

    _ElementMap.update({
        __entryPoint.name() : __entryPoint,
        __fileRef.name() : __fileRef,
        __returnType.name() : __returnType,
        __argument.name() : __argument,
        __disabled.name() : __disabled,
        __sourceFile.name() : __sourceFile
    })
    _AttributeMap.update({
        __replicate.name() : __replicate
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Location information for the source file of this function."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 538, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}sourceName uses Python identifier sourceName
    __sourceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceName'), 'sourceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_85_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009sourceName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 540, 36), )

    
    sourceName = property(__sourceName.value, __sourceName.set, None, 'Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.\n    ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_85_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6), )

    
    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by IP-XACT.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_85_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009userFileType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6), )

    
    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by IP-XACT .')

    _ElementMap.update({
        __sourceName.name() : __sourceName,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 67, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choices uses Python identifier choices
    __choices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choices'), 'choices', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choices', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4), )

    
    choices = property(__choices.value, __choices.set, None, 'Choices used by elements with an attribute spirit:choiceRef.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorChainSelector uses Python identifier generatorChainSelector
    __generatorChainSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorChainSelector'), 'generatorChainSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorChainSelector', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 71, 10), )

    
    generatorChainSelector = property(__generatorChainSelector.value, __generatorChainSelector.set, None, 'Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selected based on the selection criteria, DE will prompt the user to resolve to a single generator.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentGeneratorSelector uses Python identifier componentGeneratorSelector
    __componentGeneratorSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector'), 'componentGeneratorSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentGeneratorSelector', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 91, 10), )

    
    componentGeneratorSelector = property(__componentGeneratorSelector.value, __componentGeneratorSelector.set, None, 'Selects generators declared in components of the current design for inclusion into this generator chain.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}chainGroup uses Python identifier chainGroup
    __chainGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'chainGroup'), 'chainGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009chainGroup', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 98, 8), )

    
    chainGroup = property(__chainGroup.value, __chainGroup.set, None, 'Identifies this generator chain as belonging to the named group. This is used by other generator chains to select this chain for programmatic inclusion.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generator uses Python identifier generator
    __generator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generator'), 'generator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generator', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 115, 2), )

    
    generator = property(__generator.value, __generator.set, None, 'Specifies a set of generators.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6), )

    
    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6), )

    
    library = property(__library.value, __library.set, None, 'Name of the logical library this element belongs to.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6), )

    
    name = property(__name.value, __name.set, None, 'The name of the object.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6), )

    
    version = property(__version.value, __version.set, None, 'Indicates the version of the named element.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'hidden'), 'hidden', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009hidden', pyxb.binding.datatypes.boolean, unicode_default='false')
    __hidden._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 108, 6)
    __hidden._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 108, 6)
    
    hidden = property(__hidden.value, __hidden.set, None, 'If this attribute is true then the generator should not be presented to the user, it may be part of a chain and has no useful meaning when invoked standalone.')

    _ElementMap.update({
        __choices.name() : __choices,
        __vendorExtensions.name() : __vendorExtensions,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __generatorChainSelector.name() : __generatorChainSelector,
        __componentGeneratorSelector.name() : __componentGeneratorSelector,
        __chainGroup.name() : __chainGroup,
        __generator.name() : __generator,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        __hidden.name() : __hidden
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selected based on the selection criteria, DE will prompt the user to resolve to a single generator."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 75, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorChainRef uses Python identifier generatorChainRef
    __generatorChainRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef'), 'generatorChainRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorChainRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 78, 16), )

    
    generatorChainRef = property(__generatorChainRef.value, __generatorChainRef.set, None, 'Select another generator chain using the unique identifier of this generator chain.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}groupSelector uses Python identifier groupSelector
    __groupSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), 'groupSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009groupSelector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 140, 2), )

    
    groupSelector = property(__groupSelector.value, __groupSelector.set, None, 'Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}unique uses Python identifier unique
    __unique = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'unique'), 'unique', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009unique', pyxb.binding.datatypes.boolean, unicode_default='false')
    __unique._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 84, 14)
    __unique._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 84, 14)
    
    unique = property(__unique.value, __unique.set, None, 'Specifies that only a single generator is valid in this context. If more that one generator is selcted based on the selection criteria, DE will prompt the user to resolve to a single generator.')

    _ElementMap.update({
        __generatorChainRef.name() : __generatorChainRef,
        __groupSelector.name() : __groupSelector
    })
    _AttributeMap.update({
        __unique.name() : __unique
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements."""
    _TypeDefinition = pyxb.binding.datatypes.float
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 169, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.float
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorSelectorType with content type ELEMENT_ONLY
class generatorSelectorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorSelectorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'generatorSelectorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 199, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}groupSelector uses Python identifier groupSelector
    __groupSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), 'groupSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorSelectorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009groupSelector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 140, 2), )

    
    groupSelector = property(__groupSelector.value, __groupSelector.set, None, 'Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).')

    _ElementMap.update({
        __groupSelector.name() : __groupSelector
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.generatorSelectorType = generatorSelectorType
Namespace.addCategoryObject('typeBinding', 'generatorSelectorType', generatorSelectorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """List of component generators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 208, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentGenerator uses Python identifier componentGenerator
    __componentGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), 'componentGenerator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_89_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentGenerator', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 125, 2), )

    
    componentGenerator = property(__componentGenerator.value, __componentGenerator.set, None, 'Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.')

    _ElementMap.update({
        __componentGenerator.name() : __componentGenerator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """List of abstractor generators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 218, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorGenerator uses Python identifier abstractorGenerator
    __abstractorGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerator'), 'abstractorGenerator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_90_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009abstractorGenerator', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 135, 2), )

    
    abstractorGenerator = property(__abstractorGenerator.value, __abstractorGenerator.set, None, 'Specifies a set of abstractor generators. The scope attribute applies to abstractor generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.')

    _ElementMap.update({
        __abstractorGenerator.name() : __abstractorGenerator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType with content type ELEMENT_ONLY
class generatorType (pyxb.binding.basis.complexTypeDefinition):
    """Types of generators"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'generatorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 224, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}phase uses Python identifier phase
    __phase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phase'), 'phase', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009phase', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 165, 2), )

    
    phase = property(__phase.value, __phase.set, None, 'This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}apiType uses Python identifier apiType
    __apiType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'apiType'), 'apiType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009apiType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6), )

    
    apiType = property(__apiType.value, __apiType.set, None, 'Indicates the type of API used by the generator. Valid value are TGI, and none. If this element is not present, TGI is assumed.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transportMethods uses Python identifier transportMethods
    __transportMethods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transportMethods'), 'transportMethods', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009transportMethods', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6), )

    
    transportMethods = property(__transportMethods.value, __transportMethods.set, None, None)

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorExe uses Python identifier generatorExe
    __generatorExe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorExe'), 'generatorExe', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009generatorExe', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6), )

    
    generatorExe = property(__generatorExe.value, __generatorExe.set, None, 'The pathname to the executable file that implements the generator')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'hidden'), 'hidden', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009hidden', pyxb.binding.datatypes.boolean, unicode_default='false')
    __hidden._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 266, 4)
    __hidden._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 266, 4)
    
    hidden = property(__hidden.value, __hidden.set, None, 'If this attribute is true then the generator should not be presented to the user, it may be part of a chain and has no useful meaning when invoked standalone.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __phase.name() : __phase,
        __apiType.name() : __apiType,
        __transportMethods.name() : __transportMethods,
        __generatorExe.name() : __generatorExe
    })
    _AttributeMap.update({
        __hidden.name() : __hidden
    })
_module_typeBindings.generatorType = generatorType
Namespace.addCategoryObject('typeBinding', 'generatorType', generatorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 244, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transportMethod uses Python identifier transportMethod
    __transportMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transportMethod'), 'transportMethod', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_91_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009transportMethod', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 246, 12), )

    
    transportMethod = property(__transportMethod.value, __transportMethod.set, None, "Defines a SOAP transport protocol other than HTTP which is supported by this generator. The only other currently supported protocol is 'file'.")

    _ElementMap.update({
        __transportMethod.name() : __transportMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}libraryRefType with content type EMPTY
class libraryRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base IP-XACT document reference type. Contains vendor, library, name and version attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'libraryRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 105, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', pyxb.binding.datatypes.Name, required=True)
    __vendor._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 100, 4)
    __vendor._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 100, 4)
    
    vendor = property(__vendor.value, __vendor.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', pyxb.binding.datatypes.Name, required=True)
    __library._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 101, 4)
    __library._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 101, 4)
    
    library = property(__library.value, __library.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', pyxb.binding.datatypes.NMTOKEN, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 102, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 102, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', pyxb.binding.datatypes.NMTOKEN, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 103, 4)
    __version._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 103, 4)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
_module_typeBindings.libraryRefType = libraryRefType
Namespace.addCategoryObject('typeBinding', 'libraryRefType', libraryRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolvedLibraryRefType with content type SIMPLE
class resolvedLibraryRefType (pyxb.binding.basis.complexTypeDefinition):
    """Resolved IP-XACT document reference type. Contains vendor, library, name and version attributes and the URI of the referenced IP-XACT document"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'resolvedLibraryRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 115, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendor', pyxb.binding.datatypes.Name, required=True)
    __vendor._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 100, 4)
    __vendor._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 100, 4)
    
    vendor = property(__vendor.value, __vendor.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}library uses Python identifier library
    __library = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009library', pyxb.binding.datatypes.Name, required=True)
    __library._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 101, 4)
    __library._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 101, 4)
    
    library = property(__library.value, __library.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', pyxb.binding.datatypes.NMTOKEN, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 102, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 102, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009version', pyxb.binding.datatypes.NMTOKEN, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 103, 4)
    __version._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 103, 4)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
_module_typeBindings.resolvedLibraryRefType = resolvedLibraryRefType
Namespace.addCategoryObject('typeBinding', 'resolvedLibraryRefType', resolvedLibraryRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlockType with content type ELEMENT_ONLY
class addressBlockType (pyxb.binding.basis.complexTypeDefinition):
    """Top level address block that specify an address"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressBlockType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 147, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009baseAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4), )

    
    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12), )

    
    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12), )

    
    width = property(__width.value, __width.set, None, 'The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usage', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12), )

    
    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}register uses Python identifier register
    __register = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'register'), 'register', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009register', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12), )

    
    register = property(__register.value, __register.set, None, 'A single register')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerFile uses Python identifier registerFile
    __registerFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), 'registerFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009registerFile', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4), )

    
    registerFile = property(__registerFile.value, __registerFile.set, None, 'A structure of registers and register files')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeIdentifier uses Python identifier typeIdentifier
    __typeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), 'typeIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeIdentifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 916, 12), )

    
    typeIdentifier = property(__typeIdentifier.value, __typeIdentifier.set, None, 'Identifier name used to indicate that multiple addressBlock elements contain the exact same information except for the elements in the addressBlockInstanceGroup.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 157, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __baseAddress.name() : __baseAddress,
        __range.name() : __range,
        __width.name() : __width,
        __usage.name() : __usage,
        __register.name() : __register,
        __registerFile.name() : __registerFile,
        __typeIdentifier.name() : __typeIdentifier
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.addressBlockType = addressBlockType
Namespace.addCategoryObject('typeBinding', 'addressBlockType', addressBlockType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addrSpaceRefType with content type EMPTY
class addrSpaceRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base type for an element which references an address space.  Reference is kept in an attribute rather than the text value, so that the type may be extended with child elements if necessary."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addrSpaceRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 159, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addrSpaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressSpaceRef', pyxb.binding.datatypes.Name, required=True)
    __addressSpaceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 111, 4)
    __addressSpaceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 163, 8)
    
    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'A reference to a unique address space.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __addressSpaceRef.name() : __addressSpaceRef
    })
_module_typeBindings.addrSpaceRefType = addrSpaceRefType
Namespace.addCategoryObject('typeBinding', 'addrSpaceRefType', addrSpaceRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMapRefType with content type EMPTY
class memoryMapRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base type for an element which references an memory map.  Reference is kept in an attribute rather than the text value, so that the type may be extended with child elements if necessary."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryMapRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 165, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMapRef uses Python identifier memoryMapRef
    __memoryMapRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), 'memoryMapRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009memoryMapRef', pyxb.binding.datatypes.Name, required=True)
    __memoryMapRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 116, 4)
    __memoryMapRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 169, 8)
    
    memoryMapRef = property(__memoryMapRef.value, __memoryMapRef.set, None, 'A reference to a unique memory map.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __memoryMapRef.name() : __memoryMapRef
    })
_module_typeBindings.memoryMapRefType = memoryMapRefType
Namespace.addCategoryObject('typeBinding', 'memoryMapRefType', memoryMapRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankedBlockType with content type ELEMENT_ONLY
class bankedBlockType (pyxb.binding.basis.complexTypeDefinition):
    """Address blocks inside a bank do not specify address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedBlockType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 181, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12), )

    
    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12), )

    
    width = property(__width.value, __width.set, None, 'The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usage', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12), )

    
    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}register uses Python identifier register
    __register = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'register'), 'register', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009register', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12), )

    
    register = property(__register.value, __register.set, None, 'A single register')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerFile uses Python identifier registerFile
    __registerFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), 'registerFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009registerFile', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4), )

    
    registerFile = property(__registerFile.value, __registerFile.set, None, 'A structure of registers and register files')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 191, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __range.name() : __range,
        __width.name() : __width,
        __usage.name() : __usage,
        __register.name() : __register,
        __registerFile.name() : __registerFile
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.bankedBlockType = bankedBlockType
Namespace.addCategoryObject('typeBinding', 'bankedBlockType', bankedBlockType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankedSubspaceType with content type ELEMENT_ONLY
class bankedSubspaceType (pyxb.binding.basis.complexTypeDefinition):
    """Subspace references inside banks do not specify an address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedSubspaceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 193, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 126, 4)
    __masterRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 206, 8)
    
    masterRef = property(__masterRef.value, __masterRef.set, None, 'For subspaceMap elements, this attribute identifies the master that contains the address space to be mapped.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description
    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef
    })
_module_typeBindings.bankedSubspaceType = bankedSubspaceType
Namespace.addCategoryObject('typeBinding', 'bankedSubspaceType', bankedSubspaceType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fieldType with content type ELEMENT_ONLY
class fieldType (pyxb.binding.basis.complexTypeDefinition):
    """A field within a register"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fieldType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 208, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 214, 12), )

    
    bitOffset = property(__bitOffset.value, __bitOffset.set, None, "Offset of this field's bit 0 from bit 0 of the register.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}enumeratedValues uses Python identifier enumeratedValues
    __enumeratedValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValues'), 'enumeratedValues', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009enumeratedValues', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 670, 4), )

    
    enumeratedValues = property(__enumeratedValues.value, __enumeratedValues.set, None, 'Enumerates specific values that can be assigned to the bit field.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modifiedWriteValue uses Python identifier modifiedWriteValue
    __modifiedWriteValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modifiedWriteValue'), 'modifiedWriteValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modifiedWriteValue', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 729, 12), )

    
    modifiedWriteValue = property(__modifiedWriteValue.value, __modifiedWriteValue.set, None, "If present this element describes the modification of field data caused by a write operation. 'oneToClear' means that in a bitwise fashion each write data bit of a one will clear the corresponding bit in the field. 'oneToSet' means that in a bitwise fashion each write data bit of a one will set the corresponding bit in the field.  'oneToToggle' means that in a bitwise fashion each write data bit of a one will toggle the corresponding bit in the field. 'zeroToClear' means that in a bitwise fashion each write data bit of a zero will clear the corresponding bit in the field. 'zeroToSet' means that in a bitwise fashion each write data bit of a zero will set the corresponding bit in the field. 'zeroToToggle' means that in a bitwise fashion each write data bit of a zero will toggle the corresponding bit in the field. 'clear' means any write to this field clears the field. 'set' means any write to the field sets the field. 'modify' means any write to this field may modify that data. If this element is not present the write operation data is written.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}writeValueConstraint uses Python identifier writeValueConstraint
    __writeValueConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'writeValueConstraint'), 'writeValueConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009writeValueConstraint', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 747, 12), )

    
    writeValueConstraint = property(__writeValueConstraint.value, __writeValueConstraint.set, None, 'The legal values that may be written to a field. If not specified the legal values are not specified.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}readAction uses Python identifier readAction
    __readAction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'readAction'), 'readAction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009readAction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 752, 12), )

    
    readAction = property(__readAction.value, __readAction.set, None, "A list of possible actions for a read to set the field after the read. 'clear' means that after a read the field is cleared. 'set' means that after a read the field is set. 'modify' means after a read the field is modified. If not present the field value is not modified after a read.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}testable uses Python identifier testable
    __testable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'testable'), 'testable', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009testable', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 764, 12), )

    
    testable = property(__testable.value, __testable.set, None, 'Can the field be tested with an automated register test routine. The presumed value is true if not specified.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeIdentifier uses Python identifier typeIdentifier
    __typeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), 'typeIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeIdentifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 866, 12), )

    
    typeIdentifier = property(__typeIdentifier.value, __typeIdentifier.set, None, 'Identifier name used to indicate that multiple field elements contain the exact same information for the elements in the fieldDefinitionGroup.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitWidth uses Python identifier bitWidth
    __bitWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), 'bitWidth', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitWidth', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 871, 12), )

    
    bitWidth = property(__bitWidth.value, __bitWidth.set, None, 'Width of the field in bits.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 223, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __bitOffset.name() : __bitOffset,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __enumeratedValues.name() : __enumeratedValues,
        __modifiedWriteValue.name() : __modifiedWriteValue,
        __writeValueConstraint.name() : __writeValueConstraint,
        __readAction.name() : __readAction,
        __testable.name() : __testable,
        __typeIdentifier.name() : __typeIdentifier,
        __bitWidth.name() : __bitWidth
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.fieldType = fieldType
Namespace.addCategoryObject('typeBinding', 'fieldType', fieldType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMapType with content type ELEMENT_ONLY
class memoryMapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on slave slave bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryMapType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 239, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009subspaceMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12), )

    
    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryRemap uses Python identifier memoryRemap
    __memoryRemap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap'), 'memoryRemap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009memoryRemap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 246, 12), )

    
    memoryRemap = property(__memoryRemap.value, __memoryRemap.set, None, 'Additional memory map elements that are dependent on the component state.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressBlock', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4), )

    
    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bank', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4), )

    
    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressUnitBits uses Python identifier addressUnitBits
    __addressUnitBits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits'), 'addressUnitBits', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressUnitBits', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 467, 4), )

    
    addressUnitBits = property(__addressUnitBits.value, __addressUnitBits.set, None, 'The number of data bits in an addressable unit. The default is byte addressable (8 bits).')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 258, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __subspaceMap.name() : __subspaceMap,
        __memoryRemap.name() : __memoryRemap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank,
        __addressUnitBits.name() : __addressUnitBits
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.memoryMapType = memoryMapType
Namespace.addCategoryObject('typeBinding', 'memoryMapType', memoryMapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryRemapType with content type ELEMENT_ONLY
class memoryRemapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on a slave bus interface in a specific remap state."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryRemapType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 260, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009subspaceMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12), )

    
    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressBlock', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4), )

    
    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bank', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4), )

    
    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 273, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009state', pyxb.binding.datatypes.string, required=True)
    __state._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 268, 8)
    __state._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 268, 8)
    
    state = property(__state.value, __state.set, None, 'State of the component in which the memory map is active.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __subspaceMap.name() : __subspaceMap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank
    })
    _AttributeMap.update({
        __id.name() : __id,
        __state.name() : __state
    })
_module_typeBindings.memoryRemapType = memoryRemapType
Namespace.addCategoryObject('typeBinding', 'memoryRemapType', memoryRemapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}localMemoryMapType with content type ELEMENT_ONLY
class localMemoryMapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on the local memory map of a master bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'localMemoryMapType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 275, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009subspaceMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12), )

    
    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressBlock', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4), )

    
    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bank', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4), )

    
    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 283, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __subspaceMap.name() : __subspaceMap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.localMemoryMapType = localMemoryMapType
Namespace.addCategoryObject('typeBinding', 'localMemoryMapType', localMemoryMapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceRefType with content type ELEMENT_ONLY
class subspaceRefType (pyxb.binding.basis.complexTypeDefinition):
    """Address subspace type.  Its subspaceReference attribute references the subspace from which the dimensions are taken."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'subspaceRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 285, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009baseAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4), )

    
    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 126, 4)
    __masterRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 302, 8)
    
    masterRef = property(__masterRef.value, __masterRef.set, None, 'For subspaceMap elements, this attribute identifies the master that contains the address space to be mapped.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}segmentRef uses Python identifier segmentRef
    __segmentRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'segmentRef'), 'segmentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009segmentRef', pyxb.binding.datatypes.Name)
    __segmentRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 131, 4)
    __segmentRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 303, 8)
    
    segmentRef = property(__segmentRef.value, __segmentRef.set, None, 'Refernce to a segment of the addressSpace of the masterRef attribute.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __baseAddress.name() : __baseAddress
    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef,
        __segmentRef.name() : __segmentRef
    })
_module_typeBindings.subspaceRefType = subspaceRefType
Namespace.addCategoryObject('typeBinding', 'subspaceRefType', subspaceRefType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """If this component is a bus master, this lists all the address spaces
defined by the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 337, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressSpace uses Python identifier addressSpace
    __addressSpace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpace'), 'addressSpace', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressSpace', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 339, 16), )

    
    addressSpace = property(__addressSpace.value, __addressSpace.set, None, 'This defines a logical space, referenced by a bus master.')

    _ElementMap.update({
        __addressSpace.name() : __addressSpace
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """This defines a logical space, referenced by a bus master."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 343, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}executableImage uses Python identifier executableImage
    __executableImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), 'executableImage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009executableImage', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 217, 4), )

    
    executableImage = property(__executableImage.value, __executableImage.set, None, 'Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}segments uses Python identifier segments
    __segments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'segments'), 'segments', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009segments', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 347, 28), )

    
    segments = property(__segments.value, __segments.set, None, 'Address segments withing an addressSpace ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}localMemoryMap uses Python identifier localMemoryMap
    __localMemoryMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap'), 'localMemoryMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009localMemoryMap', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 393, 28), )

    
    localMemoryMap = property(__localMemoryMap.value, __localMemoryMap.set, None, 'Provides the local memory map of an address space.  Blocks in this memory map are accessable to master interfaces on this component that reference this address space.   They are not accessable to any external master interface.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressUnitBits uses Python identifier addressUnitBits
    __addressUnitBits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits'), 'addressUnitBits', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressUnitBits', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 467, 4), )

    
    addressUnitBits = property(__addressUnitBits.value, __addressUnitBits.set, None, 'The number of data bits in an addressable unit. The default is byte addressable (8 bits).')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12), )

    
    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009width', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12), )

    
    width = property(__width.value, __width.set, None, 'The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __executableImage.name() : __executableImage,
        __segments.name() : __segments,
        __localMemoryMap.name() : __localMemoryMap,
        __addressUnitBits.name() : __addressUnitBits,
        __range.name() : __range,
        __width.name() : __width
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Address segments withing an addressSpace """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 351, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}segment uses Python identifier segment
    __segment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'segment'), 'segment', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009segment', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 353, 40), )

    
    segment = property(__segment.value, __segment.set, None, 'Address segment withing an addressSpace ')

    _ElementMap.update({
        __segment.name() : __segment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Address segment withing an addressSpace """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 357, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressOffset uses Python identifier addressOffset
    __addressOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), 'addressOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 360, 52), )

    
    addressOffset = property(__addressOffset.value, __addressOffset.set, None, 'Address offset of the segment within the containing address space.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 372, 52), )

    
    range = property(__range.value, __range.set, None, 'The address range of asegment.  Expressed as the number of addressable units accessible to the segment.         ')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __addressOffset.name() : __addressOffset,
        __range.name() : __range
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Lists all the slave memory maps defined by the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 427, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}memoryMap uses Python identifier memoryMap
    __memoryMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMap'), 'memoryMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009memoryMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 429, 16), )

    
    memoryMap = property(__memoryMap.value, __memoryMap.set, None, "The set of address blocks a bus slave contributes to the bus' address space.")

    _ElementMap.update({
        __memoryMap.name() : __memoryMap
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """A single register"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 594, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dim uses Python identifier dim
    __dim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dim'), 'dim', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dim', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 597, 24), )

    
    dim = property(__dim.value, __dim.set, None, 'Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressOffset uses Python identifier addressOffset
    __addressOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), 'addressOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 602, 24), )

    
    addressOffset = property(__addressOffset.value, __addressOffset.set, None, "Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateRegisters uses Python identifier alternateRegisters
    __alternateRegisters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'alternateRegisters'), 'alternateRegisters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009alternateRegisters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 608, 24), )

    
    alternateRegisters = property(__alternateRegisters.value, __alternateRegisters.set, None, 'Alternate definitions for the current register')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeIdentifier uses Python identifier typeIdentifier
    __typeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), 'typeIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeIdentifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 931, 12), )

    
    typeIdentifier = property(__typeIdentifier.value, __typeIdentifier.set, None, 'Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the registerDefinitionGroup.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'size'), 'size', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009size', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 936, 12), )

    
    size = property(__size.value, __size.set, None, 'Width of the register in bits.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}reset uses Python identifier reset_
    __reset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reset'), 'reset_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009reset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 950, 12), )

    
    reset_ = property(__reset.value, __reset.set, None, 'Register value at reset.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}field uses Python identifier field
    __field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'field'), 'field', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009field', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 983, 12), )

    
    field = property(__field.value, __field.set, None, 'Describes individual bit fields within the register.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 656, 20)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __dim.name() : __dim,
        __addressOffset.name() : __addressOffset,
        __alternateRegisters.name() : __alternateRegisters,
        __typeIdentifier.name() : __typeIdentifier,
        __size.name() : __size,
        __reset.name() : __reset,
        __field.name() : __field
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Alternate definitions for the current register"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 612, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateRegister uses Python identifier alternateRegister
    __alternateRegister = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'alternateRegister'), 'alternateRegister', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009alternateRegister', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 614, 36), )

    
    alternateRegister = property(__alternateRegister.value, __alternateRegister.set, None, 'Alternate definition for the current register')

    _ElementMap.update({
        __alternateRegister.name() : __alternateRegister
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Alternate definition for the current register"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 618, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateGroups uses Python identifier alternateGroups
    __alternateGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'alternateGroups'), 'alternateGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009alternateGroups', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 621, 48), )

    
    alternateGroups = property(__alternateGroups.value, __alternateGroups.set, None, 'Defines a list of grouping names that this register description belongs.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeIdentifier uses Python identifier typeIdentifier
    __typeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), 'typeIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeIdentifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 995, 12), )

    
    typeIdentifier = property(__typeIdentifier.value, __typeIdentifier.set, None, 'Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the alternateRegisterDefinitionGroup.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}reset uses Python identifier reset_
    __reset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reset'), 'reset_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009reset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1002, 12), )

    
    reset_ = property(__reset.value, __reset.set, None, 'Register value at reset.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}field uses Python identifier field
    __field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'field'), 'field', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009field', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1035, 12), )

    
    field = property(__field.value, __field.set, None, 'Describes individual bit fields within the register.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 639, 44)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __alternateGroups.name() : __alternateGroups,
        __typeIdentifier.name() : __typeIdentifier,
        __reset.name() : __reset,
        __field.name() : __field
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_99 = CTD_ANON_99


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a list of grouping names that this register description belongs."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 625, 52)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}alternateGroup uses Python identifier alternateGroup
    __alternateGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'alternateGroup'), 'alternateGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009alternateGroup', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 627, 60), )

    
    alternateGroup = property(__alternateGroup.value, __alternateGroup.set, None, 'Defines a grouping name that this register description belongs.')

    _ElementMap.update({
        __alternateGroup.name() : __alternateGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_100 = CTD_ANON_100


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """Enumerates specific values that can be assigned to the bit field."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 674, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}enumeratedValue uses Python identifier enumeratedValue
    __enumeratedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValue'), 'enumeratedValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009enumeratedValue', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 676, 16), )

    
    enumeratedValue = property(__enumeratedValue.value, __enumeratedValue.set, None, 'Enumerates specific values that can be assigned to the bit field. The name of this enumerated value. This may be used as a token in generating code.')

    _ElementMap.update({
        __enumeratedValue.name() : __enumeratedValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_101 = CTD_ANON_101


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}valueMaskConfigType with content type EMPTY
class valueMaskConfigType (pyxb.binding.basis.complexTypeDefinition):
    """This type is used to specify a value and optional mask that are configurable"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'valueMaskConfigType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 711, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.valueMaskConfigType = valueMaskConfigType
Namespace.addCategoryObject('typeBinding', 'valueMaskConfigType', valueMaskConfigType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}writeValueConstraintType with content type ELEMENT_ONLY
class writeValueConstraintType (pyxb.binding.basis.complexTypeDefinition):
    """A constraint on the values that can be written to this field. Absence of this element implies that any value that fits can be written to it."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'writeValueConstraintType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 790, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}writeAsRead uses Python identifier writeAsRead
    __writeAsRead = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'writeAsRead'), 'writeAsRead', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_writeValueConstraintType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009writeAsRead', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 795, 12), )

    
    writeAsRead = property(__writeAsRead.value, __writeAsRead.set, None, 'writeAsRead indicates that only a value immediately read before a write is a legal value to be written.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}useEnumeratedValues uses Python identifier useEnumeratedValues
    __useEnumeratedValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'useEnumeratedValues'), 'useEnumeratedValues', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_writeValueConstraintType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009useEnumeratedValues', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 800, 12), )

    
    useEnumeratedValues = property(__useEnumeratedValues.value, __useEnumeratedValues.set, None, 'useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_writeValueConstraintType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 806, 16), )

    
    minimum = property(__minimum.value, __minimum.set, None, 'The minimum legal value that may be written to a field')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_writeValueConstraintType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 818, 16), )

    
    maximum = property(__maximum.value, __maximum.set, None, 'The maximum legal value that may be written to a field')

    _ElementMap.update({
        __writeAsRead.name() : __writeAsRead,
        __useEnumeratedValues.name() : __useEnumeratedValues,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.writeValueConstraintType = writeValueConstraintType
Namespace.addCategoryObject('typeBinding', 'writeValueConstraintType', writeValueConstraintType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """A structure of registers and register files"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 837, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}register uses Python identifier register
    __register = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'register'), 'register', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009register', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12), )

    
    register = property(__register.value, __register.set, None, 'A single register')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}registerFile uses Python identifier registerFile
    __registerFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), 'registerFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009registerFile', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4), )

    
    registerFile = property(__registerFile.value, __registerFile.set, None, 'A structure of registers and register files')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dim uses Python identifier dim
    __dim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dim'), 'dim', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dim', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 840, 16), )

    
    dim = property(__dim.value, __dim.set, None, 'Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressOffset uses Python identifier addressOffset
    __addressOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), 'addressOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 845, 16), )

    
    addressOffset = property(__addressOffset.value, __addressOffset.set, None, "Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeIdentifier uses Python identifier typeIdentifier
    __typeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), 'typeIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeIdentifier', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 891, 12), )

    
    typeIdentifier = property(__typeIdentifier.value, __typeIdentifier.set, None, 'Identifier name used to indicate that multiple registerFile elements contain the exact same information except for the elements in the registerFileInstanceGroup.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009range', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 896, 12), )

    
    range = property(__range.value, __range.set, None, 'The range of a register file.  Expressed as the number of addressable units accessible to the block. Specified in units of addressUnitBits.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 854, 12)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __register.name() : __register,
        __registerFile.name() : __registerFile,
        __dim.name() : __dim,
        __addressOffset.name() : __addressOffset,
        __typeIdentifier.name() : __typeIdentifier,
        __range.name() : __range
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_102 = CTD_ANON_102


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Register value at reset."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 954, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009value', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 956, 24), )

    
    value_ = property(__value.value, __value.set, None, 'The value itself.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mask uses Python identifier mask
    __mask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mask'), 'mask', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mask', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 968, 24), )

    
    mask = property(__mask.value, __mask.set, None, 'Mask to be anded with the value before comparing to the reset value.')

    _ElementMap.update({
        __value.name() : __value,
        __mask.name() : __mask
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_103 = CTD_ANON_103


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Register value at reset."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1006, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009value', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1008, 24), )

    
    value_ = property(__value.value, __value.set, None, 'The value itself.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}mask uses Python identifier mask
    __mask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mask'), 'mask', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009mask', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1020, 24), )

    
    mask = property(__mask.value, __mask.set, None, 'Mask to be anded with the value before comparing to the reset value.')

    _ElementMap.update({
        __value.name() : __value,
        __mask.name() : __mask
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_104 = CTD_ANON_104


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}viewType with content type ELEMENT_ONLY
class viewType (pyxb.binding.basis.complexTypeDefinition):
    """Component view type"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'viewType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 66, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constraintSetRef uses Python identifier constraintSetRef
    __constraintSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'constraintSetRef'), 'constraintSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constraintSetRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 291, 4), )

    
    constraintSetRef = property(__constraintSetRef.value, __constraintSetRef.set, None, 'A reference to a set of port constraints.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4), )

    
    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}envIdentifier uses Python identifier envIdentifier
    __envIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), 'envIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009envIdentifier', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 72, 12), )

    
    envIdentifier = property(__envIdentifier.value, __envIdentifier.set, None, ' Defines the hardware environment in which this view applies. The format of the string is language:tool:vendor_extension, with each piece being optional. The language must be one of the types from spirit:fileType. The tool values are defined by the SPIRIT Consortium, and include generic values "*Simulation" and "*Synthesis" to imply any tool of the indicated type. Having more than one envIdentifier indicates that the view applies to multiple environments.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hierarchyRef uses Python identifier hierarchyRef
    __hierarchyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hierarchyRef'), 'hierarchyRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009hierarchyRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 83, 16), )

    
    hierarchyRef = property(__hierarchyRef.value, __hierarchyRef.set, None, ' References an IP-XACT design or configuration document (by VLNV) that provides a design for the component ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'language'), 'language', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009language', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 89, 20), )

    
    language = property(__language.value, __language.set, None, ' The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelName'), 'modelName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 105, 20), )

    
    modelName = property(__modelName.value, __modelName.set, None, 'Language specific name to identity the model. Verilog or SystemVerilog this is the module name. For VHDL this is, with ()’s, the entity(architecture) name pair or without, a single configuration name.  For SystemC this is the class name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}defaultFileBuilder uses Python identifier defaultFileBuilder
    __defaultFileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), 'defaultFileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009defaultFileBuilder', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 110, 20), )

    
    defaultFileBuilder = property(__defaultFileBuilder.value, __defaultFileBuilder.set, None, 'Default command and flags used to build derived files from the sourceName files in the referenced file sets.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElementRefs uses Python identifier whiteboxElementRefs
    __whiteboxElementRefs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRefs'), 'whiteboxElementRefs', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxElementRefs', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 117, 20), )

    
    whiteboxElementRefs = property(__whiteboxElementRefs.value, __whiteboxElementRefs.set, None, ' Container for white box element references.  ')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __constraintSetRef.name() : __constraintSetRef,
        __fileSetRef.name() : __fileSetRef,
        __envIdentifier.name() : __envIdentifier,
        __hierarchyRef.name() : __hierarchyRef,
        __language.name() : __language,
        __modelName.name() : __modelName,
        __defaultFileBuilder.name() : __defaultFileBuilder,
        __whiteboxElementRefs.name() : __whiteboxElementRefs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.viewType = viewType
Namespace.addCategoryObject('typeBinding', 'viewType', viewType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """ The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  """
    _TypeDefinition = pyxb.binding.datatypes.token
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 93, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.token
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}strict uses Python identifier strict
    __strict = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'strict'), 'strict', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009strict', pyxb.binding.datatypes.boolean, unicode_default='false')
    __strict._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 96, 36)
    __strict._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 96, 36)
    
    strict = property(__strict.value, __strict.set, None, "A value of 'true' indicates that this value must match the language being generated for the design.")

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __strict.name() : __strict
    })
_module_typeBindings.CTD_ANON_105 = CTD_ANON_105


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """ Container for white box element references.  """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 121, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElementRef uses Python identifier whiteboxElementRef
    __whiteboxElementRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRef'), 'whiteboxElementRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxElementRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 123, 32), )

    
    whiteboxElementRef = property(__whiteboxElementRef.value, __whiteboxElementRef.set, None, ' Reference to a white box element which is visible within this view.  ')

    _ElementMap.update({
        __whiteboxElementRef.name() : __whiteboxElementRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_106 = CTD_ANON_106


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorViewType with content type ELEMENT_ONLY
class abstractorViewType (pyxb.binding.basis.complexTypeDefinition):
    """Abstraction view type"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorViewType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 137, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009fileSetRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4), )

    
    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}envIdentifier uses Python identifier envIdentifier
    __envIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), 'envIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009envIdentifier', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 143, 12), )

    
    envIdentifier = property(__envIdentifier.value, __envIdentifier.set, None, ' Defines the hardware environment in which this view applies. The format of the string is language:tool:vendor_extension, with each piece being optional. The language must be one of the types from spirit:fileType. The tool values are defined by the SPIRIT Consortium, and include generic values "*Simulation" and "*Synthesis" to imply any tool of the indicated type. Having more than one envIdentifier indicates that the view applies to multiple environments.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'language'), 'language', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009language', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 153, 12), )

    
    language = property(__language.value, __language.set, None, ' The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelName'), 'modelName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 169, 12), )

    
    modelName = property(__modelName.value, __modelName.set, None, 'Language specific name to identity the model. Verilog or SystemVerilog this is the module name. For VHDL this is, with ()’s, the entity(architecture) name pair or without a single configuration name.  For SystemC this is the class name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}defaultFileBuilder uses Python identifier defaultFileBuilder
    __defaultFileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), 'defaultFileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorViewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009defaultFileBuilder', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 174, 12), )

    
    defaultFileBuilder = property(__defaultFileBuilder.value, __defaultFileBuilder.set, None, 'Default command and flags used to build derived files from the sourceName files in the referenced file sets.')

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __fileSetRef.name() : __fileSetRef,
        __envIdentifier.name() : __envIdentifier,
        __language.name() : __language,
        __modelName.name() : __modelName,
        __defaultFileBuilder.name() : __defaultFileBuilder
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorViewType = abstractorViewType
Namespace.addCategoryObject('typeBinding', 'abstractorViewType', abstractorViewType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """ The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  """
    _TypeDefinition = pyxb.binding.datatypes.token
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 157, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.token
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}strict uses Python identifier strict
    __strict = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'strict'), 'strict', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009strict', pyxb.binding.datatypes.boolean)
    __strict._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 160, 28)
    __strict._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 160, 28)
    
    strict = property(__strict.value, __strict.set, None, "A value of 'true' indicates that this value must match the language being generated for the design.")

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __strict.name() : __strict
    })
_module_typeBindings.CTD_ANON_107 = CTD_ANON_107


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelType with content type ELEMENT_ONLY
class modelType (pyxb.binding.basis.complexTypeDefinition):
    """Model information.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'modelType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 184, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}views uses Python identifier views
    __views = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'views'), 'views', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_modelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009views', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 190, 12), )

    
    views = property(__views.value, __views.set, None, 'View container')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}ports uses Python identifier ports
    __ports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ports'), 'ports', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_modelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009ports', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 204, 12), )

    
    ports = property(__ports.value, __ports.set, None, 'Port container')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelParameters uses Python identifier modelParameters
    __modelParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelParameters'), 'modelParameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_modelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelParameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 214, 12), )

    
    modelParameters = property(__modelParameters.value, __modelParameters.set, None, 'Model parameter name value pairs container')

    _ElementMap.update({
        __views.name() : __views,
        __ports.name() : __ports,
        __modelParameters.name() : __modelParameters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.modelType = modelType
Namespace.addCategoryObject('typeBinding', 'modelType', modelType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """View container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 194, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}view uses Python identifier view
    __view = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'view'), 'view', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009view', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 196, 24), )

    
    view = property(__view.value, __view.set, None, 'Single view of a component')

    _ElementMap.update({
        __view.name() : __view
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_108 = CTD_ANON_108


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Port container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 208, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'port'), 'port', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009port', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 355, 4), )

    
    port = property(__port.value, __port.set, None, 'Describes port characteristics.')

    _ElementMap.update({
        __port.name() : __port
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_109 = CTD_ANON_109


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Model parameter name value pairs container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 218, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelParameter uses Python identifier modelParameter
    __modelParameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelParameter'), 'modelParameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelParameter', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 220, 24), )

    
    modelParameter = property(__modelParameter.value, __modelParameter.set, None, 'A model parameter name value pair. The name is given in an attribute. The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. For hardware based models, the name should be identical to the RTL (VHDL generic or Verilog parameter). The usageType attribute indicates how the model parameter is to be used.\n                ')

    _ElementMap.update({
        __modelParameter.name() : __modelParameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_110 = CTD_ANON_110


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorModelType with content type ELEMENT_ONLY
class abstractorModelType (pyxb.binding.basis.complexTypeDefinition):
    """Model information for an abstractor."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorModelType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 231, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}views uses Python identifier views
    __views = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'views'), 'views', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009views', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 236, 12), )

    
    views = property(__views.value, __views.set, None, 'View container')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}ports uses Python identifier ports
    __ports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ports'), 'ports', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009ports', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 250, 12), )

    
    ports = property(__ports.value, __ports.set, None, 'Port container')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelParameters uses Python identifier modelParameters
    __modelParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelParameters'), 'modelParameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelParameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 260, 12), )

    
    modelParameters = property(__modelParameters.value, __modelParameters.set, None, 'Model parameter name value pairs container')

    _ElementMap.update({
        __views.name() : __views,
        __ports.name() : __ports,
        __modelParameters.name() : __modelParameters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorModelType = abstractorModelType
Namespace.addCategoryObject('typeBinding', 'abstractorModelType', abstractorModelType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """View container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 240, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}view uses Python identifier view
    __view = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'view'), 'view', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009view', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 242, 24), )

    
    view = property(__view.value, __view.set, None, 'Single view of an abstractor')

    _ElementMap.update({
        __view.name() : __view
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_111 = CTD_ANON_111


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """Port container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 254, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'port'), 'port', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009port', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 256, 24), )

    
    port = property(__port.value, __port.set, None, None)

    _ElementMap.update({
        __port.name() : __port
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_112 = CTD_ANON_112


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Model parameter name value pairs container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 264, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}modelParameter uses Python identifier modelParameter
    __modelParameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelParameter'), 'modelParameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009modelParameter', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 266, 24), )

    
    modelParameter = property(__modelParameter.value, __modelParameter.set, None, 'A model parameter name value pair. The name is given in an attribute. The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. For hardware based models, the name should be identical to the RTL (VHDL generic or Verilog parameter). The usageType attribute indicate how the model parameter is to be used.\n                ')

    _ElementMap.update({
        __modelParameter.name() : __modelParameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_113 = CTD_ANON_113


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxElementRefType with content type ELEMENT_ONLY
class whiteboxElementRefType (pyxb.binding.basis.complexTypeDefinition):
    """ Reference to a whiteboxElement within a view. The 'name' attribute must refer to a whiteboxElement defined within this component.  """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRefType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 282, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}whiteboxPath uses Python identifier whiteboxPath
    __whiteboxPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'whiteboxPath'), 'whiteboxPath', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009whiteboxPath', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 287, 12), )

    
    whiteboxPath = property(__whiteboxPath.value, __whiteboxPath.set, None, ' The whiteboxPath elements (as a set) define the name(s) needed to define the entire white box element in this view.  ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_whiteboxElementRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', pyxb.binding.datatypes.Name, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 317, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 317, 8)
    
    name = property(__name.value, __name.set, None, 'Reference to a whiteboxElement defined within this component.  ')

    _ElementMap.update({
        __whiteboxPath.name() : __whiteboxPath
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.whiteboxElementRefType = whiteboxElementRefType
Namespace.addCategoryObject('typeBinding', 'whiteboxElementRefType', whiteboxElementRefType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """ The whiteboxPath elements (as a set) define the name(s) needed to define the entire white box element in this view.  """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 291, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}pathName uses Python identifier pathName
    __pathName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pathName'), 'pathName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009pathName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 293, 24), )

    
    pathName = property(__pathName.value, __pathName.set, None, ' The view specific name for a portion of the white box element.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 302, 28), )

    
    left = property(__left.value, __left.set, None, ' Indicates the left bound value for the associated path name.  ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 307, 28), )

    
    right = property(__right.value, __right.set, None, ' Indicates the right bound values for the associated path name.  ')

    _ElementMap.update({
        __pathName.name() : __pathName,
        __left.name() : __left,
        __right.name() : __right
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_114 = CTD_ANON_114


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of the indecies for a vectored port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 81, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_115_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 83, 16), )

    
    left = property(__left.value, __left.set, None, 'The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_115_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 95, 16), )

    
    right = property(__right.value, __right.set, None, 'The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. ')

    _ElementMap.update({
        __left.name() : __left,
        __right.name() : __right
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_115 = CTD_ANON_115


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType with content type ELEMENT_ONLY
class portDeclarationType (pyxb.binding.basis.complexTypeDefinition):
    """Basic port declarations."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portDeclarationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 110, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wire uses Python identifier wire
    __wire = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wire'), 'wire', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009wire', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 120, 16), )

    
    wire = property(__wire.value, __wire.set, None, 'Defines a port whose type resolves to simple bits.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactional uses Python identifier transactional
    __transactional = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactional'), 'transactional', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009transactional', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 125, 16), )

    
    transactional = property(__transactional.value, __transactional.set, None, 'Defines a port that implements or uses a service that can be implemented with functions or methods.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portDeclarationType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16), )

    
    access = property(__access.value, __access.set, None, 'Port access characteristics.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __wire.name() : __wire,
        __transactional.name() : __transactional,
        __access.name() : __access
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.portDeclarationType = portDeclarationType
Namespace.addCategoryObject('typeBinding', 'portDeclarationType', portDeclarationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of a single transactional type defintion"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 219, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeName uses Python identifier typeName
    __typeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeName'), 'typeName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_116_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 221, 16), )

    
    typeName = property(__typeName.value, __typeName.set, None, 'The name of the port type. Can be any predefined type such sc_port or sc_export in SystemC or any user-defined type such as tlm_port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeDefinition uses Python identifier typeDefinition
    __typeDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), 'typeDefinition', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_116_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeDefinition', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 237, 16), )

    
    typeDefinition = property(__typeDefinition.value, __typeDefinition.set, None, 'Where the definition of the type is contained. For SystemC and SystemVerilog it is the include file containing the type definition.')

    _ElementMap.update({
        __typeName.name() : __typeName,
        __typeDefinition.name() : __typeDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_116 = CTD_ANON_116


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """The name of the port type. Can be any predefined type such sc_port or sc_export in SystemC or any user-defined type such as tlm_port."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 225, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constrained uses Python identifier constrained
    __constrained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'constrained'), 'constrained', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_117_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constrained', pyxb.binding.datatypes.boolean, unicode_default='false')
    __constrained._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 228, 32)
    __constrained._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 228, 32)
    
    constrained = property(__constrained.value, __constrained.set, None, 'Defines that the type for the port has constrainted the number of bits in the vector')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __constrained.name() : __constrained
    })
_module_typeBindings.CTD_ANON_117 = CTD_ANON_117


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of a single service type defintion"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 249, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeName uses Python identifier typeName
    __typeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeName'), 'typeName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 251, 16), )

    
    typeName = property(__typeName.value, __typeName.set, None, 'The name of the service type. Can be any predefined type such as booean or integer or any user-defined type such as addr_type or data_type.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeDefinition uses Python identifier typeDefinition
    __typeDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), 'typeDefinition', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeDefinition', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 273, 16), )

    
    typeDefinition = property(__typeDefinition.value, __typeDefinition.set, None, 'Where the definition of the type is contained if the type if not part of the language. For SystemC and SystemVerilog it is the include file containing the type definition.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 278, 16), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'list service parameters (e.g. parameters for a systemVerilog interface)')

    _ElementMap.update({
        __typeName.name() : __typeName,
        __typeDefinition.name() : __typeDefinition,
        __parameters.name() : __parameters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_118 = CTD_ANON_118


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_119 (pyxb.binding.basis.complexTypeDefinition):
    """The name of the service type. Can be any predefined type such as booean or integer or any user-defined type such as addr_type or data_type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 255, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constrained uses Python identifier constrained
    __constrained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'constrained'), 'constrained', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_119_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constrained', pyxb.binding.datatypes.boolean, unicode_default='false')
    __constrained._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 258, 32)
    __constrained._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 258, 32)
    
    constrained = property(__constrained.value, __constrained.set, None, 'Defines that the type for the port has constrainted the number of bits in the vector')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}implicit uses Python identifier implicit
    __implicit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'implicit'), 'implicit', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_119_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009implicit', pyxb.binding.datatypes.boolean, unicode_default='false')
    __implicit._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 263, 32)
    __implicit._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 263, 32)
    
    implicit = property(__implicit.value, __implicit.set, None, 'Defines that the typeName supplied for this service is implicit and a netlister should not declare this service in\na language specific top-level netlist ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __constrained.name() : __constrained,
        __implicit.name() : __implicit
    })
_module_typeBindings.CTD_ANON_119 = CTD_ANON_119


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """list service parameters (e.g. parameters for a systemVerilog interface)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 282, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameter', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 90, 4), )

    
    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.')

    _ElementMap.update({
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_120 = CTD_ANON_120


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Definition of a single wire type defintion that can relate to multiple views."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 295, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeName uses Python identifier typeName
    __typeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeName'), 'typeName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 297, 16), )

    
    typeName = property(__typeName.value, __typeName.set, None, 'The name of the logic type. Examples could be std_logic, std_ulogic, std_logic_vector, sc_logic, ...')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}typeDefinition uses Python identifier typeDefinition
    __typeDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), 'typeDefinition', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009typeDefinition', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 313, 16), )

    
    typeDefinition = property(__typeDefinition.value, __typeDefinition.set, None, 'Where the definition of the type is contained. For std_logic, this is contained in IEEE.std_logic_1164.all. For sc_logic, this is contained in systemc.h. For VHDL this is the library and package as defined by the "used" statement. For SystemC and SystemVerilog it is the include file required. For verilog this is not needed.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}viewNameRef uses Python identifier viewNameRef
    __viewNameRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewNameRef'), 'viewNameRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009viewNameRef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 318, 16), )

    
    viewNameRef = property(__viewNameRef.value, __viewNameRef.set, None, 'A reference to a view name in the file for which this type applies.')

    _ElementMap.update({
        __typeName.name() : __typeName,
        __typeDefinition.name() : __typeDefinition,
        __viewNameRef.name() : __viewNameRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_121 = CTD_ANON_121


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """The name of the logic type. Examples could be std_logic, std_ulogic, std_logic_vector, sc_logic, ..."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 301, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constrained uses Python identifier constrained
    __constrained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'constrained'), 'constrained', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constrained', pyxb.binding.datatypes.boolean, unicode_default='false')
    __constrained._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 304, 32)
    __constrained._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 304, 32)
    
    constrained = property(__constrained.value, __constrained.set, None, 'Defines that the type for the port has constrainted the number of bits in the vector')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __constrained.name() : __constrained
    })
_module_typeBindings.CTD_ANON_122 = CTD_ANON_122


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """The group of type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 330, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}serviceTypeDef uses Python identifier serviceTypeDef
    __serviceTypeDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDef'), 'serviceTypeDef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009serviceTypeDef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 245, 4), )

    
    serviceTypeDef = property(__serviceTypeDef.value, __serviceTypeDef.set, None, 'Definition of a single service type defintion')

    _ElementMap.update({
        __serviceTypeDef.name() : __serviceTypeDef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_123 = CTD_ANON_123


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (pyxb.binding.basis.complexTypeDefinition):
    """The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 340, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wireTypeDef uses Python identifier wireTypeDef
    __wireTypeDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDef'), 'wireTypeDef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_124_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009wireTypeDef', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 291, 4), )

    
    wireTypeDef = property(__wireTypeDef.value, __wireTypeDef.set, None, 'Definition of a single wire type defintion that can relate to multiple views.')

    _ElementMap.update({
        __wireTypeDef.name() : __wireTypeDef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_124 = CTD_ANON_124


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType with content type ELEMENT_ONLY
class portWireType (pyxb.binding.basis.complexTypeDefinition):
    """Wire port type for a component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portWireType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 360, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}constraintSets uses Python identifier constraintSets
    __constraintSets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'constraintSets'), 'constraintSets', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009constraintSets', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 281, 4), )

    
    constraintSets = property(__constraintSets.value, __constraintSets.set, None, 'List of constraintSet elements for a component port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vector', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4), )

    
    vector = property(__vector.value, __vector.set, None, 'Definition of the indecies for a vectored port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wireTypeDefs uses Python identifier wireTypeDefs
    __wireTypeDefs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDefs'), 'wireTypeDefs', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009wireTypeDefs', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 336, 4), )

    
    wireTypeDefs = property(__wireTypeDefs.value, __wireTypeDefs.set, None, 'The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009direction', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 365, 12), )

    
    direction = property(__direction.value, __direction.set, None, "The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports.\nA value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driver uses Python identifier driver
    __driver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'driver'), 'driver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009driver', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 171, 2), )

    
    driver = property(__driver.value, __driver.set, None, 'Wire port driver element.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}allLogicalDirectionsAllowed uses Python identifier allLogicalDirectionsAllowed
    __allLogicalDirectionsAllowed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'allLogicalDirectionsAllowed'), 'allLogicalDirectionsAllowed', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portWireType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009allLogicalDirectionsAllowed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __allLogicalDirectionsAllowed._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 381, 8)
    __allLogicalDirectionsAllowed._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 381, 8)
    
    allLogicalDirectionsAllowed = property(__allLogicalDirectionsAllowed.value, __allLogicalDirectionsAllowed.set, None, 'True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.              ')

    _ElementMap.update({
        __constraintSets.name() : __constraintSets,
        __vector.name() : __vector,
        __wireTypeDefs.name() : __wireTypeDefs,
        __direction.name() : __direction,
        __driver.name() : __driver
    })
    _AttributeMap.update({
        __allLogicalDirectionsAllowed.name() : __allLogicalDirectionsAllowed
    })
_module_typeBindings.portWireType = portWireType
Namespace.addCategoryObject('typeBinding', 'portWireType', portWireType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portTransactionalType with content type ELEMENT_ONLY
class portTransactionalType (pyxb.binding.basis.complexTypeDefinition):
    """Transactional port type."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portTransactionalType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 387, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transTypeDef uses Python identifier transTypeDef
    __transTypeDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transTypeDef'), 'transTypeDef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portTransactionalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009transTypeDef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 215, 4), )

    
    transTypeDef = property(__transTypeDef.value, __transTypeDef.set, None, 'Definition of a single transactional type defintion')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portTransactionalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009service', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 397, 12), )

    
    service = property(__service.value, __service.set, None, 'Describes the interface protocol.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}connection uses Python identifier connection
    __connection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'connection'), 'connection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portTransactionalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009connection', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 417, 12), )

    
    connection = property(__connection.value, __connection.set, None, 'Bounds number of legal connections.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}allLogicalInitiativesAllowed uses Python identifier allLogicalInitiativesAllowed
    __allLogicalInitiativesAllowed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'allLogicalInitiativesAllowed'), 'allLogicalInitiativesAllowed', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portTransactionalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009allLogicalInitiativesAllowed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __allLogicalInitiativesAllowed._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 437, 8)
    __allLogicalInitiativesAllowed._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 437, 8)
    
    allLogicalInitiativesAllowed = property(__allLogicalInitiativesAllowed.value, __allLogicalInitiativesAllowed.set, None, 'True if logical ports with different initiatives from the physical port initiative may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all initiatives value to be mapped onto the physical port. Also ignored for "both" ports, since any logical port may be mapped to a physical "both" port.              ')

    _ElementMap.update({
        __transTypeDef.name() : __transTypeDef,
        __service.name() : __service,
        __connection.name() : __connection
    })
    _AttributeMap.update({
        __allLogicalInitiativesAllowed.name() : __allLogicalInitiativesAllowed
    })
_module_typeBindings.portTransactionalType = portTransactionalType
Namespace.addCategoryObject('typeBinding', 'portTransactionalType', portTransactionalType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Describes the interface protocol."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 401, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}initiative uses Python identifier initiative
    __initiative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'initiative'), 'initiative', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009initiative', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 191, 4), )

    
    initiative = property(__initiative.value, __initiative.set, None, 'If this element is present, the type of access is restricted to the specified value.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}serviceTypeDefs uses Python identifier serviceTypeDefs
    __serviceTypeDefs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDefs'), 'serviceTypeDefs', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009serviceTypeDefs', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 326, 4), )

    
    serviceTypeDefs = property(__serviceTypeDefs.value, __serviceTypeDefs.set, None, 'The group of type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __initiative.name() : __initiative,
        __serviceTypeDefs.name() : __serviceTypeDefs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_125 = CTD_ANON_125


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Bounds number of legal connections."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 421, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maxConnections uses Python identifier maxConnections
    __maxConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxConnections'), 'maxConnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maxConnections', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 423, 24), )

    
    maxConnections = property(__maxConnections.value, __maxConnections.set, None, 'Indicates the maximum number of connections this port supports. If this element is not present or set to 0 it implies an unbounded number of allowed connections.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minConnections uses Python identifier minConnections
    __minConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minConnections'), 'minConnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minConnections', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 428, 24), )

    
    minConnections = property(__minConnections.value, __minConnections.set, None, 'Indicates the minimum number of connections this port supports. If this element is not present, the minimum number of allowed connections is 1.')

    _ElementMap.update({
        __maxConnections.name() : __maxConnections,
        __minConnections.name() : __minConnections
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_126 = CTD_ANON_126


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portAccessType with content type ELEMENT_ONLY
class portAccessType_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portAccessType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portAccessType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 463, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portAccessType uses Python identifier portAccessType
    __portAccessType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portAccessType'), 'portAccessType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portAccessType__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portAccessType', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 204, 4), )

    
    portAccessType = property(__portAccessType.value, __portAccessType.set, None, "Indicates how a netlister accesses a port. 'ref' means accessed by reference (default) and 'ptr' means accessed by pointer.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portAccessHandle uses Python identifier portAccessHandle
    __portAccessHandle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'portAccessHandle'), 'portAccessHandle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portAccessType__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portAccessHandle', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 350, 4), )

    
    portAccessHandle = property(__portAccessHandle.value, __portAccessHandle.set, None, 'If present, is a method to be used to get hold of the object representing the port. This is typically a function call or array element reference in systemC.')

    _ElementMap.update({
        __portAccessType.name() : __portAccessType,
        __portAccessHandle.name() : __portAccessHandle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.portAccessType_ = portAccessType_
Namespace.addCategoryObject('typeBinding', 'portAccessType', portAccessType_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a driven one-shot port."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 97, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}singleShotOffset uses Python identifier singleShotOffset
    __singleShotOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset'), 'singleShotOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009singleShotOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 99, 8), )

    
    singleShotOffset = property(__singleShotOffset.value, __singleShotOffset.set, None, 'Time in nanoseconds until start of one-shot.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}singleShotValue uses Python identifier singleShotValue
    __singleShotValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue'), 'singleShotValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009singleShotValue', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 111, 8), )

    
    singleShotValue = property(__singleShotValue.value, __singleShotValue.set, None, 'Value of port after first  edge of one-shot.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}singleShotDuration uses Python identifier singleShotDuration
    __singleShotDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration'), 'singleShotDuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009singleShotDuration', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 123, 8), )

    
    singleShotDuration = property(__singleShotDuration.value, __singleShotDuration.set, None, 'Duration in nanoseconds of the one shot.')

    _ElementMap.update({
        __singleShotOffset.name() : __singleShotOffset,
        __singleShotValue.name() : __singleShotValue,
        __singleShotDuration.name() : __singleShotDuration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_127 = CTD_ANON_127


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driverType with content type ELEMENT_ONLY
class driverType (pyxb.binding.basis.complexTypeDefinition):
    """Wire port driver type."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'driverType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 161, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), 'defaultValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_driverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009defaultValue', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 65, 2), )

    
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, 'Default value for a wire port.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriver uses Python identifier clockDriver
    __clockDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), 'clockDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_driverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockDriver', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 77, 2), )

    
    clockDriver = property(__clockDriver.value, __clockDriver.set, None, 'Describes a driven clock port. ')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}singleShotDriver uses Python identifier singleShotDriver
    __singleShotDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), 'singleShotDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_driverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009singleShotDriver', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 93, 2), )

    
    singleShotDriver = property(__singleShotDriver.value, __singleShotDriver.set, None, 'Describes a driven one-shot port.')

    _ElementMap.update({
        __defaultValue.name() : __defaultValue,
        __clockDriver.name() : __clockDriver,
        __singleShotDriver.name() : __singleShotDriver
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.driverType = driverType
Namespace.addCategoryObject('typeBinding', 'driverType', driverType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType with content type ELEMENT_ONLY
class clockDriverType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'clockDriverType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 176, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPeriod uses Python identifier clockPeriod
    __clockPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod'), 'clockPeriod', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_clockDriverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockPeriod', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 178, 6), )

    
    clockPeriod = property(__clockPeriod.value, __clockPeriod.set, None, 'Clock period in units defined by the units attribute. Default is nanoseconds.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseOffset uses Python identifier clockPulseOffset
    __clockPulseOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset'), 'clockPulseOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_clockDriverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockPulseOffset', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 191, 6), )

    
    clockPulseOffset = property(__clockPulseOffset.value, __clockPulseOffset.set, None, 'Time until first pulse. Units are defined by the units attribute. Default is nanoseconds.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseValue uses Python identifier clockPulseValue
    __clockPulseValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue'), 'clockPulseValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_clockDriverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockPulseValue', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 204, 6), )

    
    clockPulseValue = property(__clockPulseValue.value, __clockPulseValue.set, None, 'Value of port after first clock edge.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseDuration uses Python identifier clockPulseDuration
    __clockPulseDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration'), 'clockPulseDuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_clockDriverType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockPulseDuration', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 216, 6), )

    
    clockPulseDuration = property(__clockPulseDuration.value, __clockPulseDuration.set, None, 'Duration of first state in cycle. Units are defined by the units attribute. Default is nanoseconds.')

    _ElementMap.update({
        __clockPeriod.name() : __clockPeriod,
        __clockPulseOffset.name() : __clockPulseOffset,
        __clockPulseValue.name() : __clockPulseValue,
        __clockPulseDuration.name() : __clockPulseDuration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.clockDriverType = clockDriverType
Namespace.addCategoryObject('typeBinding', 'clockDriverType', clockDriverType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """All configuration information for a contained component, generator, generator chain or abstractor instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 71, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configurableElementValue uses Python identifier configurableElementValue
    __configurableElementValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValue'), 'configurableElementValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configurableElementValue', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 81, 4), )

    
    configurableElementValue = property(__configurableElementValue.value, __configurableElementValue.set, None, 'Describes the content of a configurable element. The required referenceId attribute refers to the ID attribute of the configurable element.')

    _ElementMap.update({
        __configurableElementValue.name() : __configurableElementValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_128 = CTD_ANON_128


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Describes the content of a configurable element. The required referenceId attribute refers to the ID attribute of the configurable element."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 85, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}referenceId uses Python identifier referenceId
    __referenceId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'referenceId'), 'referenceId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009referenceId', pyxb.binding.datatypes.Name, required=True)
    __referenceId._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 88, 20)
    __referenceId._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 88, 20)
    
    referenceId = property(__referenceId.value, __referenceId.set, None, 'Refers to the ID attribute of the configurable element.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __referenceId.name() : __referenceId
    })
_module_typeBindings.CTD_ANON_129 = CTD_ANON_129


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Component instance element.  The instance name is contained in the unique-value instanceName attribute."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 106, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configurableElementValues uses Python identifier configurableElementValues
    __configurableElementValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), 'configurableElementValues', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configurableElementValues', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4), )

    
    configurableElementValues = property(__configurableElementValues.value, __configurableElementValues.set, None, 'All configuration information for a contained component, generator, generator chain or abstractor instance.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceName uses Python identifier instanceName
    __instanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), 'instanceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009instanceName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 97, 4), )

    
    instanceName = property(__instanceName.value, __instanceName.set, None, 'An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentRef', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 111, 16), )

    
    componentRef = property(__componentRef.value, __componentRef.set, None, 'References a component to be found in an external library.  The four attributes define the VLNV of the referenced element.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __configurableElementValues.name() : __configurableElementValues,
        __instanceName.name() : __instanceName,
        __componentRef.name() : __componentRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_130 = CTD_ANON_130


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """Sub instances of internal components."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 125, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentInstance uses Python identifier componentInstance
    __componentInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), 'componentInstance', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentInstance', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 102, 4), )

    
    componentInstance = property(__componentInstance.value, __componentInstance.set, None, 'Component instance element.  The instance name is contained in the unique-value instanceName attribute.')

    _ElementMap.update({
        __componentInstance.name() : __componentInstance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_131 = CTD_ANON_131


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 199, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}adHocConnection uses Python identifier adHocConnection
    __adHocConnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), 'adHocConnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009adHocConnection', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 131, 4), )

    
    adHocConnection = property(__adHocConnection.value, __adHocConnection.set, None, 'Represents an ad-hoc connection between component ports.')

    _ElementMap.update({
        __adHocConnection.name() : __adHocConnection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_132 = CTD_ANON_132


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a connection between two active (not monitor) busInterfaces."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 209, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}activeInterface uses Python identifier activeInterface
    __activeInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'activeInterface'), 'activeInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009activeInterface', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 212, 16), )

    
    activeInterface = property(__activeInterface.value, __activeInterface.set, None, 'Describes one interface of the interconnection.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name of one end of the connection.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __activeInterface.name() : __activeInterface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_133 = CTD_ANON_133


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Connections between internal sub components."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 226, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interconnection uses Python identifier interconnection
    __interconnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), 'interconnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interconnection', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 205, 4), )

    
    interconnection = property(__interconnection.value, __interconnection.set, None, 'Describes a connection between two active (not monitor) busInterfaces.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}monitorInterconnection uses Python identifier monitorInterconnection
    __monitorInterconnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monitorInterconnection'), 'monitorInterconnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009monitorInterconnection', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 248, 4), )

    
    monitorInterconnection = property(__monitorInterconnection.value, __monitorInterconnection.set, None, 'Describes a connection from the interface of one component to any number of monitor interfaces in the design.\n\nAn active interface can be connected to unlimited number of monitor interfaces.')

    _ElementMap.update({
        __interconnection.name() : __interconnection,
        __monitorInterconnection.name() : __monitorInterconnection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_134 = CTD_ANON_134


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface with content type EMPTY
class interface (pyxb.binding.basis.complexTypeDefinition):
    """A representation of a component/bus interface relation; i.e. a bus interface belonging to a certain component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'interface')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 233, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_interface_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentRef', pyxb.binding.datatypes.Name, required=True)
    __componentRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 237, 8)
    __componentRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 237, 8)
    
    componentRef = property(__componentRef.value, __componentRef.set, None, 'Reference to a component instance name.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}busRef uses Python identifier busRef
    __busRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'busRef'), 'busRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_interface_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009busRef', pyxb.binding.datatypes.Name, required=True)
    __busRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 242, 8)
    __busRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 242, 8)
    
    busRef = property(__busRef.value, __busRef.set, None, 'Reference to the components  bus interface')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __componentRef.name() : __componentRef,
        __busRef.name() : __busRef
    })
_module_typeBindings.interface = interface
Namespace.addCategoryObject('typeBinding', 'interface', interface)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a connection from the interface of one component to any number of monitor interfaces in the design.

An active interface can be connected to unlimited number of monitor interfaces."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 254, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}monitoredActiveInterface uses Python identifier monitoredActiveInterface
    __monitoredActiveInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monitoredActiveInterface'), 'monitoredActiveInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009monitoredActiveInterface', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 257, 16), )

    
    monitoredActiveInterface = property(__monitoredActiveInterface.value, __monitoredActiveInterface.set, None, 'Describes an active interface of the design that all the monitors will be connected to.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name. The optional path attribute indicates the hierarchical instance name path to the component.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}monitorInterface uses Python identifier monitorInterface
    __monitorInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monitorInterface'), 'monitorInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009monitorInterface', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 264, 16), )

    
    monitorInterface = property(__monitorInterface.value, __monitorInterface.set, None, 'Describes a list of monitor interfaces that are connected to the single active interface.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name. The optional path attribute indicates the hierarchical instance name path to the component.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __monitoredActiveInterface.name() : __monitoredActiveInterface,
        __monitorInterface.name() : __monitorInterface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_135 = CTD_ANON_135


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_136 (pyxb.binding.basis.complexTypeDefinition):
    """Define the mode for the interfaces on this abstractor.

For master the first interface connects to the master, the second connects to the mirroredMaster

For slave the first interface connects to the mirroredSlave the second connects to the slave

For direct the first interface connects to the master, the second connects to the slave

For system the first interface connects to the system, the second connects to the mirroredSystem. For system the group attribute is required"""
    _TypeDefinition = abstractorModeType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 88, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is abstractorModeType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_136_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', pyxb.binding.datatypes.Name)
    __group._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 91, 28)
    __group._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 91, 28)
    
    group = property(__group.value, __group.set, None, 'Define the system group if the mode is set to system')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __group.name() : __group
    })
_module_typeBindings.CTD_ANON_136 = CTD_ANON_136


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Defines which logical bit maps to the physical left bit below"""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 165, 64)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_137 = CTD_ANON_137


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Defines which logical bit maps to the physical right bit below"""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 177, 64)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_138 = CTD_ANON_138


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates whether bit steering should be used to map this interface onto a bus of different data width.

Values are "on", "off" (defaults to "off")."""
    _TypeDefinition = bitSteeringType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 226, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is bitSteeringType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_139 = CTD_ANON_139


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (addrSpaceRefType):
    """If this master connects to an addressable bus, this element references the address space it maps to."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 341, 28)
    _ElementMap = addrSpaceRefType._ElementMap.copy()
    _AttributeMap = addrSpaceRefType._AttributeMap.copy()
    # Base type is addrSpaceRefType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009baseAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 348, 44), )

    
    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address space.')

    
    # Attribute addressSpaceRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addrSpaceRefType
    _ElementMap.update({
        __baseAddress.name() : __baseAddress
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_140 = CTD_ANON_140


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Base of an address space."""
    _TypeDefinition = scaledInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 352, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string, unicode_default='Base Address:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 356, 60)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_141 = CTD_ANON_141


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates that this is a (passive) monitor interface. All of the ports in the interface must be inputs. The type of interface to be monitored is specified with the required interfaceType attribute. The spirit:group element must be specified if monitoring a system interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 493, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_142_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4), )

    
    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interfaceMode uses Python identifier interfaceMode
    __interfaceMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'interfaceMode'), 'interfaceMode', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_142_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009interfaceMode', _module_typeBindings.STD_ANON_3, required=True)
    __interfaceMode._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 501, 20)
    __interfaceMode._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 501, 20)
    
    interfaceMode = property(__interfaceMode.value, __interfaceMode.set, None, None)

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        __interfaceMode.name() : __interfaceMode
    })
_module_typeBindings.CTD_ANON_142 = CTD_ANON_142


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_143 (pyxb.binding.basis.complexTypeDefinition):
    """Defines which logical bit maps to the physical left bit below"""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 612, 64)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_143_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_143 = CTD_ANON_143


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_144 (pyxb.binding.basis.complexTypeDefinition):
    """Defines which logical bit maps to the physical right bit below"""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 624, 64)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_144_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_144 = CTD_ANON_144


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValueTypeType with content type ELEMENT_ONLY
class nameValueTypeType (nameValuePairType):
    """Name value pair with data type information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameValueTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 65, 4)
    _ElementMap = nameValuePairType._ElementMap.copy()
    _AttributeMap = nameValuePairType._AttributeMap.copy()
    # Base type is nameValuePairType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element value_ ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dataType'), 'dataType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValueTypeType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dataType', pyxb.binding.datatypes.string)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 71, 16)
    __dataType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 71, 16)
    
    dataType = property(__dataType.value, __dataType.set, None, 'The data type of the argument as pertains to the language. Example: "int", "double", "char *".')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usageType uses Python identifier usageType
    __usageType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'usageType'), 'usageType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_nameValueTypeType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usageType', _module_typeBindings.STD_ANON_4, unicode_default='nontyped')
    __usageType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 76, 16)
    __usageType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 76, 16)
    
    usageType = property(__usageType.value, __usageType.set, None, "Indicates the type of the model parameter. Legal values are defined in the attribute enumeration list. Default value is 'nontyped'.")

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __dataType.name() : __dataType,
        __usageType.name() : __usageType
    })
_module_typeBindings.nameValueTypeType = nameValueTypeType
Namespace.addCategoryObject('typeBinding', 'nameValueTypeType', nameValueTypeType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_145 (pyxb.binding.basis.complexTypeDefinition):
    """The value of the parameter."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 185, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_145_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_145 = CTD_ANON_145


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_146 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a technology library cell in library independent fashion, based on specification of a cell function and strength."""
    _TypeDefinition = cellFunctionValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 172, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is cellFunctionValueType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellStrength uses Python identifier cellStrength
    __cellStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'cellStrength'), 'cellStrength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_146_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellStrength', _module_typeBindings.cellStrengthValueType)
    __cellStrength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 142, 4)
    __cellStrength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 175, 32)
    
    cellStrength = property(__cellStrength.value, __cellStrength.set, None, 'Indicates the desired strength of the specified cell.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __cellStrength.name() : __cellStrength
    })
_module_typeBindings.CTD_ANON_146 = CTD_ANON_146


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_147 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a technology library cell in library independent fashion, based on specification of a cell class and strength."""
    _TypeDefinition = cellClassValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 184, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is cellClassValueType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}cellStrength uses Python identifier cellStrength
    __cellStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'cellStrength'), 'cellStrength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_147_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009cellStrength', _module_typeBindings.cellStrengthValueType)
    __cellStrength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 142, 4)
    __cellStrength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 187, 32)
    
    cellStrength = property(__cellStrength.value, __cellStrength.set, None, 'Indicates the desired strength of the specified cell.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __cellStrength.name() : __cellStrength
    })
_module_typeBindings.CTD_ANON_147 = CTD_ANON_147


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_148 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint."""
    _TypeDefinition = delayPercentageType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 199, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is delayPercentageType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockEdge uses Python identifier clockEdge
    __clockEdge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'clockEdge'), 'clockEdge', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_148_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockEdge', _module_typeBindings.edgeValueType, unicode_default='rise')
    __clockEdge._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 147, 4)
    __clockEdge._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 202, 20)
    
    clockEdge = property(__clockEdge.value, __clockEdge.set, None, 'Indicates the clock edge that a timing constraint is relative to.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}delayType uses Python identifier delayType
    __delayType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'delayType'), 'delayType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_148_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009delayType', _module_typeBindings.delayValueType)
    __delayType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 152, 4)
    __delayType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 203, 20)
    
    delayType = property(__delayType.value, __delayType.set, None, 'Indicates the type of delay in a timing constraint - minimum or maximum.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockName uses Python identifier clockName
    __clockName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'clockName'), 'clockName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_148_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockName', _module_typeBindings.portName, required=True)
    __clockName._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 204, 20)
    __clockName._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 204, 20)
    
    clockName = property(__clockName.value, __clockName.set, None, 'Indicates the name of the clock to which this constraint applies.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __clockEdge.name() : __clockEdge,
        __delayType.name() : __delayType,
        __clockName.name() : __clockName
    })
_module_typeBindings.CTD_ANON_148 = CTD_ANON_148


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_149 (pyxb.binding.basis.complexTypeDefinition):
    """Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file. """
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 76, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_149_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_149 = CTD_ANON_149


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_150 (pyxb.binding.basis.complexTypeDefinition):
    """Command used to build this file."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 134, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_150_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_150 = CTD_ANON_150


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_151 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 146, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}append uses Python identifier append_
    __append = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'append'), 'append_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_151_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009append', pyxb.binding.datatypes.boolean)
    __append._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 149, 44)
    __append._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 149, 44)
    
    append_ = property(__append.value, __append.set, None, '"true" indicates that the flags shall be appended to any existing flags, "false"indicates these flags will replace any existing default flags.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __append.name() : __append
    })
_module_typeBindings.CTD_ANON_151 = CTD_ANON_151


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_152 (pyxb.binding.basis.complexTypeDefinition):
    """If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 163, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 146, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 155, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='int')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 148, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_152_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_152 = CTD_ANON_152


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_153 (pyxb.binding.basis.complexTypeDefinition):
    """Pathname to the file that is derived (built) from the source file."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 175, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_153_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_153 = CTD_ANON_153


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_154 (pyxb.binding.basis.complexTypeDefinition):
    """Name of the executable image file."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 227, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_154 = CTD_ANON_154


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_155 (pyxb.binding.basis.complexTypeDefinition):
    """Default command used to build files of the specified fileType. """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 260, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_155_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_155 = CTD_ANON_155


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_156 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building files of this type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 272, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_156_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_156 = CTD_ANON_156


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_157 (pyxb.binding.basis.complexTypeDefinition):
    """If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.

If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 286, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 146, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 155, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='int')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 148, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_157_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_157 = CTD_ANON_157


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_158 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 299, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_158_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_158 = CTD_ANON_158


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_159 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 308, 32)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_159_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_159 = CTD_ANON_159


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_160 (pyxb.binding.basis.complexTypeDefinition):
    """Linker command file name."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 326, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_160_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_160 = CTD_ANON_160


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_161 (pyxb.binding.basis.complexTypeDefinition):
    """The command line switch to specify the linker command file."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 338, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_161_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_161 = CTD_ANON_161


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_162 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies whether to generate and enable the linker command file."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 350, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 146, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 155, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='int')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 148, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_162_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_162 = CTD_ANON_162


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_163 (pyxb.binding.basis.complexTypeDefinition):
    """Default command used to build files of the specified fileType. """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 426, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_163_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_163 = CTD_ANON_163


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_164 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building files of this type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 438, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='string')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 191, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 200, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 193, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_164_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_164 = CTD_ANON_164


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_165 (pyxb.binding.basis.complexTypeDefinition):
    """If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.

If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 452, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 146, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 155, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='int')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 148, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_165_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_165 = CTD_ANON_165


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_166 (nameValuePairType):
    """Arguments passed in when the function is called. Arguments are passed in order.

This is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name element and its value is in the spirit:value element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 510, 28)
    _ElementMap = nameValuePairType._ElementMap.copy()
    _AttributeMap = nameValuePairType._AttributeMap.copy()
    # Base type is nameValuePairType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element value_ ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}nameValuePairType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dataType'), 'dataType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_166_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dataType', _module_typeBindings.dataTypeType, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 513, 40)
    __dataType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 513, 40)
    
    dataType = property(__dataType.value, __dataType.set, None, 'The data type of the argument as pertains to the language. Example: "int", "double", "char *".')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __dataType.name() : __dataType
    })
_module_typeBindings.CTD_ANON_166 = CTD_ANON_166


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_167 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies if the SW function is enabled. If not present the function is always enabled."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 526, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 146, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 155, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='int')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 148, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_167_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_167 = CTD_ANON_167


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_168 (pyxb.binding.basis.complexTypeDefinition):
    """Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.
    """
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 545, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_168 = CTD_ANON_168


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_169 (generatorType):
    """Specifies a set of generators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 119, 4)
    _ElementMap = generatorType._ElementMap.copy()
    _AttributeMap = generatorType._AttributeMap.copy()
    # Base type is generatorType
    
    # Element parameters ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element apiType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}apiType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element transportMethods ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transportMethods) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element generatorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Attribute hidden inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_169 = CTD_ANON_169


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_170 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 144, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_170_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 146, 8), )

    
    name = property(__name.value, __name.set, None, 'Specifies a generator group name or a generator chain group name to be selected for inclusion in the generator chain.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}multipleGroupSelectionOperator uses Python identifier multipleGroupSelectionOperator
    __multipleGroupSelectionOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'multipleGroupSelectionOperator'), 'multipleGroupSelectionOperator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_170_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009multipleGroupSelectionOperator', _module_typeBindings.STD_ANON_8, unicode_default='or')
    __multipleGroupSelectionOperator._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 152, 6)
    __multipleGroupSelectionOperator._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 152, 6)
    
    multipleGroupSelectionOperator = property(__multipleGroupSelectionOperator.value, __multipleGroupSelectionOperator.set, None, 'Specifies the OR or AND selection operator if there is more than one group name.')

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({
        __multipleGroupSelectionOperator.name() : __multipleGroupSelectionOperator
    })
_module_typeBindings.CTD_ANON_170 = CTD_ANON_170


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceGeneratorType with content type ELEMENT_ONLY
class instanceGeneratorType (generatorType):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceGeneratorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'instanceGeneratorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 175, 2)
    _ElementMap = generatorType._ElementMap.copy()
    _AttributeMap = generatorType._AttributeMap.copy()
    # Base type is generatorType
    
    # Element parameters ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_instanceGeneratorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009group', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10), )

    
    group = property(__group.value, __group.set, None, 'An identifier to specify the generator group. This is used by generator chains for selecting which generators to run.')

    
    # Element apiType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}apiType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element transportMethods ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transportMethods) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element generatorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'scope'), 'scope', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_instanceGeneratorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009scope', _module_typeBindings.STD_ANON_9, unicode_default='instance')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 185, 8)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 185, 8)
    
    scope = property(__scope.value, __scope.set, None, 'The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.')

    
    # Attribute hidden inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        __scope.name() : __scope
    })
_module_typeBindings.instanceGeneratorType = instanceGeneratorType
Namespace.addCategoryObject('typeBinding', 'instanceGeneratorType', instanceGeneratorType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBankType with content type ELEMENT_ONLY
class addressBankType (pyxb.binding.basis.complexTypeDefinition):
    """Top level bank the specify an address"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressBankType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 136, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009baseAddress', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4), )

    
    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressBlock', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16), )

    
    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'An address block within the bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bank', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16), )

    
    bank = property(__bank.value, __bank.set, None, 'A nested bank of blocks within a bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009subspaceMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16), )

    
    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'A subspace map within the bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usage', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12), )

    
    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankAlignment uses Python identifier bankAlignment
    __bankAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bankAlignment'), 'bankAlignment', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bankAlignment', _module_typeBindings.bankAlignmentType, required=True)
    __bankAlignment._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 121, 4)
    __bankAlignment._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 145, 8)
    
    bankAlignment = property(__bankAlignment.value, __bankAlignment.set, None, "Describes whether this bank's blocks are aligned in 'parallel' or 'serial'.")

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __baseAddress.name() : __baseAddress,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank,
        __subspaceMap.name() : __subspaceMap,
        __usage.name() : __usage
    })
    _AttributeMap.update({
        __bankAlignment.name() : __bankAlignment
    })
_module_typeBindings.addressBankType = addressBankType
Namespace.addCategoryObject('typeBinding', 'addressBankType', addressBankType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankedBankType with content type ELEMENT_ONLY
class bankedBankType (pyxb.binding.basis.complexTypeDefinition):
    """Banks nested inside a bank do not specify address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedBankType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 171, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009parameters', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4), )

    
    parameters = property(__parameters.value, __parameters.set, None, 'A collection of parameters.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009volatile', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), )

    
    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009access', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4), )

    
    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.")

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009addressBlock', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16), )

    
    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'An address block within the bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bank', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16), )

    
    bank = property(__bank.value, __bank.set, None, 'A nested bank of blocks within a bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009subspaceMap', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16), )

    
    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'A subspace map within the bank.  No address information is supplied.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usage', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12), )

    
    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bankAlignment uses Python identifier bankAlignment
    __bankAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bankAlignment'), 'bankAlignment', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bankAlignment', _module_typeBindings.bankAlignmentType, required=True)
    __bankAlignment._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 121, 4)
    __bankAlignment._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 179, 8)
    
    bankAlignment = property(__bankAlignment.value, __bankAlignment.set, None, "Describes whether this bank's blocks are aligned in 'parallel' or 'serial'.")

    _ElementMap.update({
        __parameters.name() : __parameters,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank,
        __subspaceMap.name() : __subspaceMap,
        __usage.name() : __usage
    })
    _AttributeMap.update({
        __bankAlignment.name() : __bankAlignment
    })
_module_typeBindings.bankedBankType = bankedBankType
Namespace.addCategoryObject('typeBinding', 'bankedBankType', bankedBankType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_171 (pyxb.binding.basis.complexTypeDefinition):
    """The bit width of a row in the address block. The range and the width are related by the following formulas:
          number_of_bits_in_block = spirit:addressUnitBits * spirit:range
          number_of_rows_in_block = number_of_bits_in_block / spirit:width
          """
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 554, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_171_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_171 = CTD_ANON_171


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_172 (pyxb.binding.basis.complexTypeDefinition):
    """Enumerates specific values that can be assigned to the bit field. The name of this enumerated value. This may be used as a token in generating code."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 680, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009value', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 683, 28), )

    
    value_ = property(__value.value, __value.set, None, 'Enumerated bit field value.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}usage uses Python identifier usage
    __usage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_172_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009usage', _module_typeBindings.STD_ANON_12, unicode_default='read-write')
    __usage._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 690, 24)
    __usage._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 690, 24)
    
    usage = property(__usage.value, __usage.set, None, "Usage for the enumeration. 'read' for a software read access. 'write' for a software write access. 'read-write' for a software read or write access.")

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __value.name() : __value
    })
    _AttributeMap.update({
        __usage.name() : __usage
    })
_module_typeBindings.CTD_ANON_172 = CTD_ANON_172


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_173 (pyxb.binding.basis.complexTypeDefinition):
    """Can the field be tested with an automated register test routine. The presumed value is true if not specified."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 768, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}testConstraint uses Python identifier testConstraint
    __testConstraint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'testConstraint'), 'testConstraint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_173_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009testConstraint', _module_typeBindings.STD_ANON_15, unicode_default='unconstrained')
    __testConstraint._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 771, 28)
    __testConstraint._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 771, 28)
    
    testConstraint = property(__testConstraint.value, __testConstraint.set, None, "Constraint for an automated register test routine. 'unconstrained' (default) means may read and write all legal values. 'restore' means may read and write legal values but the value must be restored to the initially read value before accessing another register. 'writeAsRead' has limitations on testability where only the value read before a write may be written to the field. 'readOnly' has limitations on testability where values may only be read from the field.")

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __testConstraint.name() : __testConstraint
    })
_module_typeBindings.CTD_ANON_173 = CTD_ANON_173


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_174 (pyxb.binding.basis.complexTypeDefinition):
    """Width of the field in bits."""
    _TypeDefinition = pyxb.binding.datatypes.positiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 875, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.positiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_174_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_174 = CTD_ANON_174


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_175 (pyxb.binding.basis.complexTypeDefinition):
    """Width of the register in bits."""
    _TypeDefinition = pyxb.binding.datatypes.positiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 940, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.positiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_175_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_175 = CTD_ANON_175


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_176 (pyxb.binding.basis.complexTypeDefinition):
    """The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. """
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 87, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_176_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_176 = CTD_ANON_176


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_177 (pyxb.binding.basis.complexTypeDefinition):
    """The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. """
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 99, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_177_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_177 = CTD_ANON_177


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portType with content type ELEMENT_ONLY
class portType (portDeclarationType):
    """A port description, giving a name and an access type for high level ports. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'portType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 140, 4)
    _ElementMap = portDeclarationType._ElementMap.copy()
    _AttributeMap = portDeclarationType._AttributeMap.copy()
    # Base type is portDeclarationType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_portType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009vendorExtensions', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4), )

    
    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')

    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element wire ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wire) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element transactional ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactional) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element access ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.portType = portType
Namespace.addCategoryObject('typeBinding', 'portType', portType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorPortWireType with content type ELEMENT_ONLY
class abstractorPortWireType (portWireType):
    """Wire port type for an abstractor."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorPortWireType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 443, 4)
    _ElementMap = portWireType._ElementMap.copy()
    _AttributeMap = portWireType._AttributeMap.copy()
    # Base type is portWireType
    
    # Element vector ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vector) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType
    
    # Element wireTypeDefs ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wireTypeDefs) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType
    
    # Element direction ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}direction) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType
    
    # Element driver ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driver) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType
    
    # Attribute allLogicalDirectionsAllowed inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portWireType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorPortWireType = abstractorPortWireType
Namespace.addCategoryObject('typeBinding', 'abstractorPortWireType', abstractorPortWireType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_178 (clockDriverType):
    """Describes a driven clock port. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 81, 4)
    _ElementMap = clockDriverType._ElementMap.copy()
    _AttributeMap = clockDriverType._AttributeMap.copy()
    # Base type is clockDriverType
    
    # Element clockPeriod ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPeriod) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseOffset ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseOffset) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseValue ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseValue) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseDuration ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseDuration) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockName uses Python identifier clockName
    __clockName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'clockName'), 'clockName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_178_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockName', pyxb.binding.datatypes.string)
    __clockName._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 84, 10)
    __clockName._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 84, 10)
    
    clockName = property(__clockName.value, __clockName.set, None, 'Indicates the name of the cllock. If not specified the name is assumed to be the name of the containing port. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __clockName.name() : __clockName
    })
_module_typeBindings.CTD_ANON_178 = CTD_ANON_178


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_179 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected"""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 142, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}driverType uses Python identifier driverType
    __driverType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'driverType'), 'driverType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_179_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009driverType', _module_typeBindings.STD_ANON_20, unicode_default='any')
    __driverType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 145, 10)
    __driverType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 145, 10)
    
    driverType = property(__driverType.value, __driverType.set, None, 'Defines the type of driver that is required. The default is any type of driver. The 2 other options are a clock type driver or a singleshot type driver.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __driverType.name() : __driverType
    })
_module_typeBindings.CTD_ANON_179 = CTD_ANON_179


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_180 (clockDriverType):
    """Describes a clock not directly associated with an input port. The clockSource attribute can be used on these clocks to indicate the actual clock source (e.g. an output port of a clock generator cell)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 235, 4)
    _ElementMap = clockDriverType._ElementMap.copy()
    _AttributeMap = clockDriverType._AttributeMap.copy()
    # Base type is clockDriverType
    
    # Element clockPeriod ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPeriod) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseOffset ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseOffset) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseValue ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseValue) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Element clockPulseDuration ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockPulseDuration) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockDriverType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockName uses Python identifier clockName
    __clockName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'clockName'), 'clockName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_180_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockName', pyxb.binding.datatypes.Name, required=True)
    __clockName._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 238, 10)
    __clockName._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 238, 10)
    
    clockName = property(__clockName.value, __clockName.set, None, 'Indicates the name of the clock.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}clockSource uses Python identifier clockSource
    __clockSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'clockSource'), 'clockSource', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_180_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009clockSource', pyxb.binding.datatypes.string)
    __clockSource._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 243, 10)
    __clockSource._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 243, 10)
    
    clockSource = property(__clockSource.value, __clockSource.set, None, 'Indicates the name of the actual clock source (e.g. an output pin of a clock generator cell).')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __clockName.name() : __clockName,
        __clockSource.name() : __clockSource
    })
_module_typeBindings.CTD_ANON_180 = CTD_ANON_180


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_181 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a reference to a port on a component contained within the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 142, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_181_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009componentRef', pyxb.binding.datatypes.Name, required=True)
    __componentRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 143, 24)
    __componentRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 143, 24)
    
    componentRef = property(__componentRef.value, __componentRef.set, None, 'A reference to the instanceName element of a component in this design.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portRef uses Python identifier portRef
    __portRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'portRef'), 'portRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_181_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portRef', _module_typeBindings.portName, required=True)
    __portRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 148, 24)
    __portRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 148, 24)
    
    portRef = property(__portRef.value, __portRef.set, None, 'A port on the on the referenced component from componentRef.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_181_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', pyxb.binding.datatypes.nonNegativeInteger)
    __left._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 153, 24)
    __left._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 153, 24)
    
    left = property(__left.value, __left.set, None, 'Left index of a vector.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_181_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', pyxb.binding.datatypes.nonNegativeInteger)
    __right._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 158, 24)
    __right._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 158, 24)
    
    right = property(__right.value, __right.set, None, 'Right index of a vector.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __componentRef.name() : __componentRef,
        __portRef.name() : __portRef,
        __left.name() : __left,
        __right.name() : __right
    })
_module_typeBindings.CTD_ANON_181 = CTD_ANON_181


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_182 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a reference to a port on the component containing this design. The portRef attribute indicates the name of the port in the containing component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 169, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portRef uses Python identifier portRef
    __portRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'portRef'), 'portRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_182_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portRef', _module_typeBindings.portName, required=True)
    __portRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 170, 24)
    __portRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 170, 24)
    
    portRef = property(__portRef.value, __portRef.set, None, 'A port on the top level component.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_182_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009left', pyxb.binding.datatypes.nonNegativeInteger)
    __left._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 175, 24)
    __left._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 175, 24)
    
    left = property(__left.value, __left.set, None, 'Left index of a vector.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_182_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009right', pyxb.binding.datatypes.nonNegativeInteger)
    __right._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 180, 24)
    __right._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 180, 24)
    
    right = property(__right.value, __right.set, None, 'Right index of a vector.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __portRef.name() : __portRef,
        __left.name() : __left,
        __right.name() : __right
    })
_module_typeBindings.CTD_ANON_182 = CTD_ANON_182


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}hierInterface with content type EMPTY
class hierInterface (interface):
    """Hierarchical reference to an interface"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hierInterface')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 274, 4)
    _ElementMap = interface._ElementMap.copy()
    _AttributeMap = interface._AttributeMap.copy()
    # Base type is interface
    
    # Attribute componentRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface
    
    # Attribute busRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}interface
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}path uses Python identifier path
    __path = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'path'), 'path', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_hierInterface_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009path', _module_typeBindings.instancePath)
    __path._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 280, 16)
    __path._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 280, 16)
    
    path = property(__path.value, __path.set, None, 'A decending hierarchical (slash separated - example x/y/z) path to the component instance containing the specified component instance in componentRef. If not specified the componentRef instance shall exist in the current design. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __path.name() : __path
    })
_module_typeBindings.hierInterface = hierInterface
Namespace.addCategoryObject('typeBinding', 'hierInterface', hierInterface)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_183 (pyxb.binding.basis.complexTypeDefinition):
    """Contains the name and value of a port on the component, the value indicates the logic value which this port must take to effect the remapping. The portMapRef attribute stores the name of the port which takes that value."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 300, 44)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portNameRef uses Python identifier portNameRef
    __portNameRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'portNameRef'), 'portNameRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_183_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portNameRef', _module_typeBindings.portName, required=True)
    __portNameRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 303, 56)
    __portNameRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 303, 56)
    
    portNameRef = property(__portNameRef.value, __portNameRef.set, None, "This attribute identifies a signal on the component which affects the component's memory layout ")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portIndex uses Python identifier portIndex
    __portIndex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'portIndex'), 'portIndex', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_183_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009portIndex', pyxb.binding.datatypes.nonNegativeInteger)
    __portIndex._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 308, 56)
    __portIndex._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 308, 56)
    
    portIndex = property(__portIndex.value, __portIndex.set, None, 'Index for a vectored type port. Must be a number between left and right for the port.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __portNameRef.name() : __portNameRef,
        __portIndex.name() : __portIndex
    })
_module_typeBindings.CTD_ANON_183 = CTD_ANON_183


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_184 (pyxb.binding.basis.complexTypeDefinition):
    """Base of an address block, expressed as the number of bitsInLAU from the containing busInterface. The state attribute indicates the name of the remap state for which this address is valid."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 441, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string, unicode_default='Base Address:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 445, 52)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009state', pyxb.binding.datatypes.string)
    __state._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 446, 52)
    __state._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 446, 52)
    
    state = property(__state.value, __state.set, None, 'Name of the state in which this remapped address range is valid')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_184_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __state.name() : __state,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_184 = CTD_ANON_184


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_185 (instanceGeneratorType):
    """Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 129, 4)
    _ElementMap = instanceGeneratorType._ElementMap.copy()
    _AttributeMap = instanceGeneratorType._AttributeMap.copy()
    # Base type is instanceGeneratorType
    
    # Element parameters ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}parameters) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element group ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}group) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceGeneratorType
    
    # Element apiType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}apiType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element transportMethods ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transportMethods) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Element generatorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    
    # Attribute scope inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}instanceGeneratorType
    
    # Attribute hidden inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}generatorType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_185 = CTD_ANON_185


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_186 (pyxb.binding.basis.complexTypeDefinition):
    """Address offset of the segment within the containing address space."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 364, 56)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_186_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_186 = CTD_ANON_186


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_187 (pyxb.binding.basis.complexTypeDefinition):
    """Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 458, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string, unicode_default='Base Address:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 462, 20)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_187_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_187 = CTD_ANON_187


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_188 (pyxb.binding.basis.complexTypeDefinition):
    """The minimum legal value that may be written to a field"""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 810, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_188_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_188 = CTD_ANON_188


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_189 (pyxb.binding.basis.complexTypeDefinition):
    """The maximum legal value that may be written to a field"""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 822, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_189_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_189 = CTD_ANON_189


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_190 (pyxb.binding.basis.complexTypeDefinition):
    """The value itself."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 960, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_190_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_190 = CTD_ANON_190


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_191 (pyxb.binding.basis.complexTypeDefinition):
    """Mask to be anded with the value before comparing to the reset value."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 972, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_191_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_191 = CTD_ANON_191


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_192 (pyxb.binding.basis.complexTypeDefinition):
    """The value itself."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1012, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_192_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_192 = CTD_ANON_192


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_193 (pyxb.binding.basis.complexTypeDefinition):
    """Mask to be anded with the value before comparing to the reset value."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1024, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_193_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_193 = CTD_ANON_193


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}abstractorPortType with content type ELEMENT_ONLY
class abstractorPortType (portType):
    """A port description, giving a name and an access type for high level ports. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abstractorPortType')
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 152, 4)
    _ElementMap = portType._ElementMap.copy()
    _AttributeMap = portType._AttributeMap.copy()
    # Base type is portType
    
    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portType
    
    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element displayName ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element description ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element transactional ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}transactional) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element access ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}access) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}portDeclarationType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}wire uses Python identifier wire
    __wire_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wire'), 'wire', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_abstractorPortType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009wire', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 165, 28), )

    
    wire = property(__wire_.value, __wire_.set, None, 'Defines a port whose type resolves to simple bits.')

    _ElementMap.update({
        __wire_.name() : __wire_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.abstractorPortType = abstractorPortType
Namespace.addCategoryObject('typeBinding', 'abstractorPortType', abstractorPortType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_194 (pyxb.binding.basis.complexTypeDefinition):
    """Default value for a wire port."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 69, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_194_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_194 = CTD_ANON_194


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_195 (pyxb.binding.basis.complexTypeDefinition):
    """Time in nanoseconds until start of one-shot."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 103, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='float')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 161, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 170, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 163, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_195_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_195 = CTD_ANON_195


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_196 (pyxb.binding.basis.complexTypeDefinition):
    """Value of port after first  edge of one-shot."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 115, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_196_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_196 = CTD_ANON_196


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_197 (pyxb.binding.basis.complexTypeDefinition):
    """Duration in nanoseconds of the one shot."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 127, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='float')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 161, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 170, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 163, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_197_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_197 = CTD_ANON_197


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_198 (pyxb.binding.basis.complexTypeDefinition):
    """Clock period in units defined by the units attribute. Default is nanoseconds."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 182, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='float')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 161, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 170, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 163, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}units uses Python identifier units
    __units = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'units'), 'units', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_198_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009units', _module_typeBindings.delayValueUnitType, unicode_default='ns')
    __units._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 185, 14)
    __units._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 185, 14)
    
    units = property(__units.value, __units.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __units.name() : __units
    })
_module_typeBindings.CTD_ANON_198 = CTD_ANON_198


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_199 (pyxb.binding.basis.complexTypeDefinition):
    """Time until first pulse. Units are defined by the units attribute. Default is nanoseconds."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 195, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='float')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 161, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 170, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 163, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}units uses Python identifier units
    __units = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'units'), 'units', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_199_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009units', _module_typeBindings.delayValueUnitType, unicode_default='ns')
    __units._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 198, 14)
    __units._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 198, 14)
    
    units = property(__units.value, __units.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __units.name() : __units
    })
_module_typeBindings.CTD_ANON_199 = CTD_ANON_199


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_200 (pyxb.binding.basis.complexTypeDefinition):
    """Value of port after first clock edge."""
    _TypeDefinition = scaledNonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 208, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledNonNegativeInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_200_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_200 = CTD_ANON_200


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_201 (pyxb.binding.basis.complexTypeDefinition):
    """Duration of first state in cycle. Units are defined by the units attribute. Default is nanoseconds."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 220, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='float')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 161, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 170, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 163, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}units uses Python identifier units
    __units = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'units'), 'units', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_201_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009units', _module_typeBindings.delayValueUnitType, unicode_default='ns')
    __units._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 223, 14)
    __units._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 223, 14)
    
    units = property(__units.value, __units.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __units.name() : __units
    })
_module_typeBindings.CTD_ANON_201 = CTD_ANON_201


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_202 (pyxb.binding.basis.complexTypeDefinition):
    """Represents an ad-hoc connection between component ports."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 135, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009name', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12), )

    
    name = property(__name.value, __name.set, None, 'Unique name')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009displayName', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4), )

    
    displayName = property(__displayName.value, __displayName.set, None, 'Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009description', False, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4), )

    
    description = property(__description.value, __description.set, None, 'Full description string, typically for documentation')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}internalPortReference uses Python identifier internalPortReference
    __internalPortReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'internalPortReference'), 'internalPortReference', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009internalPortReference', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 138, 16), )

    
    internalPortReference = property(__internalPortReference.value, __internalPortReference.set, None, 'Defines a reference to a port on a component contained within the design.')

    
    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}externalPortReference uses Python identifier externalPortReference
    __externalPortReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'externalPortReference'), 'externalPortReference', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009externalPortReference', True, pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 165, 16), )

    
    externalPortReference = property(__externalPortReference.value, __externalPortReference.set, None, 'Defines a reference to a port on the component containing this design. The portRef attribute indicates the name of the port in the containing component.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}tiedValue uses Python identifier tiedValue
    __tiedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'tiedValue'), 'tiedValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_202_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009tiedValue', _module_typeBindings.scaledNonNegativeInteger)
    __tiedValue._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 188, 12)
    __tiedValue._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 188, 12)
    
    tiedValue = property(__tiedValue.value, __tiedValue.set, None, 'The logic value of this connection. Only valid for ports of style wire.')

    _ElementMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __description.name() : __description,
        __internalPortReference.name() : __internalPortReference,
        __externalPortReference.name() : __externalPortReference
    })
    _AttributeMap.update({
        __tiedValue.name() : __tiedValue
    })
_module_typeBindings.CTD_ANON_202 = CTD_ANON_202


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_203 (pyxb.binding.basis.complexTypeDefinition):
    """The address range of mirrored slave, expressed as the number of bitsInLAU from the containing busInterface. """
    _TypeDefinition = scaledPositiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 459, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledPositiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_203_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_203 = CTD_ANON_203


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_204 (pyxb.binding.basis.complexTypeDefinition):
    """The address range of asegment.  Expressed as the number of addressable units accessible to the segment.         """
    _TypeDefinition = scaledPositiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 376, 56)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledPositiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_204_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_204 = CTD_ANON_204


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_205 (pyxb.binding.basis.complexTypeDefinition):
    """The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:
          number_of_bits_in_block = spirit:addressUnitBits * spirit:range
          number_of_rows_in_block = number_of_bits_in_block / spirit:width
          """
    _TypeDefinition = scaledPositiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 539, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledPositiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_205_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_205 = CTD_ANON_205


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_206 (pyxb.binding.basis.complexTypeDefinition):
    """The range of a register file.  Expressed as the number of addressable units accessible to the block. Specified in units of addressUnitBits."""
    _TypeDefinition = scaledPositiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 900, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is scaledPositiveInteger
    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 76, 4)
    __format._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 176, 8)
    
    format = property(__format.value, __format.set, None, "This is an indication on the format of the value for user defined properties.  bitString means a double quoted string of 1's an 0's, the input maybe in this format or a scaledInteger number. A bitStringLength attribute is required for bitString formats. bool means a boolean (true, false) is expected.  float means a decimal floating point number is expected.  long means an value of scaledInteger is expected.  String means any text is acceptable.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}bitStringLength uses Python identifier bitStringLength
    __bitStringLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bitStringLength'), 'bitStringLength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009bitStringLength', pyxb.binding.datatypes.nonNegativeInteger)
    __bitStringLength._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 81, 4)
    __bitStringLength._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 210, 8)
    
    bitStringLength = property(__bitStringLength.value, __bitStringLength.set, None, 'Length of the bit string, required if the format is bitString')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 86, 4)
    __prompt._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 185, 8)
    
    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 91, 4)
    __minimum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 211, 8)
    
    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for formats long and float.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 96, 4)
    __maximum._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 212, 8)
    
    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for formats long and float')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009rangeType', _module_typeBindings.rangeTypeType, unicode_default='float')
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 113, 4)
    __rangeType._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 178, 8)
    
    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'float' if not present.")

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 208, 8)
    
    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 132, 4)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 207, 8)
    
    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties, refers the choice element enumerating the values to choose from.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 137, 4)
    __configGroups._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 209, 8)
    
    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009resolve', _module_typeBindings.resolveType, unicode_default='immediate')
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 90, 4)
    __resolve._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 109, 8)
    
    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 95, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 110, 8)
    
    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document. On elements with spirit:resolve attribute is used to refer to this element and otherwise can be used as a documentation ID.')

    
    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009_CTD_ANON_206_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1685_2009dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 100, 4)
    __dependency._UseLocation = pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/configurable.xsd', 111, 8)
    
    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value for the containing element in terms of other properties in the containing file. ')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __format.name() : __format,
        __bitStringLength.name() : __bitStringLength,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_206 = CTD_ANON_206


bitsInLau = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), pyxb.binding.datatypes.positiveInteger, documentation='The number of bits in the least addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 86, 4))
Namespace.addCategoryObject('elementBinding', bitsInLau.name().localName(), bitsInLau)

group = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4))
Namespace.addCategoryObject('elementBinding', group.name().localName(), group)

displayName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4))
Namespace.addCategoryObject('elementBinding', displayName.name().localName(), displayName)

description = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4))
Namespace.addCategoryObject('elementBinding', description.name().localName(), description)

constraintSetRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSetRef'), pyxb.binding.datatypes.NMTOKEN, documentation='A reference to a set of port constraints.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 291, 4))
Namespace.addCategoryObject('elementBinding', constraintSetRef.name().localName(), constraintSetRef)

generatorRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), pyxb.binding.datatypes.string, documentation='A reference to a generator element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 587, 4))
Namespace.addCategoryObject('elementBinding', generatorRef.name().localName(), generatorRef)

volatile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false')
Namespace.addCategoryObject('elementBinding', volatile.name().localName(), volatile)

addressUnitBits = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits'), pyxb.binding.datatypes.positiveInteger, documentation='The number of data bits in an addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 467, 4))
Namespace.addCategoryObject('elementBinding', addressUnitBits.name().localName(), addressUnitBits)

portAccessHandle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portAccessHandle'), pyxb.binding.datatypes.string, documentation='If present, is a method to be used to get hold of the object representing the port. This is typically a function call or array element reference in systemC.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 350, 4))
Namespace.addCategoryObject('elementBinding', portAccessHandle.name().localName(), portAccessHandle)

instanceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 97, 4))
Namespace.addCategoryObject('elementBinding', instanceName.name().localName(), instanceName)

presence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional')
Namespace.addCategoryObject('elementBinding', presence.name().localName(), presence)

abstractionDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractionDefinition'), CTD_ANON_, documentation='Define the ports and other information of a particular abstraction of the bus', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 170, 4))
Namespace.addCategoryObject('elementBinding', abstractionDefinition.name().localName(), abstractionDefinition)

abstractor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractor'), abstractorType, documentation='This is the root element for abstractors', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 136, 4))
Namespace.addCategoryObject('elementBinding', abstractor.name().localName(), abstractor)

choices = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON_15, documentation='Choices used by elements with an attribute spirit:choiceRef.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4))
Namespace.addCategoryObject('elementBinding', choices.name().localName(), choices)

busDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busDefinition'), CTD_ANON_18, documentation='Defines the structural information associated with a bus type, independent of the abstraction level.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 76, 4))
Namespace.addCategoryObject('elementBinding', busDefinition.name().localName(), busDefinition)

busInterface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), busInterfaceType, documentation='Describes one of the bus interfaces supported by this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 91, 4))
Namespace.addCategoryObject('elementBinding', busInterface.name().localName(), busInterface)

busInterfaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), CTD_ANON_20, documentation='A list of bus interfaces supported by this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 96, 4))
Namespace.addCategoryObject('elementBinding', busInterfaces.name().localName(), busInterfaces)

channels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channels'), CTD_ANON_26, documentation='Lists all channel connections between mirror interfaces of this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 249, 4))
Namespace.addCategoryObject('elementBinding', channels.name().localName(), channels)

remapStates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), CTD_ANON_28, documentation='Contains a list of remap state names and associated port values', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 277, 4))
Namespace.addCategoryObject('elementBinding', remapStates.name().localName(), remapStates)

parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, documentation='A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 90, 4))
Namespace.addCategoryObject('elementBinding', parameter.name().localName(), parameter)

parameters = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4))
Namespace.addCategoryObject('elementBinding', parameters.name().localName(), parameters)

vendorExtensions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4))
Namespace.addCategoryObject('elementBinding', vendorExtensions.name().localName(), vendorExtensions)

component = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'component'), componentType, documentation='This is the root element for all non platform-core components.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 147, 4))
Namespace.addCategoryObject('elementBinding', component.name().localName(), component)

cellSpecification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification'), CTD_ANON_56, documentation='Used to provide a generic description of a technology library cell.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 162, 4))
Namespace.addCategoryObject('elementBinding', cellSpecification.name().localName(), cellSpecification)

driveConstraint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint'), CTD_ANON_57, documentation='Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 213, 4))
Namespace.addCategoryObject('elementBinding', driveConstraint.name().localName(), driveConstraint)

loadConstraint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint'), CTD_ANON_58, documentation='Defines a constraint indicating the type of load on an output port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 223, 4))
Namespace.addCategoryObject('elementBinding', loadConstraint.name().localName(), loadConstraint)

constraintSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSet'), CTD_ANON_59, documentation='Defines constraints that apply to a component port. If multiple constraintSet elements are used, each must have a unique value for the constraintSetId attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 238, 4))
Namespace.addCategoryObject('elementBinding', constraintSet.name().localName(), constraintSet)

constraintSets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSets'), CTD_ANON_63, documentation='List of constraintSet elements for a component port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 281, 4))
Namespace.addCategoryObject('elementBinding', constraintSets.name().localName(), constraintSets)

design = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'design'), CTD_ANON_64, documentation='Root element for a platform design.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 67, 4))
Namespace.addCategoryObject('elementBinding', design.name().localName(), design)

designConfiguration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'designConfiguration'), CTD_ANON_67, documentation='Top level element for describing the current configuration of a design. Does not describe instance parameterization', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 67, 2))
Namespace.addCategoryObject('elementBinding', designConfiguration.name().localName(), designConfiguration)

file = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'file'), CTD_ANON_73, documentation='IP-XACT reference to a file or directory.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 66, 4))
Namespace.addCategoryObject('elementBinding', file.name().localName(), file)

fileSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), fileSetType, documentation='This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 212, 4))
Namespace.addCategoryObject('elementBinding', fileSet.name().localName(), fileSet)

executableImage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), CTD_ANON_77, documentation='Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 217, 4))
Namespace.addCategoryObject('elementBinding', executableImage.name().localName(), executableImage)

fileSetRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), CTD_ANON_82, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4))
Namespace.addCategoryObject('elementBinding', fileSetRef.name().localName(), fileSetRef)

dependency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 404, 4))
Namespace.addCategoryObject('elementBinding', dependency.name().localName(), dependency)

fileSets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), CTD_ANON_83, documentation='List of file sets associated with component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 409, 4))
Namespace.addCategoryObject('elementBinding', fileSets.name().localName(), fileSets)

generatorChain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChain'), CTD_ANON_86, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 66, 2))
Namespace.addCategoryObject('elementBinding', generatorChain.name().localName(), generatorChain)

phase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phase'), CTD_ANON_88, documentation='This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 165, 2))
Namespace.addCategoryObject('elementBinding', phase.name().localName(), phase)

componentGenerators = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), CTD_ANON_89, documentation='List of component generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 204, 2))
Namespace.addCategoryObject('elementBinding', componentGenerators.name().localName(), componentGenerators)

abstractorGenerators = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerators'), CTD_ANON_90, documentation='List of abstractor generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 214, 2))
Namespace.addCategoryObject('elementBinding', abstractorGenerators.name().localName(), abstractorGenerators)

addressBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4))
Namespace.addCategoryObject('elementBinding', addressBlock.name().localName(), addressBlock)

addressSpaceRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), addrSpaceRefType, documentation='References the address space.  The name of the address space is kept in its addressSpaceRef attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 327, 4))
Namespace.addCategoryObject('elementBinding', addressSpaceRef.name().localName(), addressSpaceRef)

addressSpaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), CTD_ANON_92, documentation='If this component is a bus master, this lists all the address spaces\ndefined by the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 332, 4))
Namespace.addCategoryObject('elementBinding', addressSpaces.name().localName(), addressSpaces)

memoryMapRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), memoryMapRefType, documentation='References the memory map. The name of the memory map is kept in its memoryMapRef attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 418, 4))
Namespace.addCategoryObject('elementBinding', memoryMapRef.name().localName(), memoryMapRef)

memoryMaps = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), CTD_ANON_96, documentation='Lists all the slave memory maps defined by the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 423, 4))
Namespace.addCategoryObject('elementBinding', memoryMaps.name().localName(), memoryMaps)

enumeratedValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValues'), CTD_ANON_101, documentation='Enumerates specific values that can be assigned to the bit field.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 670, 4))
Namespace.addCategoryObject('elementBinding', enumeratedValues.name().localName(), enumeratedValues)

registerFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), CTD_ANON_102, documentation='A structure of registers and register files', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4))
Namespace.addCategoryObject('elementBinding', registerFile.name().localName(), registerFile)

model = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'model'), modelType, documentation='Model information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 277, 4))
Namespace.addCategoryObject('elementBinding', model.name().localName(), model)

vector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_115, documentation='Definition of the indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4))
Namespace.addCategoryObject('elementBinding', vector.name().localName(), vector)

initiative = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'initiative'), STD_ANON_18, documentation='If this element is present, the type of access is restricted to the specified value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 191, 4))
Namespace.addCategoryObject('elementBinding', initiative.name().localName(), initiative)

portAccessType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portAccessType'), STD_ANON_19, documentation="Indicates how a netlister accesses a port. 'ref' means accessed by reference (default) and 'ptr' means accessed by pointer.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 204, 4))
Namespace.addCategoryObject('elementBinding', portAccessType.name().localName(), portAccessType)

transTypeDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transTypeDef'), CTD_ANON_116, documentation='Definition of a single transactional type defintion', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 215, 4))
Namespace.addCategoryObject('elementBinding', transTypeDef.name().localName(), transTypeDef)

serviceTypeDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDef'), CTD_ANON_118, documentation='Definition of a single service type defintion', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 245, 4))
Namespace.addCategoryObject('elementBinding', serviceTypeDef.name().localName(), serviceTypeDef)

wireTypeDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDef'), CTD_ANON_121, documentation='Definition of a single wire type defintion that can relate to multiple views.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 291, 4))
Namespace.addCategoryObject('elementBinding', wireTypeDef.name().localName(), wireTypeDef)

serviceTypeDefs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDefs'), CTD_ANON_123, documentation='The group of type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 326, 4))
Namespace.addCategoryObject('elementBinding', serviceTypeDefs.name().localName(), serviceTypeDefs)

wireTypeDefs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDefs'), CTD_ANON_124, documentation='The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 336, 4))
Namespace.addCategoryObject('elementBinding', wireTypeDefs.name().localName(), wireTypeDefs)

singleShotDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), CTD_ANON_127, documentation='Describes a driven one-shot port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 93, 2))
Namespace.addCategoryObject('elementBinding', singleShotDriver.name().localName(), singleShotDriver)

driver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driver'), driverType, documentation='Wire port driver element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 171, 2))
Namespace.addCategoryObject('elementBinding', driver.name().localName(), driver)

configurableElementValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), CTD_ANON_128, documentation='All configuration information for a contained component, generator, generator chain or abstractor instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4))
Namespace.addCategoryObject('elementBinding', configurableElementValues.name().localName(), configurableElementValues)

configurableElementValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValue'), CTD_ANON_129, documentation='Describes the content of a configurable element. The required referenceId attribute refers to the ID attribute of the configurable element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 81, 4))
Namespace.addCategoryObject('elementBinding', configurableElementValue.name().localName(), configurableElementValue)

componentInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), CTD_ANON_130, documentation='Component instance element.  The instance name is contained in the unique-value instanceName attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 102, 4))
Namespace.addCategoryObject('elementBinding', componentInstance.name().localName(), componentInstance)

componentInstances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), CTD_ANON_131, documentation='Sub instances of internal components.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 121, 4))
Namespace.addCategoryObject('elementBinding', componentInstances.name().localName(), componentInstances)

adHocConnections = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), CTD_ANON_132, documentation='Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 195, 4))
Namespace.addCategoryObject('elementBinding', adHocConnections.name().localName(), adHocConnections)

interconnection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), CTD_ANON_133, documentation='Describes a connection between two active (not monitor) busInterfaces.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 205, 4))
Namespace.addCategoryObject('elementBinding', interconnection.name().localName(), interconnection)

interconnections = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), CTD_ANON_134, documentation='Connections between internal sub components.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 222, 4))
Namespace.addCategoryObject('elementBinding', interconnections.name().localName(), interconnections)

monitorInterconnection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monitorInterconnection'), CTD_ANON_135, documentation='Describes a connection from the interface of one component to any number of monitor interfaces in the design.\n\nAn active interface can be connected to unlimited number of monitor interfaces.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 248, 4))
Namespace.addCategoryObject('elementBinding', monitorInterconnection.name().localName(), monitorInterconnection)

timingConstraint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint'), CTD_ANON_148, documentation='Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 195, 4))
Namespace.addCategoryObject('elementBinding', timingConstraint.name().localName(), timingConstraint)

generator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generator'), CTD_ANON_169, documentation='Specifies a set of generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 115, 2))
Namespace.addCategoryObject('elementBinding', generator.name().localName(), generator)

abstractorGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerator'), instanceGeneratorType, documentation='Specifies a set of abstractor generators. The scope attribute applies to abstractor generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 135, 2))
Namespace.addCategoryObject('elementBinding', abstractorGenerator.name().localName(), abstractorGenerator)

groupSelector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_170, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 140, 2))
Namespace.addCategoryObject('elementBinding', groupSelector.name().localName(), groupSelector)

access = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4))
Namespace.addCategoryObject('elementBinding', access.name().localName(), access)

bank = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4))
Namespace.addCategoryObject('elementBinding', bank.name().localName(), bank)

port = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'port'), portType, documentation='Describes port characteristics.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 355, 4))
Namespace.addCategoryObject('elementBinding', port.name().localName(), port)

clockDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), CTD_ANON_178, documentation='Describes a driven clock port. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 77, 2))
Namespace.addCategoryObject('elementBinding', clockDriver.name().localName(), clockDriver)

requiresDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), CTD_ANON_179, documentation='Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 138, 2), unicode_default='false')
Namespace.addCategoryObject('elementBinding', requiresDriver.name().localName(), requiresDriver)

otherClockDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'otherClockDriver'), CTD_ANON_180, documentation='Describes a clock not directly associated with an input port. The clockSource attribute can be used on these clocks to indicate the actual clock source (e.g. an output port of a clock generator cell).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 231, 2))
Namespace.addCategoryObject('elementBinding', otherClockDriver.name().localName(), otherClockDriver)

componentGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), CTD_ANON_185, documentation='Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 125, 2))
Namespace.addCategoryObject('elementBinding', componentGenerator.name().localName(), componentGenerator)

baseAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_187, documentation='Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4))
Namespace.addCategoryObject('elementBinding', baseAddress.name().localName(), baseAddress)

defaultValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), CTD_ANON_194, documentation='Default value for a wire port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 65, 2))
Namespace.addCategoryObject('elementBinding', defaultValue.name().localName(), defaultValue)

adHocConnection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), CTD_ANON_202, documentation='Represents an ad-hoc connection between component ports.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 131, 4))
Namespace.addCategoryObject('elementBinding', adHocConnection.name().localName(), adHocConnection)



serviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'initiative'), STD_ANON_, scope=serviceType, documentation='If this element is present, the type of access is restricted to the specified value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 88, 12), unicode_default='requires'))

serviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeName'), CTD_ANON, scope=serviceType, documentation='Defines the name of the transactional interface type.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 100, 12)))

serviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=serviceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 117, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(serviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'initiative')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 88, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(serviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 100, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(serviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 117, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
serviceType._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busType'), libraryRefType, scope=CTD_ANON_, documentation='Reference to the busDefinition that this abstractionDefinition implements.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 177, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extends'), libraryRefType, scope=CTD_ANON_, documentation='Optional name of abstraction type that this abstraction definition is compatible with. This abstraction definition may change the definitions of ports in the existing abstraction definition and add new ports, the ports in the original abstraction are not deleted but may be marked illegal to disallow their use.\n        This abstraction definition may only extend another abstraction definition if the bus type of this abstraction definition extends the bus type of the extended abstraction definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 182, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ports'), CTD_ANON_2, scope=CTD_ANON_, documentation='This is a list of logical ports defined by the bus.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 188, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 182, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 354, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 355, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 177, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extends')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 182, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ports')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 188, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 354, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 355, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'port'), CTD_ANON_3, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 194, 28)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'port')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 194, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_3, documentation='The assigned name of this port in bus specifications.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 197, 40)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wire'), CTD_ANON_4, scope=CTD_ANON_3, documentation='A port that carries logic or an array of logic values', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 208, 44)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactional'), CTD_ANON_9, scope=CTD_ANON_3, documentation='A port that carries complex information modeled at a high level of abstraction.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 287, 44)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_3, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 202, 40))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 203, 40))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 347, 40))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 197, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 202, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 203, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wire')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 208, 44))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactional')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 287, 44))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 347, 40))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'qualifier'), CTD_ANON_5, scope=CTD_ANON_4, documentation='The type of information this port carries A wire port can carry both address and data, but may not mix this with a clock or reset', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 214, 56)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), CTD_ANON_6, scope=CTD_ANON_4, documentation='Defines constraints for this port when present in a system bus interface with a matching group name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 245, 56)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), CTD_ANON_7, scope=CTD_ANON_4, documentation='Defines constraints for this port when present in a master bus interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 260, 56)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), CTD_ANON_8, scope=CTD_ANON_4, documentation='Defines constraints for this port when present in a slave bus interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 268, 56)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), scaledNonNegativeInteger, scope=CTD_ANON_4, documentation='Indicates the default value for this wire port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 277, 60)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), CTD_ANON_179, scope=CTD_ANON_4, documentation='Specifies if a port requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 138, 2), unicode_default='false'))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 214, 56))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 245, 56))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 260, 56))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 268, 56))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 276, 56))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'qualifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 214, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSystem')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 245, 56))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onMaster')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 260, 56))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSlave')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 268, 56))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 277, 60))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 282, 60))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the port contains address information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 221, 72)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isData'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the port contains data information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 226, 72)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isClock'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the port contains only clock information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 232, 68)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isReset'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='Is this element is present, the port contains only reset information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 237, 68)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 221, 72))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 226, 72))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 232, 68))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 237, 68))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 221, 72))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isData')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 226, 72))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isClock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 232, 68))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isReset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 237, 68))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_6, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_6, documentation='Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_2, scope=CTD_ANON_6, documentation='If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), unicode_default='out'))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_6, documentation="Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_6, documentation="Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_6, documentation='Used to group system ports into different groups within a common bus.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 251, 68)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 156, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 251, 68))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_7, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_7, documentation='Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_2, scope=CTD_ANON_7, documentation='If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), unicode_default='out'))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_7, documentation="Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_7, documentation="Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 156, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_8, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_8, documentation='Number of bits required to represent this port. Absence of this element indicates unconstrained number of bits, i.e. the component will define the number of bits in this port. The logical numbering of the port starts at 0 to width-1.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_2, scope=CTD_ANON_8, documentation='If this element is present, the direction of this port is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12), unicode_default='out'))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_8, documentation="Specifies default constraints for the enclosing wire type port. If the mirroredModeConstraints element is not defined, then these constraints applied to this port when it appears in a 'mode' bus interface or a mirrored-'mode' bus interface. Otherwise they only apply when the port appears in a 'mode' bus interface.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints'), abstractionDefPortConstraintsType, scope=CTD_ANON_8, documentation="Specifies default constraints for the enclosing wire type port when it appears in a mirrored-'mode' bus interface. ", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 156, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 138, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 139, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 144, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 157, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredModeConstraints')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 162, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'qualifier'), CTD_ANON_10, scope=CTD_ANON_9, documentation='The type of information this port carries A transactional port can carry both address and data information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 293, 56)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), CTD_ANON_11, scope=CTD_ANON_9, documentation='Defines constraints for this port when present in a system bus interface with a matching group name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 312, 56)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), CTD_ANON_12, scope=CTD_ANON_9, documentation='Defines constraints for this port when present in a master bus interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 327, 56)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), CTD_ANON_13, scope=CTD_ANON_9, documentation='Defines constraints for this port when present in a slave bus interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 335, 56)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 293, 56))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 312, 56))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 327, 56))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 335, 56))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'qualifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 293, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSystem')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 312, 56))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onMaster')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 327, 56))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSlave')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 335, 56))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_10, documentation='If this element is present, the port contains address information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 299, 68)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isData'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_10, documentation='If this element is present, the port contains data information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 304, 68)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 299, 68))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 304, 68))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 299, 68))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isData')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 304, 68))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_11, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), serviceType, scope=CTD_ANON_11, documentation='The service that this transactional port can provide or requires.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_11, documentation='Used to group system ports into different groups within a common bus.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 318, 68)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 318, 68))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_12, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), serviceType, scope=CTD_ANON_12, documentation='The service that this transactional port can provide or requires.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'presence'), STD_ANON, scope=CTD_ANON_13, documentation="If this element is present, the\n            existance of the port is controlled by the specified\n            value. valid values are 'illegal', 'required' and\n            'optional'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 68, 4), unicode_default='optional'))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), serviceType, scope=CTD_ANON_13, documentation='The service that this transactional port can provide or requires.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'presence')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 125, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractionDefinition.xsd', 126, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorMode'), CTD_ANON_136, scope=abstractorType, documentation='Define the mode for the interfaces on this abstractor.\n\nFor master the first interface connects to the master, the second connects to the mirroredMaster\n\nFor slave the first interface connects to the mirroredSlave the second connects to the slave\n\nFor direct the first interface connects to the master, the second connects to the slave\n\nFor system the first interface connects to the system, the second connects to the mirroredSystem. For system the group attribute is required', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 76, 12)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busType'), libraryRefType, scope=abstractorType, documentation='The bus type of both interfaces. Refers to bus definition using vendor, library, name, version attributes.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 100, 12)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterfaces'), CTD_ANON_14, scope=abstractorType, documentation='The interfaces supported by this abstractor', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 105, 12)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'model'), abstractorModelType, scope=abstractorType, documentation='Model information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 119, 12)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON_15, scope=abstractorType, documentation='Choices used by elements with an attribute spirit:choiceRef.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=abstractorType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=abstractorType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=abstractorType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), CTD_ANON_83, scope=abstractorType, documentation='List of file sets associated with component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 409, 4)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerators'), CTD_ANON_90, scope=abstractorType, documentation='List of abstractor generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 214, 2)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=abstractorType, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=abstractorType, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=abstractorType, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

abstractorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=abstractorType, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 119, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 124, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 129, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 130, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 131, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 132, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 133, 12))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorMode')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 76, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 100, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterfaces')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 105, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 119, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerators')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 124, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choices')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 129, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSets')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 130, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 131, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 132, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(abstractorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 133, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractorType._Automaton = _BuildAutomaton_14()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterface'), abstractorBusInterfaceType, scope=CTD_ANON_14, documentation='An abstractor must have exactly 2 Interfaces.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 111, 24)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=2, max=2, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 111, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorInterface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/abstractor.xsd', 111, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_15()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choice'), CTD_ANON_16, scope=CTD_ANON_15, documentation='Non-empty set of legal values for a elements with an attribute spirit:choiceRef.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 220, 16)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choice')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 220, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_16()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_16, documentation='Choice key, available for reference by the spirit:choiceRef attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 226, 28)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enumeration'), CTD_ANON_17, scope=CTD_ANON_16, documentation='One possible value of spirit:choice', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 231, 28)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 226, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enumeration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 231, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_17()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'directConnection'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_18, documentation='This element indicates that a master interface may be directly connected to a slave interface (under certain conditions) for busses of this type.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 83, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isAddressable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_18, documentation='If true, indicates that this is an addressable bus.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 88, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extends'), libraryRefType, scope=CTD_ANON_18, documentation='Optional name of bus type that this bus definition is compatible with. This bus definition may change the definitions in the existing bus definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 93, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_18, documentation='Indicates the maximum number of masters this bus supports.  If this element is not present, the number of masters allowed is unbounded. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 98, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_18, documentation='Indicates the maximum number of slaves this bus supports.  If the element is not present, the number of slaves allowed is unbounded.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 103, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'systemGroupNames'), CTD_ANON_19, scope=CTD_ANON_18, documentation='Indicates the list of system group names that are defined for this bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 108, 16)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_18, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_18, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_18, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_18, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_18, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 93, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 98, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 103, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 108, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 122, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 123, 16))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'directConnection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 83, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isAddressable')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 88, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extends')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 93, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxMasters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 98, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 103, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemGroupNames')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 108, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 122, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 123, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_18()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'systemGroupName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_19, documentation='Indicates the name of a system group defined for this bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 114, 28)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemGroupName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busDefinition.xsd', 114, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_19()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), busInterfaceType, scope=CTD_ANON_20, documentation='Describes one of the bus interfaces supported by this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 91, 4)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 102, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_20()




busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), pyxb.binding.datatypes.positiveInteger, scope=busInterfaceType, documentation='The number of bits in the least addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 86, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busType'), libraryRefType, scope=busInterfaceType, documentation='The bus type of this interface. Refers to bus definition using vendor, library, name, version attributes.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 112, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractionType'), libraryRefType, scope=busInterfaceType, documentation='The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 117, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'connectionRequired'), pyxb.binding.datatypes.boolean, scope=busInterfaceType, documentation='Indicates whether a connection to this interface is required for proper component functionality.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 127, 12), unicode_default='false'))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portMaps'), CTD_ANON_21, scope=busInterfaceType, documentation='Listing of maps between component ports and bus ports.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 132, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitSteering'), CTD_ANON_139, scope=busInterfaceType, documentation='Indicates whether bit steering should be used to map this interface onto a bus of different data width.\n\nValues are "on", "off" (defaults to "off").', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 220, 12), unicode_default='off'))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endianness'), endianessType, scope=busInterfaceType, documentation="'big': means the most significant element of any multi-element  data field is stored at the lowest memory address. 'little' means the least significant element of any multi-element data field is stored at the lowest memory address. If this element is not present the default is 'little' endian.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 234, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'master'), CTD_ANON_31, scope=busInterfaceType, documentation='If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 331, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'slave'), CTD_ANON_32, scope=busInterfaceType, documentation='If this element is present, the bus interface can serve as a slave.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 369, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'system'), CTD_ANON_35, scope=busInterfaceType, documentation='If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 415, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave'), CTD_ANON_36, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on ports are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 425, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster'), CTD_ANON_38, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored master interface. All directional constraints on ports are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 473, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem'), CTD_ANON_39, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored system interface. All directional constraints on ports are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 479, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monitor'), CTD_ANON_142, scope=busInterfaceType, documentation='Indicates that this is a (passive) monitor interface. All of the ports in the interface must be inputs. The type of interface to be monitored is specified with the required interfaceType attribute. The spirit:group element must be specified if monitoring a system interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 489, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=busInterfaceType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=busInterfaceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=busInterfaceType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=busInterfaceType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=busInterfaceType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 117, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 127, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 132, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 219, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 220, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 234, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 239, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 240, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 112, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractionType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 117, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'master')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 331, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'slave')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 369, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'system')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 415, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 425, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 473, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 479, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monitor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 489, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'connectionRequired')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 127, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portMaps')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 132, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 219, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitSteering')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 220, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endianness')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 234, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 239, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 240, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
busInterfaceType._Automaton = _BuildAutomaton_21()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portMap'), CTD_ANON_22, scope=CTD_ANON_21, documentation="Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 138, 24)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 138, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_22()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalPort'), CTD_ANON_23, scope=CTD_ANON_22, documentation='Logical port from abstraction definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 144, 36)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalPort'), CTD_ANON_25, scope=CTD_ANON_22, documentation='Physical port from this component', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 191, 36)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalPort')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 144, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'physicalPort')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 191, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_23()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_23, documentation='Bus port name as specified inside the abstraction definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 150, 48)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_24, scope=CTD_ANON_23, documentation='Definition of the logical indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 155, 48)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 155, 48))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 150, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 155, 48))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_24()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), CTD_ANON_137, scope=CTD_ANON_24, documentation='Defines which logical bit maps to the physical left bit below', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 161, 60)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), CTD_ANON_138, scope=CTD_ANON_24, documentation='Defines which logical bit maps to the physical right bit below', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 173, 60)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 161, 60))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 173, 60))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_25()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), portName, scope=CTD_ANON_25, documentation='Component port name as specified inside the model port section', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 197, 48)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_115, scope=CTD_ANON_25, documentation='Definition of the indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 202, 48))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 197, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 202, 48))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_26()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channel'), CTD_ANON_27, scope=CTD_ANON_26, documentation='Defines a set of mirrored interfaces of this component that are connected to one another.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 255, 16)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channel')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 255, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_27()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef'), pyxb.binding.datatypes.Name, scope=CTD_ANON_27, documentation='Contains the name of one of the bus interfaces that is part of this channel. The ordering of the references may be important to the design environment.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 262, 28)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_27, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_27, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_27, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 262, 28))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 262, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_28()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapState'), CTD_ANON_29, scope=CTD_ANON_28, documentation='Contains a list of ports and values in remapPort and a list of registers and values that when all evaluate to true which tell the decoder to enter this remap state. The name attribute identifies the name of the state. If a list of remapPorts and/or remapRegisters is not defined then the condition for that state cannot be defined.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 283, 16)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapState')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 283, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_29()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapPorts'), CTD_ANON_30, scope=CTD_ANON_29, documentation='List of ports and their values that shall invoke this remap state.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 290, 28)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_29, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 290, 28))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapPorts')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 290, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_30()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapPort'), CTD_ANON_183, scope=CTD_ANON_30, documentation='Contains the name and value of a port on the component, the value indicates the logic value which this port must take to effect the remapping. The portMapRef attribute stores the name of the port which takes that value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 296, 40)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapPort')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 296, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_31()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), CTD_ANON_140, scope=CTD_ANON_31, documentation='If this master connects to an addressable bus, this element references the address space it maps to.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 337, 24)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 337, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 337, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_32()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bridge'), CTD_ANON_33, scope=CTD_ANON_32, documentation='If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.\n\nAny slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 376, 24)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), CTD_ANON_34, scope=CTD_ANON_32, documentation='This reference is used to point the filesets that are associated with this slave port.\n\nDepending on the slave port function, there may be completely different software drivers associated with the different ports. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 395, 24)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), memoryMapRefType, scope=CTD_ANON_32, documentation='References the memory map. The name of the memory map is kept in its memoryMapRef attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 418, 4)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 375, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 376, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 395, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 375, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bridge')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 376, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 395, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_33()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_34, documentation='Abritray name assigned to the collections of fileSets.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 403, 36)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), CTD_ANON_82, scope=CTD_ANON_34, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 403, 36))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 408, 36))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 403, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 408, 36))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_34()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_35, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 421, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_35()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses'), CTD_ANON_37, scope=CTD_ANON_36, documentation='Represents a set of remap base addresses.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 431, 24)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 430, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 431, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 431, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_36()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapAddress'), CTD_ANON_184, scope=CTD_ANON_37, documentation='Base of an address block, expressed as the number of bitsInLAU from the containing busInterface. The state attribute indicates the name of the remap state for which this address is valid.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 437, 36)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_203, scope=CTD_ANON_37, documentation='The address range of mirrored slave, expressed as the number of bitsInLAU from the containing busInterface. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 455, 36)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 437, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 455, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_37()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_39, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 485, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_38()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_42, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 540, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_39()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_45, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 562, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_40()




abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractionType'), libraryRefType, scope=abstractorBusInterfaceType, documentation='The abstraction type/level of this interface. Refers to abstraction definition using vendor, library, name, version attributes. Bus definition can be found through a reference in this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 574, 12)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portMaps'), CTD_ANON_46, scope=abstractorBusInterfaceType, documentation='Listing of maps between logical ports and physical ports.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 579, 12)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=abstractorBusInterfaceType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=abstractorBusInterfaceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=abstractorBusInterfaceType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=abstractorBusInterfaceType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

abstractorBusInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=abstractorBusInterfaceType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 579, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 666, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 667, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractionType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 574, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portMaps')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 579, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 666, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(abstractorBusInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 667, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractorBusInterfaceType._Automaton = _BuildAutomaton_41()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portMap'), CTD_ANON_47, scope=CTD_ANON_46, documentation="Maps a component's port to a port in a bus description. This is the logical to physical mapping. The logical pin comes from the bus interface and the physical pin from the component.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 585, 24)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 585, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_42()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalPort'), CTD_ANON_48, scope=CTD_ANON_47, documentation='Logical port from abstraction definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 591, 36)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'physicalPort'), CTD_ANON_50, scope=CTD_ANON_47, documentation='Physical port from this component', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 638, 36)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalPort')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 591, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'physicalPort')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 638, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_43()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_48, documentation='Bus port name as specified inside the abstraction definition', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 597, 48)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_49, scope=CTD_ANON_48, documentation='Definition of the logical indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 602, 48)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 602, 48))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 597, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 602, 48))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_44()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), CTD_ANON_143, scope=CTD_ANON_49, documentation='Defines which logical bit maps to the physical left bit below', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 608, 60)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), CTD_ANON_144, scope=CTD_ANON_49, documentation='Defines which logical bit maps to the physical right bit below', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 620, 60)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 608, 60))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 620, 60))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_45()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), portName, scope=CTD_ANON_50, documentation='Component port name as specified inside the model port section', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 644, 48)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_115, scope=CTD_ANON_50, documentation='Definition of the indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 649, 48))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 644, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 649, 48))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_46()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_51, documentation='A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 90, 4)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 101, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_47()




def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 111, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_48()




nameValuePairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=nameValuePairType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

nameValuePairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_145, scope=nameValuePairType, documentation='The value of the parameter.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 181, 12)))

nameValuePairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=nameValuePairType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 202, 12)))

nameValuePairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=nameValuePairType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

nameValuePairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=nameValuePairType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValuePairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValuePairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValuePairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(nameValuePairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 181, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(nameValuePairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
nameValuePairType._Automaton = _BuildAutomaton_49()




componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON_15, scope=componentType, documentation='Choices used by elements with an attribute spirit:choiceRef.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), CTD_ANON_20, scope=componentType, documentation='A list of bus interfaces supported by this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 96, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channels'), CTD_ANON_26, scope=componentType, documentation='Lists all channel connections between mirror interfaces of this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 249, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), CTD_ANON_28, scope=componentType, documentation='Contains a list of remap state names and associated port values', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 277, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=componentType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=componentType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=componentType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElements'), CTD_ANON_53, scope=componentType, documentation='A list of whiteboxElements', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 89, 12)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cpus'), CTD_ANON_54, scope=componentType, documentation="cpu's in the component", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 103, 12)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'otherClockDrivers'), otherClocks, scope=componentType, documentation='Defines a set of clock drivers that are not directly associated with an input port of the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 137, 12)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), CTD_ANON_83, scope=componentType, documentation='List of file sets associated with component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 409, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), CTD_ANON_89, scope=componentType, documentation='List of component generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 204, 2)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=componentType, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=componentType, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=componentType, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=componentType, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), CTD_ANON_92, scope=componentType, documentation='If this component is a bus master, this lists all the address spaces\ndefined by the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 332, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), CTD_ANON_96, scope=componentType, documentation='Lists all the slave memory maps defined by the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 423, 4)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'model'), modelType, scope=componentType, documentation='Model information.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 277, 4)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 76, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 77, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 78, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 79, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 80, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 81, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 82, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 87, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 88, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 89, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 103, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 137, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 142, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 143, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 144, 12))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 76, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channels')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 77, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapStates')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 78, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 79, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 80, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 81, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 82, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choices')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 87, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSets')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 88, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElements')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 89, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cpus')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 103, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'otherClockDrivers')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 137, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 142, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 143, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 144, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
componentType._Automaton = _BuildAutomaton_50()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElement'), whiteboxElementType, scope=CTD_ANON_53, documentation='A whiteboxElement is a useful way to identify elements of a component that can not be identified through other means such as internal signals and non-software accessible registers.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 95, 24)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElement')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 95, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_51()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cpu'), CTD_ANON_55, scope=CTD_ANON_54, documentation='Describes a processor in this component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 109, 24)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cpu')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 109, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_52()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_55, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_55, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_55, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), addrSpaceRefType, scope=CTD_ANON_55, documentation='References the address space.  The name of the address space is kept in its addressSpaceRef attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 327, 4)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 125, 36))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 130, 36))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 120, 36))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 125, 36))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 130, 36))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_53()




whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=whiteboxElementType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=whiteboxElementType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=whiteboxElementType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=whiteboxElementType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=whiteboxElementType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxType'), STD_ANON_5, scope=whiteboxElementType, documentation='Indicates the type of the element. The pin and signal types refer to elements within the HDL description. The register type refers to a register in the memory map. The interface type refers to a group of signals addressed as a single unit.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 258, 12)))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driveable'), pyxb.binding.datatypes.boolean, scope=whiteboxElementType, documentation='If true, indicates that the white box element can be driven (e.g. have a new value forced into it).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 271, 12), unicode_default='false'))

whiteboxElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerRef'), pyxb.binding.datatypes.string, scope=whiteboxElementType, documentation="Indicates the name of the register associated with this white box element. The name should be a full hierarchical path from the memory map to the register, using '/' as a hierarchy separator.  When specified, the whiteboxType must be 'register'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 276, 12)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 271, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 276, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 281, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 282, 12))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 258, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driveable')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 271, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registerRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 276, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 281, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(whiteboxElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/component.xsd', 282, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
whiteboxElementType._Automaton = _BuildAutomaton_54()




otherClocks._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'otherClockDriver'), CTD_ANON_180, scope=otherClocks, documentation='Describes a clock not directly associated with an input port. The clockSource attribute can be used on these clocks to indicate the actual clock source (e.g. an output port of a clock generator cell).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 231, 2)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(otherClocks._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'otherClockDriver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 139, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
otherClocks._Automaton = _BuildAutomaton_55()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellFunction'), CTD_ANON_146, scope=CTD_ANON_56, documentation='Defines a technology library cell in library independent fashion, based on specification of a cell function and strength.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 168, 16)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellClass'), CTD_ANON_147, scope=CTD_ANON_56, documentation='Defines a technology library cell in library independent fashion, based on specification of a cell class and strength.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 180, 16)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cellFunction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 168, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cellClass')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 180, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_56()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification'), CTD_ANON_56, scope=CTD_ANON_57, documentation='Used to provide a generic description of a technology library cell.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 162, 4)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 219, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_57()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification'), CTD_ANON_56, scope=CTD_ANON_58, documentation='Used to provide a generic description of a technology library cell.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 162, 4)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'count'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_58, documentation='Indicates how many loads of the specified cell are connected. If not present, 3 is assumed.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 230, 16), unicode_default='3'))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 230, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cellSpecification')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 229, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'count')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 230, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_58()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_59, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint'), CTD_ANON_148, scope=CTD_ANON_59, documentation='Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 195, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint'), CTD_ANON_57, scope=CTD_ANON_59, documentation='Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 213, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint'), CTD_ANON_58, scope=CTD_ANON_59, documentation='Defines a constraint indicating the type of load on an output port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 223, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_60, scope=CTD_ANON_59, documentation='The optional element vector specify the bits of a vector for which the constraints apply. The vaules of left and right must be within the range of the port. If the vector is not specified then the constraints apply to all the bits of the port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 245, 16)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 143, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 144, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 245, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 274, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 275, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 276, 16))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 143, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 144, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 245, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 274, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 275, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 276, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_59()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), CTD_ANON_61, scope=CTD_ANON_60, documentation='The optional elements left and right can be used to select a bit-slice of a vector. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 251, 28)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), CTD_ANON_62, scope=CTD_ANON_60, documentation='The optional elements left and right can be used to select a bit-slice of a vector. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 261, 28)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 251, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 261, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_60()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSet'), CTD_ANON_59, scope=CTD_ANON_63, documentation='Defines constraints that apply to a component port. If multiple constraintSet elements are used, each must have a unique value for the constraintSetId attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 238, 4)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'constraintSet')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 287, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_61()




abstractionDefPortConstraintsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint'), CTD_ANON_148, scope=abstractionDefPortConstraintsType, documentation='Defines a timing constraint for the associated port. The constraint is relative to the clock specified by the clockName attribute. The clockEdge indicates which clock edge the constraint is associated with (default is rising edge). The delayType attribute can be specified to further refine the constraint.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 195, 4)))

abstractionDefPortConstraintsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint'), CTD_ANON_57, scope=abstractionDefPortConstraintsType, documentation='Defines a constraint indicating how an input is to be driven. The preferred methodology is to specify a library cell in technology independent fashion. The implemention tool should assume that the associated port is driven by the specified cell, or that the drive strength of the input port is indicated by the specified resistance value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 213, 4)))

abstractionDefPortConstraintsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint'), CTD_ANON_58, scope=abstractionDefPortConstraintsType, documentation='Defines a constraint indicating the type of load on an output port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 223, 4)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 303, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 304, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 308, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'timingConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 302, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 303, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 304, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driveConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 307, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 308, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractionDefPortConstraintsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loadConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 311, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractionDefPortConstraintsType._Automaton = _BuildAutomaton_62()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_64, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hierConnections'), CTD_ANON_65, scope=CTD_ANON_64, documentation='A list of hierarchy connections between bus interfaces on component instances and the bus interfaces on the encompassing component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 77, 16)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_64, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_64, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_64, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_64, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), CTD_ANON_131, scope=CTD_ANON_64, documentation='Sub instances of internal components.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 121, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), CTD_ANON_132, scope=CTD_ANON_64, documentation='Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 195, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), CTD_ANON_134, scope=CTD_ANON_64, documentation='Connections between internal sub components.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 222, 4)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 74, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 75, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 76, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 77, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 108, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 109, 16))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentInstances')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 74, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnections')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 75, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 76, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hierConnections')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 77, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 108, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 109, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_63()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hierConnection'), CTD_ANON_66, scope=CTD_ANON_65, documentation='Represents a hierarchy connection', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 83, 28)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hierConnection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 83, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_64()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_66, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interface'), interface, scope=CTD_ANON_66, documentation='Component and bus reference to export to the upper level component.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name (active or monitor) of the hierachical connection.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 89, 40)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 96, 40))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 89, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/design.xsd', 96, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_65()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_67, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'designRef'), libraryRefType, scope=CTD_ANON_67, documentation='The design to which this configuration applies', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 74, 8)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChainConfiguration'), CTD_ANON_68, scope=CTD_ANON_67, documentation='Contains the configurable information associated with a generatorChain and its generators. Note that configurable information for generators associated with components is stored in the design file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 79, 8)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnectionConfiguration'), CTD_ANON_69, scope=CTD_ANON_67, documentation='Contains the information about the abstractors required to cross between two interfaces at with different abstractionDefs.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 94, 8)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewConfiguration'), CTD_ANON_72, scope=CTD_ANON_67, documentation='Contains the active view for each instance in the design', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 144, 8)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_67, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_67, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_67, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_67, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 79, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 94, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 144, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 159, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 160, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'designRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 74, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorChainConfiguration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 79, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnectionConfiguration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 94, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewConfiguration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 144, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 159, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 160, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_66()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef'), libraryRefType, scope=CTD_ANON_68, documentation='References a generatorChain.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 85, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), CTD_ANON_128, scope=CTD_ANON_68, documentation='All configuration information for a contained component, generator, generator chain or abstractor instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 90, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 85, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 90, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_67()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnectionRef'), pyxb.binding.datatypes.Name, scope=CTD_ANON_69, documentation='Reference to the interconnection name, monitor interconnection name or possibly a hierConnection interfaceName in a design file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 100, 14)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractors'), CTD_ANON_70, scope=CTD_ANON_69, documentation='List of abstractors for this interconnection', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 105, 14)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnectionRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 100, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractors')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 105, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_68()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractor'), CTD_ANON_71, scope=CTD_ANON_70, documentation='Element to hold a the abstractor reference, the configuration and viewName. If multiple elements are present then the order is the order in which the abstractors should be chained together.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 111, 20)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 111, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_69()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_71, documentation='Instance name for the abstractor', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 117, 26)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorRef'), libraryRefType, scope=CTD_ANON_71, documentation='Abstractor reference', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 124, 26)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewName'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_71, documentation='The name of the active view for this abstractor instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 130, 26)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), CTD_ANON_128, scope=CTD_ANON_71, documentation='All configuration information for a contained component, generator, generator chain or abstractor instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 122, 26))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 123, 26))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 129, 26))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 117, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 122, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 123, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 124, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 129, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 130, 26))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_70()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewName'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_72, documentation='The name of the active view for this instance', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 151, 14)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_72, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 97, 4)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 150, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/designConfig.xsd', 151, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_71()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_73, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_149, scope=CTD_ANON_73, documentation='Path to the file or directory. If this path is a relative path, then it is relative to the containing XML file. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 72, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isIncludeFile'), CTD_ANON_74, scope=CTD_ANON_73, documentation='Indicate that the file is include file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 87, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), CTD_ANON_75, scope=CTD_ANON_73, documentation='Logical name for this file or directory e.g. VHDL library name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 103, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'exportedName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_73, documentation='Defines exported names that can be accessed externally, e.g. exported function names from a C source file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 119, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'buildCommand'), CTD_ANON_76, scope=CTD_ANON_73, documentation='Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 124, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'define'), nameValuePairType, scope=CTD_ANON_73, documentation='Specifies define symbols that are used in the source file.  The spirit:name element gives the name to be defined and the text content of the spirit:value element holds the value.  This element supports full configurability.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 187, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'imageType'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, documentation='Relates the current file to a certain executable image type in the design.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 192, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, documentation='String for describing this file to users', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 197, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, scope=CTD_ANON_73, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 404, 4)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_7, scope=CTD_ANON_73, documentation='Enumerated file types known by IP-XACT.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, documentation='Free form file type, not - yet - known by IP-XACT .', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 87, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 103, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 119, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 124, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 186, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 187, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 192, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 197, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 202, 16))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 72, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isIncludeFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 87, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 103, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'exportedName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 119, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'buildCommand')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 124, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependency')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 186, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'define')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 187, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 192, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 197, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 202, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_72()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_150, scope=CTD_ANON_76, documentation='Command used to build this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 130, 28)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_151, scope=CTD_ANON_76, documentation='Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 142, 28)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_152, scope=CTD_ANON_76, documentation='If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 159, 28)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetName'), CTD_ANON_153, scope=CTD_ANON_76, documentation='Pathname to the file that is derived (built) from the source file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 171, 28)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 130, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 142, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 159, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 171, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 130, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 142, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 159, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 171, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_73()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_77, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_77, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_154, scope=CTD_ANON_77, documentation='Name of the executable image file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 223, 16)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, documentation='String for describing this executable image to users', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 233, 16)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'languageTools'), CTD_ANON_78, scope=CTD_ANON_77, documentation='Default commands and flags for software language tools needed to build the executable image.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 243, 16)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), CTD_ANON_81, scope=CTD_ANON_77, documentation='Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 366, 16)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 233, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 238, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 243, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 366, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 376, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 223, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 233, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 238, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'languageTools')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 243, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 366, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 376, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_74()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder'), CTD_ANON_79, scope=CTD_ANON_78, documentation='A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 249, 28)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linker'), CTD_ANON_158, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 298, 28)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags'), CTD_ANON_159, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 307, 28)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile'), CTD_ANON_80, scope=CTD_ANON_78, documentation='Specifies a linker command file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 316, 28)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 249, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 298, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 307, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 316, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 249, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linker')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 298, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 307, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 316, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_75()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_79, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_155, scope=CTD_ANON_79, documentation='Default command used to build files of the specified fileType. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 256, 40)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_156, scope=CTD_ANON_79, documentation='Flags given to the build command when building files of this type.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 268, 40)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_157, scope=CTD_ANON_79, documentation='If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 280, 40)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_7, scope=CTD_ANON_79, documentation='Enumerated file types known by IP-XACT.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, documentation='Free form file type, not - yet - known by IP-XACT .', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 268, 40))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 280, 40))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 294, 40))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 256, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 268, 40))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 280, 40))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 294, 40))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_76()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_80, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_160, scope=CTD_ANON_80, documentation='Linker command file name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 322, 40)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch'), CTD_ANON_161, scope=CTD_ANON_80, documentation='The command line switch to specify the linker command file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 334, 40)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enable'), CTD_ANON_162, scope=CTD_ANON_80, documentation='Specifies whether to generate and enable the linker command file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 346, 40)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, documentation='A reference to a generator element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 587, 4)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 358, 40))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 359, 40))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 322, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 334, 40))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enable')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 346, 40))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 358, 40))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 359, 40))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_77()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), CTD_ANON_82, scope=CTD_ANON_81, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 372, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_78()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'localName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_82, documentation='Refers to a fileSet defined within this description.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 396, 16)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'localName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 396, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_79()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), fileSetType, scope=CTD_ANON_83, documentation='This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 212, 4)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSet')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 415, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_80()




fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_163, scope=fileBuilderType, documentation='Default command used to build files of the specified fileType. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 422, 12)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_164, scope=fileBuilderType, documentation='Flags given to the build command when building files of this type.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 434, 12)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_165, scope=fileBuilderType, documentation='If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 446, 12)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_7, scope=fileBuilderType, documentation='Enumerated file types known by IP-XACT.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=fileBuilderType, documentation='Free form file type, not - yet - known by IP-XACT .', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 422, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 434, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 446, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 422, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 434, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 446, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fileBuilderType._Automaton = _BuildAutomaton_81()




fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=fileSetType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=fileSetType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=fileSetType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=fileSetType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'file'), CTD_ANON_73, scope=fileSetType, documentation='IP-XACT reference to a file or directory.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 66, 4)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, scope=fileSetType, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 404, 4)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=fileSetType, documentation='Identifies this filleSet as belonging to a particular group or having a particular purpose. Examples might be "diagnostics", "boot", "application", "interrupt", "deviceDriver", etc.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 465, 12)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), fileBuilderType, scope=fileSetType, documentation='Default command and flags used to build derived files from the sourceName files in this file set.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 471, 12)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'function'), CTD_ANON_84, scope=fileSetType, documentation='Generator information if this file set describes a function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 477, 12)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 465, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 470, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 471, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 476, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 477, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 563, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 465, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'file')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 470, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 471, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependency')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 476, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'function')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 477, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 563, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fileSetType._Automaton = _BuildAutomaton_82()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entryPoint'), pyxb.binding.datatypes.Name, scope=CTD_ANON_84, documentation='Optional name for the function.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 483, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_84, documentation='A reference to the file that contains the entry point function.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 488, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'returnType'), STD_ANON_6, scope=CTD_ANON_84, documentation='Function return type. Possible values are void and int.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 493, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'argument'), CTD_ANON_166, scope=CTD_ANON_84, documentation='Arguments passed in when the function is called. Arguments are passed in order.\n\nThis is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name element and its value is in the spirit:value element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 504, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'disabled'), CTD_ANON_167, scope=CTD_ANON_84, documentation='Specifies if the SW function is enabled. If not present the function is always enabled.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 522, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceFile'), CTD_ANON_85, scope=CTD_ANON_84, documentation='Location information for the source file of this function.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 534, 24)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 483, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 493, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 504, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 522, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 534, 24))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entryPoint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 483, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 488, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'returnType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 493, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'argument')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 504, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'disabled')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 522, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 534, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_83()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceName'), CTD_ANON_168, scope=CTD_ANON_85, documentation='Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.\n    ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 540, 36)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_7, scope=CTD_ANON_85, documentation='Enumerated file types known by IP-XACT.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, documentation='Free form file type, not - yet - known by IP-XACT .', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 540, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 69, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/fileType.xsd', 111, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_84()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON_15, scope=CTD_ANON_86, documentation='Choices used by elements with an attribute spirit:choiceRef.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/autoConfigure.xsd', 214, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_86, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChainSelector'), CTD_ANON_87, scope=CTD_ANON_86, documentation='Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selected based on the selection criteria, DE will prompt the user to resolve to a single generator.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 71, 10)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector'), generatorSelectorType, scope=CTD_ANON_86, documentation='Selects generators declared in components of the current design for inclusion into this generator chain.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 91, 10)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'chainGroup'), pyxb.binding.datatypes.Name, scope=CTD_ANON_86, documentation='Identifies this generator chain as belonging to the named group. This is used by other generator chains to select this chain for programmatic inclusion.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 98, 8)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generator'), CTD_ANON_169, scope=CTD_ANON_86, documentation='Specifies a set of generators.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 115, 2)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_86, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_86, documentation='Name of the logical library this element belongs to.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_86, documentation='The name of the object.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_86, documentation='Indicates the version of the named element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 98, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 103, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 104, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 105, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 106, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 79, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 84, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/identifier.xsd', 89, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorChainSelector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 71, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 91, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generator')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 96, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'chainGroup')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 98, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 103, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 104, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choices')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 105, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 106, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_85()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef'), libraryRefType, scope=CTD_ANON_87, documentation='Select another generator chain using the unique identifier of this generator chain.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 78, 16)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_170, scope=CTD_ANON_87, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 140, 2)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'groupSelector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 77, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorChainRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 78, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_86()




generatorSelectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_170, scope=generatorSelectorType, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 140, 2)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(generatorSelectorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'groupSelector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 201, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
generatorSelectorType._Automaton = _BuildAutomaton_87()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), CTD_ANON_185, scope=CTD_ANON_89, documentation='Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 125, 2)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 210, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_88()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerator'), instanceGeneratorType, scope=CTD_ANON_90, documentation='Specifies a set of abstractor generators. The scope attribute applies to abstractor generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 135, 2)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abstractorGenerator')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 220, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_89()




generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=generatorType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=generatorType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=generatorType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=generatorType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=generatorType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phase'), CTD_ANON_88, scope=generatorType, documentation='This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 165, 2)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'apiType'), STD_ANON_10, scope=generatorType, documentation='Indicates the type of API used by the generator. Valid value are TGI, and none. If this element is not present, TGI is assumed.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transportMethods'), CTD_ANON_91, scope=generatorType, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorExe'), spiritURI, scope=generatorType, documentation='The pathname to the executable file that implements the generator', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'apiType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transportMethods')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorExe')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
generatorType._Automaton = _BuildAutomaton_90()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transportMethod'), STD_ANON_11, scope=CTD_ANON_91, documentation="Defines a SOAP transport protocol other than HTTP which is supported by this generator. The only other currently supported protocol is 'file'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 246, 12)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transportMethod')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 246, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_91()




addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=addressBlockType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=addressBlockType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=addressBlockType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=addressBlockType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=addressBlockType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=addressBlockType, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=addressBlockType, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_187, scope=addressBlockType, documentation='Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_205, scope=addressBlockType, documentation='The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_171, scope=addressBlockType, documentation='The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=addressBlockType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'register'), CTD_ANON_97, scope=addressBlockType, documentation='A single register', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), CTD_ANON_102, scope=addressBlockType, documentation='A structure of registers and register files', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), pyxb.binding.datatypes.Name, scope=addressBlockType, documentation='Identifier name used to indicate that multiple addressBlock elements contain the exact same information except for the elements in the addressBlockInstanceGroup.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 916, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 916, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 155, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 488, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 916, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'register')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registerFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 155, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
addressBlockType._Automaton = _BuildAutomaton_92()




bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=bankedBlockType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=bankedBlockType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=bankedBlockType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=bankedBlockType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=bankedBlockType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=bankedBlockType, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=bankedBlockType, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_205, scope=bankedBlockType, documentation='The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_171, scope=bankedBlockType, documentation='The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=bankedBlockType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'register'), CTD_ANON_97, scope=bankedBlockType, documentation='A single register', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), CTD_ANON_102, scope=bankedBlockType, documentation='A structure of registers and register files', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 189, 12))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'register')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registerFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 189, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bankedBlockType._Automaton = _BuildAutomaton_93()




bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=bankedSubspaceType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=bankedSubspaceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=bankedSubspaceType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12)))

bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=bankedSubspaceType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=bankedSubspaceType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 143, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 144, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 199, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 204, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 138, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 143, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 144, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 199, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 204, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
bankedSubspaceType._Automaton = _BuildAutomaton_94()




fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=fieldType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=fieldType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=fieldType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=fieldType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=fieldType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), pyxb.binding.datatypes.nonNegativeInteger, scope=fieldType, documentation="Offset of this field's bit 0 from bit 0 of the register.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 214, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=fieldType, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=fieldType, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValues'), CTD_ANON_101, scope=fieldType, documentation='Enumerates specific values that can be assigned to the bit field.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 670, 4)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modifiedWriteValue'), STD_ANON_13, scope=fieldType, documentation="If present this element describes the modification of field data caused by a write operation. 'oneToClear' means that in a bitwise fashion each write data bit of a one will clear the corresponding bit in the field. 'oneToSet' means that in a bitwise fashion each write data bit of a one will set the corresponding bit in the field.  'oneToToggle' means that in a bitwise fashion each write data bit of a one will toggle the corresponding bit in the field. 'zeroToClear' means that in a bitwise fashion each write data bit of a zero will clear the corresponding bit in the field. 'zeroToSet' means that in a bitwise fashion each write data bit of a zero will set the corresponding bit in the field. 'zeroToToggle' means that in a bitwise fashion each write data bit of a zero will toggle the corresponding bit in the field. 'clear' means any write to this field clears the field. 'set' means any write to the field sets the field. 'modify' means any write to this field may modify that data. If this element is not present the write operation data is written.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 729, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'writeValueConstraint'), writeValueConstraintType, scope=fieldType, documentation='The legal values that may be written to a field. If not specified the legal values are not specified.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 747, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'readAction'), STD_ANON_14, scope=fieldType, documentation="A list of possible actions for a read to set the field after the read. 'clear' means that after a read the field is cleared. 'set' means that after a read the field is set. 'modify' means after a read the field is modified. If not present the field value is not modified after a read.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 752, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'testable'), CTD_ANON_173, scope=fieldType, documentation='Can the field be tested with an automated register test routine. The presumed value is true if not specified.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 764, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), pyxb.binding.datatypes.Name, scope=fieldType, documentation='Identifier name used to indicate that multiple field elements contain the exact same information for the elements in the fieldDefinitionGroup.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 866, 12)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), CTD_ANON_174, scope=fieldType, documentation='Width of the field in bits.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 871, 12)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 866, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 722, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 727, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 728, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 729, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 747, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 752, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 764, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 220, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 221, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 214, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 866, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitWidth')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 871, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 722, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 727, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValues')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 728, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modifiedWriteValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 729, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'writeValueConstraint')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 747, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'readAction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 752, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'testable')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 764, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 220, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 221, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fieldType._Automaton = _BuildAutomaton_95()




memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=memoryMapType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=memoryMapType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=memoryMapType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=memoryMapType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=memoryMapType, documentation='Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap'), memoryRemapType, scope=memoryMapType, documentation='Additional memory map elements that are dependent on the component state.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 246, 12)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=memoryMapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=memoryMapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits'), pyxb.binding.datatypes.positiveInteger, scope=memoryMapType, documentation='The number of data bits in an addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 467, 4)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 245, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 246, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 255, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 256, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 230, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 231, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 246, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 255, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 256, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
memoryMapType._Automaton = _BuildAutomaton_96()




memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=memoryRemapType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=memoryRemapType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=memoryRemapType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=memoryRemapType, documentation='Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=memoryRemapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=memoryRemapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 266, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 230, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 231, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
memoryRemapType._Automaton = _BuildAutomaton_97()




localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=localMemoryMapType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=localMemoryMapType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=localMemoryMapType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=localMemoryMapType, documentation='Maps in an address subspace from across a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=localMemoryMapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 318, 4)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=localMemoryMapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attribute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 445, 4)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 281, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 230, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 231, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 232, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
localMemoryMapType._Automaton = _BuildAutomaton_98()




subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=subspaceRefType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=subspaceRefType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=subspaceRefType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=subspaceRefType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=subspaceRefType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_187, scope=subspaceRefType, documentation='Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 295, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 300, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 488, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 295, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 300, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
subspaceRefType._Automaton = _BuildAutomaton_99()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpace'), CTD_ANON_93, scope=CTD_ANON_92, documentation='This defines a logical space, referenced by a bus master.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 339, 16)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpace')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 339, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_100()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_93, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_93, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_93, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), CTD_ANON_77, scope=CTD_ANON_93, documentation='Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 217, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'segments'), CTD_ANON_94, scope=CTD_ANON_93, documentation='Address segments withing an addressSpace ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 347, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap'), localMemoryMapType, scope=CTD_ANON_93, documentation='Provides the local memory map of an address space.  Blocks in this memory map are accessable to master interfaces on this component that reference this address space.   They are not accessable to any external master interface.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 393, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_93, documentation='The number of data bits in an addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 467, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_205, scope=CTD_ANON_93, documentation='The address range of an address block.  Expressed as the number of addressable units accessible to the block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_171, scope=CTD_ANON_93, documentation='The bit width of a row in the address block. The range and the width are related by the following formulas:\n          number_of_bits_in_block = spirit:addressUnitBits * spirit:range\n          number_of_rows_in_block = number_of_bits_in_block / spirit:width\n          ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 347, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 391, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 392, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 393, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 402, 28))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 407, 28))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 532, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 547, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'segments')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 347, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressUnitBits')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 391, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'executableImage')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 392, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 393, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 402, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 407, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_101()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'segment'), CTD_ANON_95, scope=CTD_ANON_94, documentation='Address segment withing an addressSpace ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 353, 40)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'segment')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 353, 40))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_102()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_95, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_95, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), CTD_ANON_186, scope=CTD_ANON_95, documentation='Address offset of the segment within the containing address space.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 360, 52)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_204, scope=CTD_ANON_95, documentation='The address range of asegment.  Expressed as the number of addressable units accessible to the segment.         ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 372, 52)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 384, 52))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 360, 52))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 372, 52))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 384, 52))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_103()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMap'), memoryMapType, scope=CTD_ANON_96, documentation="The set of address blocks a bus slave contributes to the bus' address space.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 429, 16)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 429, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_104()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_97, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_97, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_97, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_97, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=CTD_ANON_97, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dim'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_97, documentation='Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 597, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), scaledNonNegativeInteger, scope=CTD_ANON_97, documentation="Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 602, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'alternateRegisters'), CTD_ANON_98, scope=CTD_ANON_97, documentation='Alternate definitions for the current register', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 608, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), pyxb.binding.datatypes.Name, scope=CTD_ANON_97, documentation='Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the registerDefinitionGroup.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 931, 12)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'size'), CTD_ANON_175, scope=CTD_ANON_97, documentation='Width of the register in bits.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 936, 12)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reset'), CTD_ANON_103, scope=CTD_ANON_97, documentation='Register value at reset.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 950, 12)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'field'), fieldType, scope=CTD_ANON_97, documentation='Describes individual bit fields within the register.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 983, 12)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 597, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 931, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 948, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 949, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 950, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 983, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 608, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 653, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 654, 24))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dim')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 597, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 602, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 931, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'size')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 936, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 948, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 949, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 950, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'field')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 983, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'alternateRegisters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 608, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 653, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 654, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_105()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'alternateRegister'), CTD_ANON_99, scope=CTD_ANON_98, documentation='Alternate definition for the current register', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 614, 36)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'alternateRegister')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 614, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_106()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_99, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_99, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_99, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_99, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=CTD_ANON_99, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'alternateGroups'), CTD_ANON_100, scope=CTD_ANON_99, documentation='Defines a list of grouping names that this register description belongs.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 621, 48)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), pyxb.binding.datatypes.Name, scope=CTD_ANON_99, documentation='Identifier name used to indicate that multiple register elements contain the exact same information for the elements in the alternateRegisterDefinitionGroup.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 995, 12)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reset'), CTD_ANON_104, scope=CTD_ANON_99, documentation='Register value at reset.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1002, 12)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'field'), fieldType, scope=CTD_ANON_99, documentation='Describes individual bit fields within the register.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1035, 12)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 995, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1000, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1001, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1002, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1035, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 636, 48))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 637, 48))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'alternateGroups')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 621, 48))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 995, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1000, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1001, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1002, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'field')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1035, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 636, 48))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 637, 48))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_107()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'alternateGroup'), pyxb.binding.datatypes.Name, scope=CTD_ANON_100, documentation='Defines a grouping name that this register description belongs.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 627, 60)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'alternateGroup')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 627, 60))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_108()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValue'), CTD_ANON_172, scope=CTD_ANON_101, documentation='Enumerates specific values that can be assigned to the bit field. The name of this enumerated value. This may be used as a token in generating code.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 676, 16)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enumeratedValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 676, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_109()




writeValueConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'writeAsRead'), pyxb.binding.datatypes.boolean, scope=writeValueConstraintType, documentation='writeAsRead indicates that only a value immediately read before a write is a legal value to be written.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 795, 12)))

writeValueConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'useEnumeratedValues'), pyxb.binding.datatypes.boolean, scope=writeValueConstraintType, documentation='useEnumeratedValues indicates that only write enumeration value shall be legal values to be written.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 800, 12)))

writeValueConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minimum'), CTD_ANON_188, scope=writeValueConstraintType, documentation='The minimum legal value that may be written to a field', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 806, 16)))

writeValueConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maximum'), CTD_ANON_189, scope=writeValueConstraintType, documentation='The maximum legal value that may be written to a field', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 818, 16)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(writeValueConstraintType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'writeAsRead')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 795, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(writeValueConstraintType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'useEnumeratedValues')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 800, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(writeValueConstraintType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minimum')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 806, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(writeValueConstraintType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maximum')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 818, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
writeValueConstraintType._Automaton = _BuildAutomaton_110()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=CTD_ANON_102, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_102, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_102, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'register'), CTD_ANON_97, scope=CTD_ANON_102, documentation='A single register', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerFile'), CTD_ANON_102, scope=CTD_ANON_102, documentation='A structure of registers and register files', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 833, 4)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dim'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_102, documentation='Dimensions a register array, the semantics for dim elements are the same as the C language standard for the  layout of memory in multidimensional arrays.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 840, 16)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), scaledNonNegativeInteger, scope=CTD_ANON_102, documentation="Offset from the address block's baseAddress or the containing register file's addressOffset, expressed as the number of addressUnitBits from the containing memoryMap or localMemoryMap.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 845, 16)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier'), pyxb.binding.datatypes.Name, scope=CTD_ANON_102, documentation='Identifier name used to indicate that multiple registerFile elements contain the exact same information except for the elements in the registerFileInstanceGroup.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 891, 12)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_206, scope=CTD_ANON_102, documentation='The range of a register file.  Expressed as the number of addressable units accessible to the block. Specified in units of addressUnitBits.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 896, 12)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 840, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 891, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 851, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 852, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dim')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 840, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 845, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 891, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 896, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'register')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 590, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registerFile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 663, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 851, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 852, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_111()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_190, scope=CTD_ANON_103, documentation='The value itself.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 956, 24)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mask'), CTD_ANON_191, scope=CTD_ANON_103, documentation='Mask to be anded with the value before comparing to the reset value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 968, 24)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 968, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 956, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mask')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 968, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_112()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_192, scope=CTD_ANON_104, documentation='The value itself.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1008, 24)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mask'), CTD_ANON_193, scope=CTD_ANON_104, documentation='Mask to be anded with the value before comparing to the reset value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1020, 24)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1020, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1008, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mask')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 1020, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_113()




viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=viewType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=viewType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=viewType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=viewType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=viewType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSetRef'), pyxb.binding.datatypes.NMTOKEN, scope=viewType, documentation='A reference to a set of port constraints.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 291, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), CTD_ANON_82, scope=viewType, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), STD_ANON_16, scope=viewType, documentation=' Defines the hardware environment in which this view applies. The format of the string is language:tool:vendor_extension, with each piece being optional. The language must be one of the types from spirit:fileType. The tool values are defined by the SPIRIT Consortium, and include generic values "*Simulation" and "*Synthesis" to imply any tool of the indicated type. Having more than one envIdentifier indicates that the view applies to multiple environments.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 72, 12)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hierarchyRef'), libraryRefType, scope=viewType, documentation=' References an IP-XACT design or configuration document (by VLNV) that provides a design for the component ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 83, 16)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'language'), CTD_ANON_105, scope=viewType, documentation=' The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 89, 20)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelName'), pyxb.binding.datatypes.string, scope=viewType, documentation='Language specific name to identity the model. Verilog or SystemVerilog this is the module name. For VHDL this is, with ()’s, the entity(architecture) name pair or without, a single configuration name.  For SystemC this is the class name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 105, 20)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), fileBuilderType, scope=viewType, documentation='Default command and flags used to build derived files from the sourceName files in the referenced file sets.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 110, 20)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRefs'), CTD_ANON_106, scope=viewType, documentation=' Container for white box element references.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 117, 20)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 157, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 158, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 89, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 105, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 110, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 115, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 116, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 117, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 131, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 134, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 157, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 158, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 72, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hierarchyRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 83, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'language')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 89, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 105, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 110, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 115, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'constraintSetRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 116, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRefs')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 117, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 131, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 134, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
viewType._Automaton = _BuildAutomaton_114()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRef'), whiteboxElementRefType, scope=CTD_ANON_106, documentation=' Reference to a white box element which is visible within this view.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 123, 32)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 123, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxElementRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 123, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_115()




abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=abstractorViewType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=abstractorViewType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=abstractorViewType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=abstractorViewType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=abstractorViewType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), CTD_ANON_82, scope=abstractorViewType, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/file.xsd', 390, 4)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), STD_ANON_17, scope=abstractorViewType, documentation=' Defines the hardware environment in which this view applies. The format of the string is language:tool:vendor_extension, with each piece being optional. The language must be one of the types from spirit:fileType. The tool values are defined by the SPIRIT Consortium, and include generic values "*Simulation" and "*Synthesis" to imply any tool of the indicated type. Having more than one envIdentifier indicates that the view applies to multiple environments.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 143, 12)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'language'), CTD_ANON_107, scope=abstractorViewType, documentation=' The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 153, 12)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelName'), pyxb.binding.datatypes.string, scope=abstractorViewType, documentation='Language specific name to identity the model. Verilog or SystemVerilog this is the module name. For VHDL this is, with ()’s, the entity(architecture) name pair or without a single configuration name.  For SystemC this is the class name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 169, 12)))

abstractorViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), fileBuilderType, scope=abstractorViewType, documentation='Default command and flags used to build derived files from the sourceName files in the referenced file sets.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 174, 12)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 157, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 158, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 153, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 169, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 174, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 179, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 180, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 181, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 152, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 157, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 158, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 143, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'language')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 153, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 169, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 174, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 179, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 180, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(abstractorViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 181, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractorViewType._Automaton = _BuildAutomaton_116()




modelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'views'), CTD_ANON_108, scope=modelType, documentation='View container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 190, 12)))

modelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ports'), CTD_ANON_109, scope=modelType, documentation='Port container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 204, 12)))

modelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelParameters'), CTD_ANON_110, scope=modelType, documentation='Model parameter name value pairs container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 214, 12)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 190, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 204, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 214, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(modelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'views')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 190, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(modelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ports')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 204, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(modelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelParameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 214, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
modelType._Automaton = _BuildAutomaton_117()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'view'), viewType, scope=CTD_ANON_108, documentation='Single view of a component', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 196, 24)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'view')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 196, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_118()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'port'), portType, scope=CTD_ANON_109, documentation='Describes port characteristics.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 355, 4)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'port')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 210, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_119()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelParameter'), nameValueTypeType, scope=CTD_ANON_110, documentation='A model parameter name value pair. The name is given in an attribute. The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. For hardware based models, the name should be identical to the RTL (VHDL generic or Verilog parameter). The usageType attribute indicates how the model parameter is to be used.\n                ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 220, 24)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelParameter')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 220, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_120()




abstractorModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'views'), CTD_ANON_111, scope=abstractorModelType, documentation='View container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 236, 12)))

abstractorModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ports'), CTD_ANON_112, scope=abstractorModelType, documentation='Port container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 250, 12)))

abstractorModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelParameters'), CTD_ANON_113, scope=abstractorModelType, documentation='Model parameter name value pairs container', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 260, 12)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 236, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 250, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 260, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(abstractorModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'views')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 236, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(abstractorModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ports')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 250, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelParameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 260, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
abstractorModelType._Automaton = _BuildAutomaton_121()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'view'), abstractorViewType, scope=CTD_ANON_111, documentation='Single view of an abstractor', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 242, 24)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 242, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'view')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 242, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_122()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'port'), abstractorPortType, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 256, 24)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 256, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'port')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 256, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_123()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelParameter'), nameValueTypeType, scope=CTD_ANON_113, documentation='A model parameter name value pair. The name is given in an attribute. The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. For hardware based models, the name should be identical to the RTL (VHDL generic or Verilog parameter). The usageType attribute indicate how the model parameter is to be used.\n                ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 266, 24)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 266, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelParameter')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 266, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_124()




whiteboxElementRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'whiteboxPath'), CTD_ANON_114, scope=whiteboxElementRefType, documentation=' The whiteboxPath elements (as a set) define the name(s) needed to define the entire white box element in this view.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 287, 12)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(whiteboxElementRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'whiteboxPath')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 287, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
whiteboxElementRefType._Automaton = _BuildAutomaton_125()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pathName'), pyxb.binding.datatypes.string, scope=CTD_ANON_114, documentation=' The view specific name for a portion of the white box element.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 293, 24)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_114, documentation=' Indicates the left bound value for the associated path name.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 302, 28)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_114, documentation=' Indicates the right bound values for the associated path name.  ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 307, 28)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 298, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pathName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 293, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 302, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/model.xsd', 307, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_126()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), CTD_ANON_176, scope=CTD_ANON_115, documentation='The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 83, 16)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), CTD_ANON_177, scope=CTD_ANON_115, documentation='The optional elements left and right can be used to select a bit-slice of a port vector to map to the bus interface. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 95, 16)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 83, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 95, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_127()




portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), portName, scope=portDeclarationType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12)))

portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=portDeclarationType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=portDeclarationType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wire'), portWireType, scope=portDeclarationType, documentation='Defines a port whose type resolves to simple bits.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 120, 16)))

portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactional'), portTransactionalType, scope=portDeclarationType, documentation='Defines a port that implements or uses a service that can be implemented with functions or methods.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 125, 16)))

portDeclarationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), portAccessType_, scope=portDeclarationType, documentation='Port access characteristics.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wire')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 120, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactional')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 125, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(portDeclarationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
portDeclarationType._Automaton = _BuildAutomaton_128()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeName'), CTD_ANON_117, scope=CTD_ANON_116, documentation='The name of the port type. Can be any predefined type such sc_port or sc_export in SystemC or any user-defined type such as tlm_port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 221, 16)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), pyxb.binding.datatypes.string, scope=CTD_ANON_116, documentation='Where the definition of the type is contained. For SystemC and SystemVerilog it is the include file containing the type definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 237, 16)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 237, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 221, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 237, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_129()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeName'), CTD_ANON_119, scope=CTD_ANON_118, documentation='The name of the service type. Can be any predefined type such as booean or integer or any user-defined type such as addr_type or data_type.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 251, 16)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), pyxb.binding.datatypes.string, scope=CTD_ANON_118, documentation='Where the definition of the type is contained if the type if not part of the language. For SystemC and SystemVerilog it is the include file containing the type definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 273, 16)))

CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_120, scope=CTD_ANON_118, documentation='list service parameters (e.g. parameters for a systemVerilog interface)', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 278, 16)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 273, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 278, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 251, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 273, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 278, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_130()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_120, documentation='A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 90, 4)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 284, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_131()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeName'), CTD_ANON_122, scope=CTD_ANON_121, documentation='The name of the logic type. Examples could be std_logic, std_ulogic, std_logic_vector, sc_logic, ...', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 297, 16)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, documentation='Where the definition of the type is contained. For std_logic, this is contained in IEEE.std_logic_1164.all. For sc_logic, this is contained in systemc.h. For VHDL this is the library and package as defined by the "used" statement. For SystemC and SystemVerilog it is the include file required. For verilog this is not needed.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 313, 16)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewNameRef'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_121, documentation='A reference to a view name in the file for which this type applies.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 318, 16)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 313, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 297, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'typeDefinition')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 313, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewNameRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 318, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_132()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDef'), CTD_ANON_118, scope=CTD_ANON_123, documentation='Definition of a single service type defintion', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 245, 4)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 332, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_133()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDef'), CTD_ANON_121, scope=CTD_ANON_124, documentation='Definition of a single wire type defintion that can relate to multiple views.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 291, 4)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 342, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_134()




portWireType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constraintSets'), CTD_ANON_63, scope=portWireType, documentation='List of constraintSet elements for a component port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/constraints.xsd', 281, 4)))

portWireType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), CTD_ANON_115, scope=portWireType, documentation='Definition of the indecies for a vectored port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 77, 4)))

portWireType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDefs'), CTD_ANON_124, scope=portWireType, documentation='The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 336, 4)))

portWireType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), componentPortDirectionType, scope=portWireType, documentation="The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports.\nA value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 365, 12)))

portWireType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'driver'), driverType, scope=portWireType, documentation='Wire port driver element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 171, 2)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 371, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 377, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 378, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 379, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 365, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(portWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 371, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(portWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDefs')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 377, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(portWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 378, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(portWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'constraintSets')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 379, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
portWireType._Automaton = _BuildAutomaton_135()




portTransactionalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transTypeDef'), CTD_ANON_116, scope=portTransactionalType, documentation='Definition of a single transactional type defintion', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 215, 4)))

portTransactionalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), CTD_ANON_125, scope=portTransactionalType, documentation='Describes the interface protocol.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 397, 12)))

portTransactionalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'connection'), CTD_ANON_126, scope=portTransactionalType, documentation='Bounds number of legal connections.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 417, 12)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 392, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 417, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portTransactionalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transTypeDef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 392, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portTransactionalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 397, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(portTransactionalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'connection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 417, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
portTransactionalType._Automaton = _BuildAutomaton_136()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_125, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'initiative'), STD_ANON_18, scope=CTD_ANON_125, documentation='If this element is present, the type of access is restricted to the specified value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 191, 4)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDefs'), CTD_ANON_123, scope=CTD_ANON_125, documentation='The group of type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 326, 4)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 408, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 413, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'initiative')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 403, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceTypeDefs')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 408, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 413, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_137()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxConnections'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_126, documentation='Indicates the maximum number of connections this port supports. If this element is not present or set to 0 it implies an unbounded number of allowed connections.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 423, 24), unicode_default='0'))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minConnections'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_126, documentation='Indicates the minimum number of connections this port supports. If this element is not present, the minimum number of allowed connections is 1.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 428, 24), unicode_default='1'))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 423, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 428, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxConnections')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 423, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minConnections')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 428, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_138()




portAccessType_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portAccessType'), STD_ANON_19, scope=portAccessType_, documentation="Indicates how a netlister accesses a port. 'ref' means accessed by reference (default) and 'ptr' means accessed by pointer.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 204, 4)))

portAccessType_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'portAccessHandle'), pyxb.binding.datatypes.string, scope=portAccessType_, documentation='If present, is a method to be used to get hold of the object representing the port. This is typically a function call or array element reference in systemC.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 350, 4)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 465, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 470, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(portAccessType_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portAccessType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 465, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(portAccessType_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'portAccessHandle')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 470, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
portAccessType_._Automaton = _BuildAutomaton_139()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset'), CTD_ANON_195, scope=CTD_ANON_127, documentation='Time in nanoseconds until start of one-shot.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 99, 8)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue'), CTD_ANON_196, scope=CTD_ANON_127, documentation='Value of port after first  edge of one-shot.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 111, 8)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration'), CTD_ANON_197, scope=CTD_ANON_127, documentation='Duration in nanoseconds of the one shot.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 123, 8)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 99, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 111, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 123, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_140()




driverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), CTD_ANON_194, scope=driverType, documentation='Default value for a wire port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 65, 2)))

driverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), CTD_ANON_178, scope=driverType, documentation='Describes a driven clock port. ', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 77, 2)))

driverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), CTD_ANON_127, scope=driverType, documentation='Describes a driven one-shot port.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 93, 2)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 165, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 166, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 167, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 168, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(driverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 166, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(driverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockDriver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 167, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(driverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 168, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
driverType._Automaton = _BuildAutomaton_141()




clockDriverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod'), CTD_ANON_198, scope=clockDriverType, documentation='Clock period in units defined by the units attribute. Default is nanoseconds.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 178, 6)))

clockDriverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset'), CTD_ANON_199, scope=clockDriverType, documentation='Time until first pulse. Units are defined by the units attribute. Default is nanoseconds.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 191, 6)))

clockDriverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue'), CTD_ANON_200, scope=clockDriverType, documentation='Value of port after first clock edge.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 204, 6)))

clockDriverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration'), CTD_ANON_201, scope=clockDriverType, documentation='Duration of first state in cycle. Units are defined by the units attribute. Default is nanoseconds.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 216, 6)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(clockDriverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 178, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(clockDriverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 191, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(clockDriverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 204, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(clockDriverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 216, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
clockDriverType._Automaton = _BuildAutomaton_142()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValue'), CTD_ANON_129, scope=CTD_ANON_128, documentation='Describes the content of a configurable element. The required referenceId attribute refers to the ID attribute of the configurable element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 81, 4)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 73, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_143()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_130, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_130, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues'), CTD_ANON_128, scope=CTD_ANON_130, documentation='All configuration information for a contained component, generator, generator chain or abstractor instance.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 67, 4)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_130, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 97, 4)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), libraryRefType, scope=CTD_ANON_130, documentation='References a component to be found in an external library.  The four attributes define the VLNV of the referenced element.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 111, 16)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 109, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 110, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 116, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 117, 16))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 108, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 109, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 110, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentRef')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 111, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurableElementValues')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 116, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 117, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_144()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), CTD_ANON_130, scope=CTD_ANON_131, documentation='Component instance element.  The instance name is contained in the unique-value instanceName attribute.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 102, 4)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentInstance')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 127, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_145()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), CTD_ANON_202, scope=CTD_ANON_132, documentation='Represents an ad-hoc connection between component ports.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 131, 4)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 201, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_146()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_133, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activeInterface'), interface, scope=CTD_ANON_133, documentation='Describes one interface of the interconnection.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name of one end of the connection.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 212, 16)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=2, max=2, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 212, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'activeInterface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 212, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_147()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), CTD_ANON_133, scope=CTD_ANON_134, documentation='Describes a connection between two active (not monitor) busInterfaces.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 205, 4)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monitorInterconnection'), CTD_ANON_135, scope=CTD_ANON_134, documentation='Describes a connection from the interface of one component to any number of monitor interfaces in the design.\n\nAn active interface can be connected to unlimited number of monitor interfaces.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 248, 4)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 228, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 229, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 228, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monitorInterconnection')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 229, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_148()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_135, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_135, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_135, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monitoredActiveInterface'), hierInterface, scope=CTD_ANON_135, documentation='Describes an active interface of the design that all the monitors will be connected to.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name. The optional path attribute indicates the hierarchical instance name path to the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 257, 16)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monitorInterface'), hierInterface, scope=CTD_ANON_135, documentation='Describes a list of monitor interfaces that are connected to the single active interface.\n\nThe componentRef and busRef attributes indicate the instance name and bus interface name. The optional path attribute indicates the hierarchical instance name path to the component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 264, 16)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monitoredActiveInterface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 257, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monitorInterface')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 264, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_149()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_141, scope=CTD_ANON_140, documentation='Base of an address space.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 348, 44)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 348, 44))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 348, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_150()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_142, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more ports in the corresonding bus definition.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 244, 4)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 495, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/busInterface.xsd', 495, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_151()




def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValueTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValueTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(nameValueTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(nameValueTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 181, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(nameValueTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
nameValueTypeType._Automaton = _BuildAutomaton_152()




def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 207, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 208, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 181, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 193, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_166._Automaton = _BuildAutomaton_153()




def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'apiType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transportMethods')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorExe')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_169._Automaton = _BuildAutomaton_154()




CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_170, documentation='Specifies a generator group name or a generator chain group name to be selected for inclusion in the generator chain.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 146, 8)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 146, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_170._Automaton = _BuildAutomaton_155()




instanceGeneratorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=instanceGeneratorType, documentation='An identifier to specify the generator group. This is used by generator chains for selecting which generators to run.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'apiType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transportMethods')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorExe')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
instanceGeneratorType._Automaton = _BuildAutomaton_156()




addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=addressBankType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=addressBankType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=addressBankType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=addressBankType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=addressBankType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=addressBankType, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=addressBankType, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_187, scope=addressBankType, documentation='Base of an address block, bank, subspace map or address space. Expressed as the number of addressable units from the containing memoryMap or localMemoryMap.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 454, 4)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), bankedBlockType, scope=addressBankType, documentation='An address block within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), bankedBankType, scope=addressBankType, documentation='A nested bank of blocks within a bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), bankedSubspaceType, scope=addressBankType, documentation='A subspace map within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=addressBankType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 522, 12))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 488, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 522, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
addressBankType._Automaton = _BuildAutomaton_157()




bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_51, scope=bankedBankType, documentation='A collection of parameters.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 95, 4)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=bankedBankType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=bankedBankType, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=bankedBankType, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=bankedBankType, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=bankedBankType, documentation='Indicates whether the data is volatile.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 305, 4), unicode_default='false'))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), STD_ANON_21, scope=bankedBankType, documentation="Indicates the accessibility of the data in the address bank, address block, register or field.  Possible values are 'read-write', 'read-only',  'write-only', 'writeOnce' and 'read-writeOnce'. If not specified the value is inherited from the containing object.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 310, 4)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), bankedBlockType, scope=bankedBankType, documentation='An address block within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), bankedBankType, scope=bankedBankType, documentation='A nested bank of blocks within a bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), bankedSubspaceType, scope=bankedBankType, documentation='A subspace map within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=bankedBankType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 522, 12))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 497, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 506, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 515, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 571, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 576, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 577, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 578, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 522, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bankedBankType._Automaton = _BuildAutomaton_158()




CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=CTD_ANON_172, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_172, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12)))

CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_172, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_172, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), scaledInteger, scope=CTD_ANON_172, documentation='Enumerated bit field value.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 683, 28)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 688, 28))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 683, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/memoryMap.xsd', 688, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_172._Automaton = _BuildAutomaton_159()




portType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_52, scope=portType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 105, 4)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 147, 20))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wire')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 120, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactional')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 125, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 132, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(portType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 147, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
portType._Automaton = _BuildAutomaton_160()




def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 451, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 457, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 458, 20))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorPortWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 450, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(abstractorPortWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 451, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(abstractorPortWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wireTypeDefs')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 457, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorPortWireType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'driver')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 458, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractorPortWireType._Automaton = _BuildAutomaton_161()




def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 178, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 191, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 204, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 216, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_178._Automaton = _BuildAutomaton_162()




def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 178, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 191, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 204, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/signalDrivers.xsd', 216, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_180._Automaton = _BuildAutomaton_163()




def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 124, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 129, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 130, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 230, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 231, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'apiType')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 232, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transportMethods')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 243, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorExe')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 259, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 264, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/generator.xsd', 179, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_185._Automaton = _BuildAutomaton_164()




abstractorPortType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wire'), abstractorPortWireType, scope=abstractorPortType, documentation='Defines a port whose type resolves to simple bits.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 165, 28)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 177, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 185, 24))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wire')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 165, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactional')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 170, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 177, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(abstractorPortType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/port.xsd', 185, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
abstractorPortType._Automaton = _BuildAutomaton_165()




CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), portName, scope=CTD_ANON_202, documentation='Unique name', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=CTD_ANON_202, documentation='Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the spirit:name.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 211, 4)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_202, documentation='Full description string, typically for documentation', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 216, 4)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'internalPortReference'), CTD_ANON_181, scope=CTD_ANON_202, documentation='Defines a reference to a port on a component contained within the design.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 138, 16)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'externalPortReference'), CTD_ANON_182, scope=CTD_ANON_202, documentation='Defines a reference to a port on the component containing this design. The portRef attribute indicates the name of the port in the containing component.', location=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 165, 16)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 165, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 166, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 171, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/commonStructures.xsd', 172, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'internalPortReference')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 138, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'externalPortReference')), pyxb.utils.utility.Location('/home/dev/eclipse-workspace/pyxb-run/schemas/SPIRIT/1685-2009/subInstances.xsd', 165, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_202._Automaton = _BuildAutomaton_166()

